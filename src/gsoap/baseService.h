// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* baseService.h
   Generated by wsdl2h 2.8.63 from https://blueant.sinnerschrader.com/blueant/services/BaseService?wsdl and typemap.dat
   2018-03-22 16:36:39 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on baseService.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -Onum to optimize output by removing unused schema components.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://blueant.axis.proventis.net/                                       *
 *                                                                            *
\******************************************************************************/

/* WSDL Documentation:

Version 11.1.0 at 26.10.2017 16:30 - WSI - Verified
*/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://blueant.axis.proventis.net/"
ns2 = "http://exception.blueant.axis.proventis.net/"
ns3 = "http://base.blueant.axis.proventis.net/"

*/

#define SOAP_NAMESPACE_OF_ns2	"http://exception.blueant.axis.proventis.net/"
//gsoap ns2   schema namespace:	http://exception.blueant.axis.proventis.net/
//gsoap ns2   schema elementForm:	qualified
//gsoap ns2   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns3	"http://base.blueant.axis.proventis.net/"
//gsoap ns3   schema namespace:	http://base.blueant.axis.proventis.net/
//gsoap ns3   schema elementForm:	qualified
//gsoap ns3   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD type "xs:boolean".
enum xsd__boolean { xsd__boolean__false_, xsd__boolean__true_ };

/// Primitive built-in type "xs:date".
typedef char* xsd__date;



/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://exception.blueant.axis.proventis.net/                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://base.blueant.axis.proventis.net/                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://base.blueant.axis.proventis.net/                                  *
 *                                                                            *
\******************************************************************************/

/// @brief "http://base.blueant.axis.proventis.net/":id is a simpleType restriction of XSD type xs:long.
///
typedef LONG64 ns3__id;

/// @brief "http://base.blueant.axis.proventis.net/":optionalInt is a simpleType restriction of XSD type xs:int.
///
typedef int ns3__optionalInt;

/// @brief "http://base.blueant.axis.proventis.net/":optionalBoolean is a simpleType restriction of XSD type xs:boolean.
///
typedef enum xsd__boolean ns3__optionalBoolean;

/// @brief "http://base.blueant.axis.proventis.net/":optionalDouble is a simpleType restriction of XSD type xs:double.
///
typedef double ns3__optionalDouble;

/// @brief "http://base.blueant.axis.proventis.net/":optionalLong is a simpleType restriction of XSD type xs:long.
///
typedef LONG64 ns3__optionalLong;

/// @brief "http://base.blueant.axis.proventis.net/":T_LicenseType is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   Type of user license.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__T_USCORELicenseType__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__T_USCORELicenseType
{
/// <PRE><BLOCKQUOTE>
///   User with <b>NamedLicense</b>
/// </BLOCKQUOTE></PRE>
	ns3__T_USCORELicenseType__named,	///< xs:string value="named"
/// <PRE><BLOCKQUOTE>
///   User with <b>ConcurrentLicense</b>
/// </BLOCKQUOTE></PRE>
	ns3__T_USCORELicenseType__concurrent,	///< xs:string value="concurrent"
};

/// @brief "http://base.blueant.axis.proventis.net/":T_UserState is a simpleType restriction of XSD type xs:string.
///
/// <PRE><BLOCKQUOTE>
///   State of the user.
/// </BLOCKQUOTE></PRE>
/// @note The enum values are prefixed with "ns3__T_USCOREUserState__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum ns3__T_USCOREUserState
{
/// <PRE><BLOCKQUOTE>
///   The user account is active
/// </BLOCKQUOTE></PRE>
	ns3__T_USCOREUserState__active,	///< xs:string value="active"
/// <PRE><BLOCKQUOTE>
///   The user account is locked
/// </BLOCKQUOTE></PRE>
	ns3__T_USCOREUserState__locked,	///< xs:string value="locked"
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://base.blueant.axis.proventis.net/                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://base.blueant.axis.proventis.net/                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://exception.blueant.axis.proventis.net/                             *
 *                                                                            *
\******************************************************************************/

/// @brief "http://exception.blueant.axis.proventis.net/":GeneralWebserviceException is a complexType.
///
/// struct ns2__GeneralWebserviceException operations:
/// - ns2__GeneralWebserviceException* soap_new_ns2__GeneralWebserviceException(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_ns2__GeneralWebserviceException(struct soap*, ns2__GeneralWebserviceException*) default initialize members
/// - int soap_read_ns2__GeneralWebserviceException(struct soap*, ns2__GeneralWebserviceException*) deserialize from a source
/// - int soap_write_ns2__GeneralWebserviceException(struct soap*, ns2__GeneralWebserviceException*) serialize to a sink
/// - ns2__GeneralWebserviceException* soap_dup_ns2__GeneralWebserviceException(struct soap*, ns2__GeneralWebserviceException* dst, ns2__GeneralWebserviceException *src) returns deep copy of ns2__GeneralWebserviceException src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_ns2__GeneralWebserviceException(ns2__GeneralWebserviceException*) deep deletes ns2__GeneralWebserviceException data members, use only on dst after soap_dup_ns2__GeneralWebserviceException(NULL, ns2__GeneralWebserviceException *dst, ns2__GeneralWebserviceException *src) (use soapcpp2 -Ed)
struct ns2__GeneralWebserviceException
{
/// Element "cause" of XSD type xs:anyType.
    _XML                                 cause                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "message" of XSD type xs:string.
    char*                                message                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://base.blueant.axis.proventis.net/                                  *
 *                                                                            *
\******************************************************************************/

/// @brief "http://base.blueant.axis.proventis.net/":T_ForeignKey is a complexType.
///
/// <PRE><BLOCKQUOTE>
///   Describes the key in a foreign system. Must be filled completely for create/modify methods.
/// </BLOCKQUOTE></PRE>
/// struct ns3__T_USCOREForeignKey operations:
/// - ns3__T_USCOREForeignKey* soap_new_ns3__T_USCOREForeignKey(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_ns3__T_USCOREForeignKey(struct soap*, ns3__T_USCOREForeignKey*) default initialize members
/// - int soap_read_ns3__T_USCOREForeignKey(struct soap*, ns3__T_USCOREForeignKey*) deserialize from a source
/// - int soap_write_ns3__T_USCOREForeignKey(struct soap*, ns3__T_USCOREForeignKey*) serialize to a sink
/// - ns3__T_USCOREForeignKey* soap_dup_ns3__T_USCOREForeignKey(struct soap*, ns3__T_USCOREForeignKey* dst, ns3__T_USCOREForeignKey *src) returns deep copy of ns3__T_USCOREForeignKey src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_ns3__T_USCOREForeignKey(ns3__T_USCOREForeignKey*) deep deletes ns3__T_USCOREForeignKey data members, use only on dst after soap_dup_ns3__T_USCOREForeignKey(NULL, ns3__T_USCOREForeignKey *dst, ns3__T_USCOREForeignKey *src) (use soapcpp2 -Ed)
struct ns3__T_USCOREForeignKey
{
/// <PRE><BLOCKQUOTE>
///   Key in the foreign system
/// </BLOCKQUOTE></PRE>
/// Element "foreignID" of XSD type xs:string.
    char*                                foreignID                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   Name of the foreign system (see masterdata:getForeignSystem)
/// </BLOCKQUOTE></PRE>
/// Element "foreignSystem" of XSD type xs:string.
    char*                                foreignSystem                  nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
};

/// @brief "http://base.blueant.axis.proventis.net/":T_ForeignKeyList is a complexType.
///
/// struct ns3__T_USCOREForeignKeyList operations:
/// - ns3__T_USCOREForeignKeyList* soap_new_ns3__T_USCOREForeignKeyList(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_ns3__T_USCOREForeignKeyList(struct soap*, ns3__T_USCOREForeignKeyList*) default initialize members
/// - int soap_read_ns3__T_USCOREForeignKeyList(struct soap*, ns3__T_USCOREForeignKeyList*) deserialize from a source
/// - int soap_write_ns3__T_USCOREForeignKeyList(struct soap*, ns3__T_USCOREForeignKeyList*) serialize to a sink
/// - ns3__T_USCOREForeignKeyList* soap_dup_ns3__T_USCOREForeignKeyList(struct soap*, ns3__T_USCOREForeignKeyList* dst, ns3__T_USCOREForeignKeyList *src) returns deep copy of ns3__T_USCOREForeignKeyList src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_ns3__T_USCOREForeignKeyList(ns3__T_USCOREForeignKeyList*) deep deletes ns3__T_USCOREForeignKeyList data members, use only on dst after soap_dup_ns3__T_USCOREForeignKeyList(NULL, ns3__T_USCOREForeignKeyList *dst, ns3__T_USCOREForeignKeyList *src) (use soapcpp2 -Ed)
struct ns3__T_USCOREForeignKeyList
{
/// Size of the dynamic array of struct ns3__T_USCOREForeignKey* is 0..unbounded.
   $int                                  __sizeForeignKey               0;
/// Array struct ns3__T_USCOREForeignKey* of size 0..unbounded.
    struct ns3__T_USCOREForeignKey*      ForeignKey_                    0;	///< Multiple elements.
};

/// @brief "http://base.blueant.axis.proventis.net/":UserIDInfo is a complexType.
///
/// struct ns3__UserIDInfo operations:
/// - ns3__UserIDInfo* soap_new_ns3__UserIDInfo(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_ns3__UserIDInfo(struct soap*, ns3__UserIDInfo*) default initialize members
/// - int soap_read_ns3__UserIDInfo(struct soap*, ns3__UserIDInfo*) deserialize from a source
/// - int soap_write_ns3__UserIDInfo(struct soap*, ns3__UserIDInfo*) serialize to a sink
/// - ns3__UserIDInfo* soap_dup_ns3__UserIDInfo(struct soap*, ns3__UserIDInfo* dst, ns3__UserIDInfo *src) returns deep copy of ns3__UserIDInfo src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_ns3__UserIDInfo(ns3__UserIDInfo*) deep deletes ns3__UserIDInfo data members, use only on dst after soap_dup_ns3__UserIDInfo(NULL, ns3__UserIDInfo *dst, ns3__UserIDInfo *src) (use soapcpp2 -Ed)
struct ns3__UserIDInfo
{
//  BEGIN CHOICE <xs:choice minOccurs="1" maxOccurs="1">

/// </BLOCKQUOTE></PRE>
   $int                                  __union_UserIDInfo             1;	///< Union _ns3__union_UserIDInfo selector: set to SOAP_UNION__ns3__union_UserIDInfo_<fieldname>
/// Union for choice in ns3__UserIDInfo.
    union _ns3__union_UserIDInfo
    {
/// <PRE><BLOCKQUOTE>
///   the user id of the user, who should be deleted
/// </BLOCKQUOTE></PRE>
/// Element "userID" of XSD type "http://base.blueant.axis.proventis.net/":id.
    ns3__id                              userID                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   the username used to log in
/// </BLOCKQUOTE></PRE>
/// Element "userName" of XSD type xs:string.
    char*                                userName                       1;	///< Required element.
    }                                    union_UserIDInfo              ;
//  END OF CHOICE
};

/// @brief "http://base.blueant.axis.proventis.net/":T_User is a complexType.
///
/// struct ns3__T_USCOREUser operations:
/// - ns3__T_USCOREUser* soap_new_ns3__T_USCOREUser(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_ns3__T_USCOREUser(struct soap*, ns3__T_USCOREUser*) default initialize members
/// - int soap_read_ns3__T_USCOREUser(struct soap*, ns3__T_USCOREUser*) deserialize from a source
/// - int soap_write_ns3__T_USCOREUser(struct soap*, ns3__T_USCOREUser*) serialize to a sink
/// - ns3__T_USCOREUser* soap_dup_ns3__T_USCOREUser(struct soap*, ns3__T_USCOREUser* dst, ns3__T_USCOREUser *src) returns deep copy of ns3__T_USCOREUser src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_ns3__T_USCOREUser(ns3__T_USCOREUser*) deep deletes ns3__T_USCOREUser data members, use only on dst after soap_dup_ns3__T_USCOREUser(NULL, ns3__T_USCOREUser *dst, ns3__T_USCOREUser *src) (use soapcpp2 -Ed)
struct ns3__T_USCOREUser
{
/// <PRE><BLOCKQUOTE>
///   PrimaryKey
/// </BLOCKQUOTE></PRE>
/// Element "userID" of XSD type "http://base.blueant.axis.proventis.net/":id.
    ns3__id                              userID                         1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   the id of the person assigned to this user
/// </BLOCKQUOTE></PRE>
/// Element "personID" of XSD type "http://base.blueant.axis.proventis.net/":id.
    ns3__id                              personID                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   the username used to log in
/// </BLOCKQUOTE></PRE>
/// Element "username" of XSD type xs:string.
    char*                                username                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   list of permission group ID's assigned to this user
/// </BLOCKQUOTE></PRE>
/// Element "permissionGroups" of XSD type "http://base.blueant.axis.proventis.net/":T_IdList.
    struct ns3__T_USCOREIdList*          permissionGroups               1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   the lastname
/// </BLOCKQUOTE></PRE>
/// Element "lastname" of XSD type xs:string.
    char*                                lastname                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   the firstname
/// </BLOCKQUOTE></PRE>
/// Element "firstname" of XSD type xs:string.
    char*                                firstname                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   the personnumber
/// </BLOCKQUOTE></PRE>
/// Element "personalNumber" of XSD type xs:string.
    char*                                personalNumber                 1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   the email address
/// </BLOCKQUOTE></PRE>
/// Element "email" of XSD type xs:string.
    char*                                email                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   the type of license assigned to this user
/// </BLOCKQUOTE></PRE>
/// Element "licenseType" of XSD type "http://base.blueant.axis.proventis.net/":T_LicenseType.
    enum ns3__T_USCORELicenseType        licenseType                    1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   the state of the user
/// </BLOCKQUOTE></PRE>
/// Element "userState" of XSD type "http://base.blueant.axis.proventis.net/":T_UserState.
    enum ns3__T_USCOREUserState          userState                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   List of foreign keys
/// </BLOCKQUOTE></PRE>
/// Element "foreignKeyList" of XSD type "http://base.blueant.axis.proventis.net/":T_ForeignKeyList.
    struct ns3__T_USCOREForeignKeyList*  foreignKeyList                 nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
};

/// @brief "http://base.blueant.axis.proventis.net/":T_IdList is a complexType.
///
/// struct ns3__T_USCOREIdList operations:
/// - ns3__T_USCOREIdList* soap_new_ns3__T_USCOREIdList(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_ns3__T_USCOREIdList(struct soap*, ns3__T_USCOREIdList*) default initialize members
/// - int soap_read_ns3__T_USCOREIdList(struct soap*, ns3__T_USCOREIdList*) deserialize from a source
/// - int soap_write_ns3__T_USCOREIdList(struct soap*, ns3__T_USCOREIdList*) serialize to a sink
/// - ns3__T_USCOREIdList* soap_dup_ns3__T_USCOREIdList(struct soap*, ns3__T_USCOREIdList* dst, ns3__T_USCOREIdList *src) returns deep copy of ns3__T_USCOREIdList src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_ns3__T_USCOREIdList(ns3__T_USCOREIdList*) deep deletes ns3__T_USCOREIdList data members, use only on dst after soap_dup_ns3__T_USCOREIdList(NULL, ns3__T_USCOREIdList *dst, ns3__T_USCOREIdList *src) (use soapcpp2 -Ed)
struct ns3__T_USCOREIdList
{
/// Size of the dynamic array of ns3__id* is 0..unbounded.
   $int                                  __sizeID                       0;
/// Array ns3__id* of size 0..unbounded.
    ns3__id*                             ID_                            0;	///< Multiple elements.
};

/// @brief Top-level root element "http://base.blueant.axis.proventis.net/":session
/// @brief "http://base.blueant.axis.proventis.net/":session is a complexType.
///
/// struct _ns3__session operations:
/// - _ns3__session* soap_new__ns3__session(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns3__session(struct soap*, _ns3__session*) default initialize members
/// - int soap_read__ns3__session(struct soap*, _ns3__session*) deserialize from a source
/// - int soap_write__ns3__session(struct soap*, _ns3__session*) serialize to a sink
/// - _ns3__session* soap_dup__ns3__session(struct soap*, _ns3__session* dst, _ns3__session *src) returns deep copy of _ns3__session src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns3__session(_ns3__session*) deep deletes _ns3__session data members, use only on dst after soap_dup__ns3__session(NULL, _ns3__session *dst, _ns3__session *src) (use soapcpp2 -Ed)
struct _ns3__session
{
/// Element "sessionID" of XSD type xs:string.
    char*                                sessionID                      1;	///< Required element.
/// Element "personID" of XSD type xs:long.
    LONG64                               personID                       1;	///< Required element.
};

/// @brief Top-level root element "http://base.blueant.axis.proventis.net/":LoginRequestParameter
/// @brief "http://base.blueant.axis.proventis.net/":LoginRequestParameter is a complexType.
///
/// struct _ns3__LoginRequestParameter operations:
/// - _ns3__LoginRequestParameter* soap_new__ns3__LoginRequestParameter(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns3__LoginRequestParameter(struct soap*, _ns3__LoginRequestParameter*) default initialize members
/// - int soap_read__ns3__LoginRequestParameter(struct soap*, _ns3__LoginRequestParameter*) deserialize from a source
/// - int soap_write__ns3__LoginRequestParameter(struct soap*, _ns3__LoginRequestParameter*) serialize to a sink
/// - _ns3__LoginRequestParameter* soap_dup__ns3__LoginRequestParameter(struct soap*, _ns3__LoginRequestParameter* dst, _ns3__LoginRequestParameter *src) returns deep copy of _ns3__LoginRequestParameter src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns3__LoginRequestParameter(_ns3__LoginRequestParameter*) deep deletes _ns3__LoginRequestParameter data members, use only on dst after soap_dup__ns3__LoginRequestParameter(NULL, _ns3__LoginRequestParameter *dst, _ns3__LoginRequestParameter *src) (use soapcpp2 -Ed)
struct _ns3__LoginRequestParameter
{
/// Element "username" of XSD type xs:string.
    char*                                username                       1;	///< Required element.
/// Element "password" of XSD type xs:string.
    char*                                password                       1;	///< Required element.
};

/// @brief Top-level root element "http://base.blueant.axis.proventis.net/":LoginNoAuthRequestParameter
/// @brief "http://base.blueant.axis.proventis.net/":LoginNoAuthRequestParameter is a complexType.
///
/// struct _ns3__LoginNoAuthRequestParameter operations:
/// - _ns3__LoginNoAuthRequestParameter* soap_new__ns3__LoginNoAuthRequestParameter(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns3__LoginNoAuthRequestParameter(struct soap*, _ns3__LoginNoAuthRequestParameter*) default initialize members
/// - int soap_read__ns3__LoginNoAuthRequestParameter(struct soap*, _ns3__LoginNoAuthRequestParameter*) deserialize from a source
/// - int soap_write__ns3__LoginNoAuthRequestParameter(struct soap*, _ns3__LoginNoAuthRequestParameter*) serialize to a sink
/// - _ns3__LoginNoAuthRequestParameter* soap_dup__ns3__LoginNoAuthRequestParameter(struct soap*, _ns3__LoginNoAuthRequestParameter* dst, _ns3__LoginNoAuthRequestParameter *src) returns deep copy of _ns3__LoginNoAuthRequestParameter src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns3__LoginNoAuthRequestParameter(_ns3__LoginNoAuthRequestParameter*) deep deletes _ns3__LoginNoAuthRequestParameter data members, use only on dst after soap_dup__ns3__LoginNoAuthRequestParameter(NULL, _ns3__LoginNoAuthRequestParameter *dst, _ns3__LoginNoAuthRequestParameter *src) (use soapcpp2 -Ed)
struct _ns3__LoginNoAuthRequestParameter
{
/// Element "username" of XSD type xs:string.
    char*                                username                       1;	///< Required element.
};

/// @brief Top-level root element "http://base.blueant.axis.proventis.net/":LoginSAMLRequestParameter
/// @brief "http://base.blueant.axis.proventis.net/":LoginSAMLRequestParameter is a complexType.
///
/// struct _ns3__LoginSAMLRequestParameter operations:
/// - _ns3__LoginSAMLRequestParameter* soap_new__ns3__LoginSAMLRequestParameter(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns3__LoginSAMLRequestParameter(struct soap*, _ns3__LoginSAMLRequestParameter*) default initialize members
/// - int soap_read__ns3__LoginSAMLRequestParameter(struct soap*, _ns3__LoginSAMLRequestParameter*) deserialize from a source
/// - int soap_write__ns3__LoginSAMLRequestParameter(struct soap*, _ns3__LoginSAMLRequestParameter*) serialize to a sink
/// - _ns3__LoginSAMLRequestParameter* soap_dup__ns3__LoginSAMLRequestParameter(struct soap*, _ns3__LoginSAMLRequestParameter* dst, _ns3__LoginSAMLRequestParameter *src) returns deep copy of _ns3__LoginSAMLRequestParameter src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns3__LoginSAMLRequestParameter(_ns3__LoginSAMLRequestParameter*) deep deletes _ns3__LoginSAMLRequestParameter data members, use only on dst after soap_dup__ns3__LoginSAMLRequestParameter(NULL, _ns3__LoginSAMLRequestParameter *dst, _ns3__LoginSAMLRequestParameter *src) (use soapcpp2 -Ed)
struct _ns3__LoginSAMLRequestParameter
{
/// Element "SAMLartifact" of XSD type xs:string.
    char*                                SAMLartifact                   1;	///< Required element.
};

/// @brief Top-level root element "http://base.blueant.axis.proventis.net/":LoginImpersonateRequestParameter
/// @brief "http://base.blueant.axis.proventis.net/":LoginImpersonateRequestParameter is a complexType.
///
/// struct _ns3__LoginImpersonateRequestParameter operations:
/// - _ns3__LoginImpersonateRequestParameter* soap_new__ns3__LoginImpersonateRequestParameter(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns3__LoginImpersonateRequestParameter(struct soap*, _ns3__LoginImpersonateRequestParameter*) default initialize members
/// - int soap_read__ns3__LoginImpersonateRequestParameter(struct soap*, _ns3__LoginImpersonateRequestParameter*) deserialize from a source
/// - int soap_write__ns3__LoginImpersonateRequestParameter(struct soap*, _ns3__LoginImpersonateRequestParameter*) serialize to a sink
/// - _ns3__LoginImpersonateRequestParameter* soap_dup__ns3__LoginImpersonateRequestParameter(struct soap*, _ns3__LoginImpersonateRequestParameter* dst, _ns3__LoginImpersonateRequestParameter *src) returns deep copy of _ns3__LoginImpersonateRequestParameter src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns3__LoginImpersonateRequestParameter(_ns3__LoginImpersonateRequestParameter*) deep deletes _ns3__LoginImpersonateRequestParameter data members, use only on dst after soap_dup__ns3__LoginImpersonateRequestParameter(NULL, _ns3__LoginImpersonateRequestParameter *dst, _ns3__LoginImpersonateRequestParameter *src) (use soapcpp2 -Ed)
struct _ns3__LoginImpersonateRequestParameter
{
/// Element "username" of XSD type xs:string.
    char*                                username                       1;	///< Required element.
/// Element "password" of XSD type xs:string.
    char*                                password                       1;	///< Required element.
//  BEGIN CHOICE <xs:choice>
/// <PRE><BLOCKQUOTE>
///   exact on of the three elements ImpersonateUsername, ImpersonateUserID, ImpersonateForeignKey must be given
/// </BLOCKQUOTE></PRE>
   $int                                  __union_LoginImpersonateRequestParameter;	///< Union _ns3__union_LoginImpersonateRequestParameter selector: set to SOAP_UNION__ns3__union_LoginImpersonateRequestParameter_<fieldname>
    union _ns3__union_LoginImpersonateRequestParameter
    {
/// <PRE><BLOCKQUOTE>
///   username of the user to impersonate
/// </BLOCKQUOTE></PRE>
/// Element "ImpersonateUsername" of XSD type xs:string.
    char*                                ImpersonateUsername            nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   userID of the user to impersonate
/// </BLOCKQUOTE></PRE>
/// Element "ImpersonateUserID" of XSD type "http://base.blueant.axis.proventis.net/":id.
    ns3__id*                             ImpersonateUserID              nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   foreign key of the user to impersonate
/// </BLOCKQUOTE></PRE>
/// Element "ImpersonateForeignKey" of XSD type "http://base.blueant.axis.proventis.net/":T_ForeignKey.
    struct ns3__T_USCOREForeignKey*      ImpersonateForeignKey          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
    }                                    union_LoginImpersonateRequestParameter;
//  END OF CHOICE
};

/// @brief Top-level root element "http://base.blueant.axis.proventis.net/":LogoutRequestParameter
/// @brief "http://base.blueant.axis.proventis.net/":LogoutRequestParameter is a complexType.
///
/// struct _ns3__LogoutRequestParameter operations:
/// - _ns3__LogoutRequestParameter* soap_new__ns3__LogoutRequestParameter(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns3__LogoutRequestParameter(struct soap*, _ns3__LogoutRequestParameter*) default initialize members
/// - int soap_read__ns3__LogoutRequestParameter(struct soap*, _ns3__LogoutRequestParameter*) deserialize from a source
/// - int soap_write__ns3__LogoutRequestParameter(struct soap*, _ns3__LogoutRequestParameter*) serialize to a sink
/// - _ns3__LogoutRequestParameter* soap_dup__ns3__LogoutRequestParameter(struct soap*, _ns3__LogoutRequestParameter* dst, _ns3__LogoutRequestParameter *src) returns deep copy of _ns3__LogoutRequestParameter src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns3__LogoutRequestParameter(_ns3__LogoutRequestParameter*) deep deletes _ns3__LogoutRequestParameter data members, use only on dst after soap_dup__ns3__LogoutRequestParameter(NULL, _ns3__LogoutRequestParameter *dst, _ns3__LogoutRequestParameter *src) (use soapcpp2 -Ed)
struct _ns3__LogoutRequestParameter
{
/// Element "sessionID" of XSD type xs:string.
    char*                                sessionID                      1;	///< Required element.
};

/// @brief Top-level root element "http://base.blueant.axis.proventis.net/":createUserRequestParameter
/// @brief "http://base.blueant.axis.proventis.net/":createUserRequestParameter is a complexType.
///
/// struct _ns3__createUserRequestParameter operations:
/// - _ns3__createUserRequestParameter* soap_new__ns3__createUserRequestParameter(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns3__createUserRequestParameter(struct soap*, _ns3__createUserRequestParameter*) default initialize members
/// - int soap_read__ns3__createUserRequestParameter(struct soap*, _ns3__createUserRequestParameter*) deserialize from a source
/// - int soap_write__ns3__createUserRequestParameter(struct soap*, _ns3__createUserRequestParameter*) serialize to a sink
/// - _ns3__createUserRequestParameter* soap_dup__ns3__createUserRequestParameter(struct soap*, _ns3__createUserRequestParameter* dst, _ns3__createUserRequestParameter *src) returns deep copy of _ns3__createUserRequestParameter src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns3__createUserRequestParameter(_ns3__createUserRequestParameter*) deep deletes _ns3__createUserRequestParameter data members, use only on dst after soap_dup__ns3__createUserRequestParameter(NULL, _ns3__createUserRequestParameter *dst, _ns3__createUserRequestParameter *src) (use soapcpp2 -Ed)
struct _ns3__createUserRequestParameter
{
/// Element "sessionID" of XSD type xs:string.
    char*                                sessionID                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   id of the person associated with this user
/// </BLOCKQUOTE></PRE>
/// Element "personID" of XSD type "http://base.blueant.axis.proventis.net/":id.
    ns3__id                              personID                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   new username
/// </BLOCKQUOTE></PRE>
/// Element "username" of XSD type xs:string.
    char*                                username                       1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   password for this user - generated, if not given. Must not be given for LDAP-Accounts.
/// </BLOCKQUOTE></PRE>
/// Element "passwort" of XSD type xs:string.
    char*                                passwort                       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   list of permissiongroupID's assigned to this user -
///   default if not given. There is no default permission group for contacts.
///   see masterdata:getPermissionGroups
/// </BLOCKQUOTE></PRE>
/// Element "permissionGroups" of XSD type "http://base.blueant.axis.proventis.net/":T_IdList.
    struct ns3__T_USCOREIdList*          permissionGroups               nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   only valid for contacts - startdate of access - current day if not given
/// </BLOCKQUOTE></PRE>
/// Element "accessFrom" of XSD type xs:date.
    xsd__date                            accessFrom                     nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   only valid for contacts - enddate of access
/// </BLOCKQUOTE></PRE>
/// Element "accessTo" of XSD type xs:date.
    xsd__date                            accessTo                       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   the type of license to use for this user - named license if not given
/// </BLOCKQUOTE></PRE>
/// Element "licenseType" of XSD type "http://base.blueant.axis.proventis.net/":T_LicenseType.
    enum ns3__T_USCORELicenseType*       licenseType                    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   List of foreign keys
/// </BLOCKQUOTE></PRE>
/// Element "foreignKeyList" of XSD type "http://base.blueant.axis.proventis.net/":T_ForeignKeyList.
    struct ns3__T_USCOREForeignKeyList*  foreignKeyList                 nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
};

/// @brief Top-level root element "http://base.blueant.axis.proventis.net/":searchUserRequestParameter
/// @brief "http://base.blueant.axis.proventis.net/":searchUserRequestParameter is a complexType.
///
/// struct _ns3__searchUserRequestParameter operations:
/// - _ns3__searchUserRequestParameter* soap_new__ns3__searchUserRequestParameter(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns3__searchUserRequestParameter(struct soap*, _ns3__searchUserRequestParameter*) default initialize members
/// - int soap_read__ns3__searchUserRequestParameter(struct soap*, _ns3__searchUserRequestParameter*) deserialize from a source
/// - int soap_write__ns3__searchUserRequestParameter(struct soap*, _ns3__searchUserRequestParameter*) serialize to a sink
/// - _ns3__searchUserRequestParameter* soap_dup__ns3__searchUserRequestParameter(struct soap*, _ns3__searchUserRequestParameter* dst, _ns3__searchUserRequestParameter *src) returns deep copy of _ns3__searchUserRequestParameter src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns3__searchUserRequestParameter(_ns3__searchUserRequestParameter*) deep deletes _ns3__searchUserRequestParameter data members, use only on dst after soap_dup__ns3__searchUserRequestParameter(NULL, _ns3__searchUserRequestParameter *dst, _ns3__searchUserRequestParameter *src) (use soapcpp2 -Ed)
struct _ns3__searchUserRequestParameter
{
/// Element "sessionID" of XSD type xs:string.
    char*                                sessionID                      1;	///< Required element.
/// <PRE><BLOCKQUOTE>
///   user name to search for
/// </BLOCKQUOTE></PRE>
/// Element "username" of XSD type xs:string.
    char*                                username                       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   email address to search for
/// </BLOCKQUOTE></PRE>
/// Element "email" of XSD type xs:string.
    char*                                email                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   person ID to search for
/// </BLOCKQUOTE></PRE>
/// Element "personID" of XSD type "http://base.blueant.axis.proventis.net/":id.
    ns3__id*                             personID                       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   permission group to search for
/// </BLOCKQUOTE></PRE>
/// Element "permissionGroupID" of XSD type "http://base.blueant.axis.proventis.net/":id.
    ns3__id*                             permissionGroupID              nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   firstname to search for
/// </BLOCKQUOTE></PRE>
/// Element "firstname" of XSD type xs:string.
    char*                                firstname                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   lastname to search for
/// </BLOCKQUOTE></PRE>
/// Element "lastname" of XSD type xs:string.
    char*                                lastname                       nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   the personnumber to search for
/// </BLOCKQUOTE></PRE>
/// Element "personalNumber" of XSD type xs:string.
    char*                                personalNumber                 nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   the type of license assigned to this user
/// </BLOCKQUOTE></PRE>
/// Element "licenseType" of XSD type "http://base.blueant.axis.proventis.net/":T_LicenseType.
    enum ns3__T_USCORELicenseType*       licenseType                    nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   the state of the user
/// </BLOCKQUOTE></PRE>
/// Element "userState" of XSD type "http://base.blueant.axis.proventis.net/":T_UserState.
    enum ns3__T_USCOREUserState*         userState                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// <PRE><BLOCKQUOTE>
///   foreign keys
/// </BLOCKQUOTE></PRE>
/// Element "foreignKey" of XSD type "http://base.blueant.axis.proventis.net/":T_ForeignKey.
    struct ns3__T_USCOREForeignKey*      foreignKey                     nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
};

/// @brief Top-level root element "http://base.blueant.axis.proventis.net/":deleteUserRequestParameter
/// @brief "http://base.blueant.axis.proventis.net/":deleteUserRequestParameter is a complexType.
///
/// struct _ns3__deleteUserRequestParameter operations:
/// - _ns3__deleteUserRequestParameter* soap_new__ns3__deleteUserRequestParameter(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns3__deleteUserRequestParameter(struct soap*, _ns3__deleteUserRequestParameter*) default initialize members
/// - int soap_read__ns3__deleteUserRequestParameter(struct soap*, _ns3__deleteUserRequestParameter*) deserialize from a source
/// - int soap_write__ns3__deleteUserRequestParameter(struct soap*, _ns3__deleteUserRequestParameter*) serialize to a sink
/// - _ns3__deleteUserRequestParameter* soap_dup__ns3__deleteUserRequestParameter(struct soap*, _ns3__deleteUserRequestParameter* dst, _ns3__deleteUserRequestParameter *src) returns deep copy of _ns3__deleteUserRequestParameter src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns3__deleteUserRequestParameter(_ns3__deleteUserRequestParameter*) deep deletes _ns3__deleteUserRequestParameter data members, use only on dst after soap_dup__ns3__deleteUserRequestParameter(NULL, _ns3__deleteUserRequestParameter *dst, _ns3__deleteUserRequestParameter *src) (use soapcpp2 -Ed)
struct _ns3__deleteUserRequestParameter
{
/// Element "sessionID" of XSD type xs:string.
    char*                                sessionID                      1;	///< Required element.
/// Element "user" of XSD type "http://base.blueant.axis.proventis.net/":UserIDInfo.
    struct ns3__UserIDInfo*              user                           1;	///< Required element.
};

/// @brief Top-level root element "http://base.blueant.axis.proventis.net/":UserList
/// @brief "http://base.blueant.axis.proventis.net/":UserList is a complexType.
///
/// struct _ns3__UserList operations:
/// - _ns3__UserList* soap_new__ns3__UserList(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns3__UserList(struct soap*, _ns3__UserList*) default initialize members
/// - int soap_read__ns3__UserList(struct soap*, _ns3__UserList*) deserialize from a source
/// - int soap_write__ns3__UserList(struct soap*, _ns3__UserList*) serialize to a sink
/// - _ns3__UserList* soap_dup__ns3__UserList(struct soap*, _ns3__UserList* dst, _ns3__UserList *src) returns deep copy of _ns3__UserList src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns3__UserList(_ns3__UserList*) deep deletes _ns3__UserList data members, use only on dst after soap_dup__ns3__UserList(NULL, _ns3__UserList *dst, _ns3__UserList *src) (use soapcpp2 -Ed)
struct _ns3__UserList
{
/// Size of the dynamic array of struct ns3__T_USCOREUser* is 0..unbounded.
   $int                                  __sizeUser                     0;
/// Array struct ns3__T_USCOREUser* of size 0..unbounded.
    struct ns3__T_USCOREUser*            User_                          0;	///< Multiple elements.
};

/// @brief "http://exception.blueant.axis.proventis.net/":UserManagementException is a complexType with complexContent extension of XSD type "http://exception.blueant.axis.proventis.net/":GeneralWebserviceException.
///
/// struct ns2__UserManagementException operations:
/// - ns2__UserManagementException* soap_new_ns2__UserManagementException(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_ns2__UserManagementException(struct soap*, ns2__UserManagementException*) default initialize members
/// - int soap_read_ns2__UserManagementException(struct soap*, ns2__UserManagementException*) deserialize from a source
/// - int soap_write_ns2__UserManagementException(struct soap*, ns2__UserManagementException*) serialize to a sink
/// - ns2__UserManagementException* soap_dup_ns2__UserManagementException(struct soap*, ns2__UserManagementException* dst, ns2__UserManagementException *src) returns deep copy of ns2__UserManagementException src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_ns2__UserManagementException(ns2__UserManagementException*) deep deletes ns2__UserManagementException data members, use only on dst after soap_dup_ns2__UserManagementException(NULL, ns2__UserManagementException *dst, ns2__UserManagementException *src) (use soapcpp2 -Ed)
struct ns2__UserManagementException
{
/// INHERITED FROM ns2__GeneralWebserviceException:
/// Element "cause" of XSD type xs:anyType.
    _XML                                 cause                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "message" of XSD type xs:string.
    char*                                message                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
//  END OF INHERITED FROM ns2__GeneralWebserviceException
};

/// @brief Top-level root element "http://exception.blueant.axis.proventis.net/":WeekFinishedException
/// @brief "http://exception.blueant.axis.proventis.net/":WeekFinishedException is a complexType with complexContent extension of XSD type "http://exception.blueant.axis.proventis.net/":GeneralWebserviceException.
///
/// struct _ns2__WeekFinishedException operations:
/// - _ns2__WeekFinishedException* soap_new__ns2__WeekFinishedException(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns2__WeekFinishedException(struct soap*, _ns2__WeekFinishedException*) default initialize members
/// - int soap_read__ns2__WeekFinishedException(struct soap*, _ns2__WeekFinishedException*) deserialize from a source
/// - int soap_write__ns2__WeekFinishedException(struct soap*, _ns2__WeekFinishedException*) serialize to a sink
/// - _ns2__WeekFinishedException* soap_dup__ns2__WeekFinishedException(struct soap*, _ns2__WeekFinishedException* dst, _ns2__WeekFinishedException *src) returns deep copy of _ns2__WeekFinishedException src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns2__WeekFinishedException(_ns2__WeekFinishedException*) deep deletes _ns2__WeekFinishedException data members, use only on dst after soap_dup__ns2__WeekFinishedException(NULL, _ns2__WeekFinishedException *dst, _ns2__WeekFinishedException *src) (use soapcpp2 -Ed)
struct _ns2__WeekFinishedException
{
/// INHERITED FROM ns2__GeneralWebserviceException:
/// Element "cause" of XSD type xs:anyType.
    _XML                                 cause                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "message" of XSD type xs:string.
    char*                                message                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
//  END OF INHERITED FROM ns2__GeneralWebserviceException
};

/// @brief Top-level root element "http://exception.blueant.axis.proventis.net/":InvalidParameterException
/// @brief "http://exception.blueant.axis.proventis.net/":InvalidParameterException is a complexType with complexContent extension of XSD type "http://exception.blueant.axis.proventis.net/":GeneralWebserviceException.
///
/// struct _ns2__InvalidParameterException operations:
/// - _ns2__InvalidParameterException* soap_new__ns2__InvalidParameterException(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns2__InvalidParameterException(struct soap*, _ns2__InvalidParameterException*) default initialize members
/// - int soap_read__ns2__InvalidParameterException(struct soap*, _ns2__InvalidParameterException*) deserialize from a source
/// - int soap_write__ns2__InvalidParameterException(struct soap*, _ns2__InvalidParameterException*) serialize to a sink
/// - _ns2__InvalidParameterException* soap_dup__ns2__InvalidParameterException(struct soap*, _ns2__InvalidParameterException* dst, _ns2__InvalidParameterException *src) returns deep copy of _ns2__InvalidParameterException src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns2__InvalidParameterException(_ns2__InvalidParameterException*) deep deletes _ns2__InvalidParameterException data members, use only on dst after soap_dup__ns2__InvalidParameterException(NULL, _ns2__InvalidParameterException *dst, _ns2__InvalidParameterException *src) (use soapcpp2 -Ed)
struct _ns2__InvalidParameterException
{
/// INHERITED FROM ns2__GeneralWebserviceException:
/// Element "cause" of XSD type xs:anyType.
    _XML                                 cause                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "message" of XSD type xs:string.
    char*                                message                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
//  END OF INHERITED FROM ns2__GeneralWebserviceException
};

/// @brief Top-level root element "http://exception.blueant.axis.proventis.net/":AssertionException
/// @brief "http://exception.blueant.axis.proventis.net/":AssertionException is a complexType with complexContent extension of XSD type "http://exception.blueant.axis.proventis.net/":GeneralWebserviceException.
///
/// struct _ns2__AssertionException operations:
/// - _ns2__AssertionException* soap_new__ns2__AssertionException(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns2__AssertionException(struct soap*, _ns2__AssertionException*) default initialize members
/// - int soap_read__ns2__AssertionException(struct soap*, _ns2__AssertionException*) deserialize from a source
/// - int soap_write__ns2__AssertionException(struct soap*, _ns2__AssertionException*) serialize to a sink
/// - _ns2__AssertionException* soap_dup__ns2__AssertionException(struct soap*, _ns2__AssertionException* dst, _ns2__AssertionException *src) returns deep copy of _ns2__AssertionException src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns2__AssertionException(_ns2__AssertionException*) deep deletes _ns2__AssertionException data members, use only on dst after soap_dup__ns2__AssertionException(NULL, _ns2__AssertionException *dst, _ns2__AssertionException *src) (use soapcpp2 -Ed)
struct _ns2__AssertionException
{
/// INHERITED FROM ns2__GeneralWebserviceException:
/// Element "cause" of XSD type xs:anyType.
    _XML                                 cause                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "message" of XSD type xs:string.
    char*                                message                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
//  END OF INHERITED FROM ns2__GeneralWebserviceException
};

/// @brief Top-level root element "http://exception.blueant.axis.proventis.net/":GeneralWebserviceException
/// @brief "http://exception.blueant.axis.proventis.net/":GeneralWebserviceException is a complexType with complexContent extension of XSD type "http://exception.blueant.axis.proventis.net/":GeneralWebserviceException.
///
/// struct _ns2__GeneralWebserviceException operations:
/// - _ns2__GeneralWebserviceException* soap_new__ns2__GeneralWebserviceException(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns2__GeneralWebserviceException(struct soap*, _ns2__GeneralWebserviceException*) default initialize members
/// - int soap_read__ns2__GeneralWebserviceException(struct soap*, _ns2__GeneralWebserviceException*) deserialize from a source
/// - int soap_write__ns2__GeneralWebserviceException(struct soap*, _ns2__GeneralWebserviceException*) serialize to a sink
/// - _ns2__GeneralWebserviceException* soap_dup__ns2__GeneralWebserviceException(struct soap*, _ns2__GeneralWebserviceException* dst, _ns2__GeneralWebserviceException *src) returns deep copy of _ns2__GeneralWebserviceException src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns2__GeneralWebserviceException(_ns2__GeneralWebserviceException*) deep deletes _ns2__GeneralWebserviceException data members, use only on dst after soap_dup__ns2__GeneralWebserviceException(NULL, _ns2__GeneralWebserviceException *dst, _ns2__GeneralWebserviceException *src) (use soapcpp2 -Ed)
struct _ns2__GeneralWebserviceException
{
/// INHERITED FROM ns2__GeneralWebserviceException:
/// Element "cause" of XSD type xs:anyType.
    _XML                                 cause                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "message" of XSD type xs:string.
    char*                                message                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
//  END OF INHERITED FROM ns2__GeneralWebserviceException
};

/// @brief "http://exception.blueant.axis.proventis.net/":InvalidLicenseException is a complexType with complexContent extension of XSD type "http://exception.blueant.axis.proventis.net/":UserManagementException.
///
/// struct ns2__InvalidLicenseException operations:
/// - ns2__InvalidLicenseException* soap_new_ns2__InvalidLicenseException(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default_ns2__InvalidLicenseException(struct soap*, ns2__InvalidLicenseException*) default initialize members
/// - int soap_read_ns2__InvalidLicenseException(struct soap*, ns2__InvalidLicenseException*) deserialize from a source
/// - int soap_write_ns2__InvalidLicenseException(struct soap*, ns2__InvalidLicenseException*) serialize to a sink
/// - ns2__InvalidLicenseException* soap_dup_ns2__InvalidLicenseException(struct soap*, ns2__InvalidLicenseException* dst, ns2__InvalidLicenseException *src) returns deep copy of ns2__InvalidLicenseException src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_ns2__InvalidLicenseException(ns2__InvalidLicenseException*) deep deletes ns2__InvalidLicenseException data members, use only on dst after soap_dup_ns2__InvalidLicenseException(NULL, ns2__InvalidLicenseException *dst, ns2__InvalidLicenseException *src) (use soapcpp2 -Ed)
struct ns2__InvalidLicenseException
{
/// INHERITED FROM ns2__GeneralWebserviceException:
/// Element "cause" of XSD type xs:anyType.
    _XML                                 cause                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "message" of XSD type xs:string.
    char*                                message                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
//  END OF INHERITED FROM ns2__GeneralWebserviceException
/// INHERITED FROM ns2__UserManagementException:
//  END OF INHERITED FROM ns2__UserManagementException
};

/// @brief Top-level root element "http://exception.blueant.axis.proventis.net/":InvalidSessionException
/// @brief "http://exception.blueant.axis.proventis.net/":InvalidSessionException is a complexType with complexContent extension of XSD type "http://exception.blueant.axis.proventis.net/":UserManagementException.
///
/// struct _ns2__InvalidSessionException operations:
/// - _ns2__InvalidSessionException* soap_new__ns2__InvalidSessionException(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns2__InvalidSessionException(struct soap*, _ns2__InvalidSessionException*) default initialize members
/// - int soap_read__ns2__InvalidSessionException(struct soap*, _ns2__InvalidSessionException*) deserialize from a source
/// - int soap_write__ns2__InvalidSessionException(struct soap*, _ns2__InvalidSessionException*) serialize to a sink
/// - _ns2__InvalidSessionException* soap_dup__ns2__InvalidSessionException(struct soap*, _ns2__InvalidSessionException* dst, _ns2__InvalidSessionException *src) returns deep copy of _ns2__InvalidSessionException src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns2__InvalidSessionException(_ns2__InvalidSessionException*) deep deletes _ns2__InvalidSessionException data members, use only on dst after soap_dup__ns2__InvalidSessionException(NULL, _ns2__InvalidSessionException *dst, _ns2__InvalidSessionException *src) (use soapcpp2 -Ed)
struct _ns2__InvalidSessionException
{
/// INHERITED FROM ns2__GeneralWebserviceException:
/// Element "cause" of XSD type xs:anyType.
    _XML                                 cause                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "message" of XSD type xs:string.
    char*                                message                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
//  END OF INHERITED FROM ns2__GeneralWebserviceException
/// INHERITED FROM ns2__UserManagementException:
//  END OF INHERITED FROM ns2__UserManagementException
};

/// @brief Top-level root element "http://exception.blueant.axis.proventis.net/":InvalidClientException
/// @brief "http://exception.blueant.axis.proventis.net/":InvalidClientException is a complexType with complexContent extension of XSD type "http://exception.blueant.axis.proventis.net/":UserManagementException.
///
/// struct _ns2__InvalidClientException operations:
/// - _ns2__InvalidClientException* soap_new__ns2__InvalidClientException(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns2__InvalidClientException(struct soap*, _ns2__InvalidClientException*) default initialize members
/// - int soap_read__ns2__InvalidClientException(struct soap*, _ns2__InvalidClientException*) deserialize from a source
/// - int soap_write__ns2__InvalidClientException(struct soap*, _ns2__InvalidClientException*) serialize to a sink
/// - _ns2__InvalidClientException* soap_dup__ns2__InvalidClientException(struct soap*, _ns2__InvalidClientException* dst, _ns2__InvalidClientException *src) returns deep copy of _ns2__InvalidClientException src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns2__InvalidClientException(_ns2__InvalidClientException*) deep deletes _ns2__InvalidClientException data members, use only on dst after soap_dup__ns2__InvalidClientException(NULL, _ns2__InvalidClientException *dst, _ns2__InvalidClientException *src) (use soapcpp2 -Ed)
struct _ns2__InvalidClientException
{
/// INHERITED FROM ns2__GeneralWebserviceException:
/// Element "cause" of XSD type xs:anyType.
    _XML                                 cause                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "message" of XSD type xs:string.
    char*                                message                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
//  END OF INHERITED FROM ns2__GeneralWebserviceException
/// INHERITED FROM ns2__UserManagementException:
//  END OF INHERITED FROM ns2__UserManagementException
};

/// @brief Top-level root element "http://exception.blueant.axis.proventis.net/":PermissionDeniedException
/// @brief "http://exception.blueant.axis.proventis.net/":PermissionDeniedException is a complexType with complexContent extension of XSD type "http://exception.blueant.axis.proventis.net/":UserManagementException.
///
/// struct _ns2__PermissionDeniedException operations:
/// - _ns2__PermissionDeniedException* soap_new__ns2__PermissionDeniedException(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns2__PermissionDeniedException(struct soap*, _ns2__PermissionDeniedException*) default initialize members
/// - int soap_read__ns2__PermissionDeniedException(struct soap*, _ns2__PermissionDeniedException*) deserialize from a source
/// - int soap_write__ns2__PermissionDeniedException(struct soap*, _ns2__PermissionDeniedException*) serialize to a sink
/// - _ns2__PermissionDeniedException* soap_dup__ns2__PermissionDeniedException(struct soap*, _ns2__PermissionDeniedException* dst, _ns2__PermissionDeniedException *src) returns deep copy of _ns2__PermissionDeniedException src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns2__PermissionDeniedException(_ns2__PermissionDeniedException*) deep deletes _ns2__PermissionDeniedException data members, use only on dst after soap_dup__ns2__PermissionDeniedException(NULL, _ns2__PermissionDeniedException *dst, _ns2__PermissionDeniedException *src) (use soapcpp2 -Ed)
struct _ns2__PermissionDeniedException
{
/// INHERITED FROM ns2__GeneralWebserviceException:
/// Element "cause" of XSD type xs:anyType.
    _XML                                 cause                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "message" of XSD type xs:string.
    char*                                message                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
//  END OF INHERITED FROM ns2__GeneralWebserviceException
/// INHERITED FROM ns2__UserManagementException:
//  END OF INHERITED FROM ns2__UserManagementException
};

/// @brief Top-level root element "http://exception.blueant.axis.proventis.net/":InvalidUsernamePasswordCombinationException
/// @brief "http://exception.blueant.axis.proventis.net/":InvalidUsernamePasswordCombinationException is a complexType with complexContent extension of XSD type "http://exception.blueant.axis.proventis.net/":UserManagementException.
///
/// struct _ns2__InvalidUsernamePasswordCombinationException operations:
/// - _ns2__InvalidUsernamePasswordCombinationException* soap_new__ns2__InvalidUsernamePasswordCombinationException(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns2__InvalidUsernamePasswordCombinationException(struct soap*, _ns2__InvalidUsernamePasswordCombinationException*) default initialize members
/// - int soap_read__ns2__InvalidUsernamePasswordCombinationException(struct soap*, _ns2__InvalidUsernamePasswordCombinationException*) deserialize from a source
/// - int soap_write__ns2__InvalidUsernamePasswordCombinationException(struct soap*, _ns2__InvalidUsernamePasswordCombinationException*) serialize to a sink
/// - _ns2__InvalidUsernamePasswordCombinationException* soap_dup__ns2__InvalidUsernamePasswordCombinationException(struct soap*, _ns2__InvalidUsernamePasswordCombinationException* dst, _ns2__InvalidUsernamePasswordCombinationException *src) returns deep copy of _ns2__InvalidUsernamePasswordCombinationException src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns2__InvalidUsernamePasswordCombinationException(_ns2__InvalidUsernamePasswordCombinationException*) deep deletes _ns2__InvalidUsernamePasswordCombinationException data members, use only on dst after soap_dup__ns2__InvalidUsernamePasswordCombinationException(NULL, _ns2__InvalidUsernamePasswordCombinationException *dst, _ns2__InvalidUsernamePasswordCombinationException *src) (use soapcpp2 -Ed)
struct _ns2__InvalidUsernamePasswordCombinationException
{
/// INHERITED FROM ns2__GeneralWebserviceException:
/// Element "cause" of XSD type xs:anyType.
    _XML                                 cause                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "message" of XSD type xs:string.
    char*                                message                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
//  END OF INHERITED FROM ns2__GeneralWebserviceException
/// INHERITED FROM ns2__UserManagementException:
//  END OF INHERITED FROM ns2__UserManagementException
};

/// @brief Top-level root element "http://exception.blueant.axis.proventis.net/":InvalidUsernameException
/// @brief "http://exception.blueant.axis.proventis.net/":InvalidUsernameException is a complexType with complexContent extension of XSD type "http://exception.blueant.axis.proventis.net/":UserManagementException.
///
/// struct _ns2__InvalidUsernameException operations:
/// - _ns2__InvalidUsernameException* soap_new__ns2__InvalidUsernameException(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns2__InvalidUsernameException(struct soap*, _ns2__InvalidUsernameException*) default initialize members
/// - int soap_read__ns2__InvalidUsernameException(struct soap*, _ns2__InvalidUsernameException*) deserialize from a source
/// - int soap_write__ns2__InvalidUsernameException(struct soap*, _ns2__InvalidUsernameException*) serialize to a sink
/// - _ns2__InvalidUsernameException* soap_dup__ns2__InvalidUsernameException(struct soap*, _ns2__InvalidUsernameException* dst, _ns2__InvalidUsernameException *src) returns deep copy of _ns2__InvalidUsernameException src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns2__InvalidUsernameException(_ns2__InvalidUsernameException*) deep deletes _ns2__InvalidUsernameException data members, use only on dst after soap_dup__ns2__InvalidUsernameException(NULL, _ns2__InvalidUsernameException *dst, _ns2__InvalidUsernameException *src) (use soapcpp2 -Ed)
struct _ns2__InvalidUsernameException
{
/// INHERITED FROM ns2__GeneralWebserviceException:
/// Element "cause" of XSD type xs:anyType.
    _XML                                 cause                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "message" of XSD type xs:string.
    char*                                message                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
//  END OF INHERITED FROM ns2__GeneralWebserviceException
/// INHERITED FROM ns2__UserManagementException:
//  END OF INHERITED FROM ns2__UserManagementException
};

/// @brief Top-level root element "http://exception.blueant.axis.proventis.net/":InvalidDatesException
/// @brief "http://exception.blueant.axis.proventis.net/":InvalidDatesException is a complexType with complexContent extension of XSD type "http://exception.blueant.axis.proventis.net/":UserManagementException.
///
/// struct _ns2__InvalidDatesException operations:
/// - _ns2__InvalidDatesException* soap_new__ns2__InvalidDatesException(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns2__InvalidDatesException(struct soap*, _ns2__InvalidDatesException*) default initialize members
/// - int soap_read__ns2__InvalidDatesException(struct soap*, _ns2__InvalidDatesException*) deserialize from a source
/// - int soap_write__ns2__InvalidDatesException(struct soap*, _ns2__InvalidDatesException*) serialize to a sink
/// - _ns2__InvalidDatesException* soap_dup__ns2__InvalidDatesException(struct soap*, _ns2__InvalidDatesException* dst, _ns2__InvalidDatesException *src) returns deep copy of _ns2__InvalidDatesException src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns2__InvalidDatesException(_ns2__InvalidDatesException*) deep deletes _ns2__InvalidDatesException data members, use only on dst after soap_dup__ns2__InvalidDatesException(NULL, _ns2__InvalidDatesException *dst, _ns2__InvalidDatesException *src) (use soapcpp2 -Ed)
struct _ns2__InvalidDatesException
{
/// INHERITED FROM ns2__GeneralWebserviceException:
/// Element "cause" of XSD type xs:anyType.
    _XML                                 cause                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "message" of XSD type xs:string.
    char*                                message                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
//  END OF INHERITED FROM ns2__GeneralWebserviceException
/// INHERITED FROM ns2__UserManagementException:
//  END OF INHERITED FROM ns2__UserManagementException
};

/// @brief Top-level root element "http://exception.blueant.axis.proventis.net/":ServerMaintenanceException
/// @brief "http://exception.blueant.axis.proventis.net/":ServerMaintenanceException is a complexType with complexContent extension of XSD type "http://exception.blueant.axis.proventis.net/":UserManagementException.
///
/// struct _ns2__ServerMaintenanceException operations:
/// - _ns2__ServerMaintenanceException* soap_new__ns2__ServerMaintenanceException(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns2__ServerMaintenanceException(struct soap*, _ns2__ServerMaintenanceException*) default initialize members
/// - int soap_read__ns2__ServerMaintenanceException(struct soap*, _ns2__ServerMaintenanceException*) deserialize from a source
/// - int soap_write__ns2__ServerMaintenanceException(struct soap*, _ns2__ServerMaintenanceException*) serialize to a sink
/// - _ns2__ServerMaintenanceException* soap_dup__ns2__ServerMaintenanceException(struct soap*, _ns2__ServerMaintenanceException* dst, _ns2__ServerMaintenanceException *src) returns deep copy of _ns2__ServerMaintenanceException src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns2__ServerMaintenanceException(_ns2__ServerMaintenanceException*) deep deletes _ns2__ServerMaintenanceException data members, use only on dst after soap_dup__ns2__ServerMaintenanceException(NULL, _ns2__ServerMaintenanceException *dst, _ns2__ServerMaintenanceException *src) (use soapcpp2 -Ed)
struct _ns2__ServerMaintenanceException
{
/// INHERITED FROM ns2__GeneralWebserviceException:
/// Element "cause" of XSD type xs:anyType.
    _XML                                 cause                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "message" of XSD type xs:string.
    char*                                message                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
//  END OF INHERITED FROM ns2__GeneralWebserviceException
/// INHERITED FROM ns2__UserManagementException:
//  END OF INHERITED FROM ns2__UserManagementException
};

/// @brief Top-level root element "http://exception.blueant.axis.proventis.net/":ImpersonatedUserNotFoundException
/// @brief "http://exception.blueant.axis.proventis.net/":ImpersonatedUserNotFoundException is a complexType with complexContent extension of XSD type "http://exception.blueant.axis.proventis.net/":UserManagementException.
///
/// struct _ns2__ImpersonatedUserNotFoundException operations:
/// - _ns2__ImpersonatedUserNotFoundException* soap_new__ns2__ImpersonatedUserNotFoundException(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns2__ImpersonatedUserNotFoundException(struct soap*, _ns2__ImpersonatedUserNotFoundException*) default initialize members
/// - int soap_read__ns2__ImpersonatedUserNotFoundException(struct soap*, _ns2__ImpersonatedUserNotFoundException*) deserialize from a source
/// - int soap_write__ns2__ImpersonatedUserNotFoundException(struct soap*, _ns2__ImpersonatedUserNotFoundException*) serialize to a sink
/// - _ns2__ImpersonatedUserNotFoundException* soap_dup__ns2__ImpersonatedUserNotFoundException(struct soap*, _ns2__ImpersonatedUserNotFoundException* dst, _ns2__ImpersonatedUserNotFoundException *src) returns deep copy of _ns2__ImpersonatedUserNotFoundException src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns2__ImpersonatedUserNotFoundException(_ns2__ImpersonatedUserNotFoundException*) deep deletes _ns2__ImpersonatedUserNotFoundException data members, use only on dst after soap_dup__ns2__ImpersonatedUserNotFoundException(NULL, _ns2__ImpersonatedUserNotFoundException *dst, _ns2__ImpersonatedUserNotFoundException *src) (use soapcpp2 -Ed)
struct _ns2__ImpersonatedUserNotFoundException
{
/// INHERITED FROM ns2__GeneralWebserviceException:
/// Element "cause" of XSD type xs:anyType.
    _XML                                 cause                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "message" of XSD type xs:string.
    char*                                message                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
//  END OF INHERITED FROM ns2__GeneralWebserviceException
/// INHERITED FROM ns2__UserManagementException:
//  END OF INHERITED FROM ns2__UserManagementException
};

/// @brief Top-level root element "http://exception.blueant.axis.proventis.net/":InvalidNrOfImpersonationsException
/// @brief "http://exception.blueant.axis.proventis.net/":InvalidNrOfImpersonationsException is a complexType with complexContent extension of XSD type "http://exception.blueant.axis.proventis.net/":UserManagementException.
///
/// struct _ns2__InvalidNrOfImpersonationsException operations:
/// - _ns2__InvalidNrOfImpersonationsException* soap_new__ns2__InvalidNrOfImpersonationsException(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns2__InvalidNrOfImpersonationsException(struct soap*, _ns2__InvalidNrOfImpersonationsException*) default initialize members
/// - int soap_read__ns2__InvalidNrOfImpersonationsException(struct soap*, _ns2__InvalidNrOfImpersonationsException*) deserialize from a source
/// - int soap_write__ns2__InvalidNrOfImpersonationsException(struct soap*, _ns2__InvalidNrOfImpersonationsException*) serialize to a sink
/// - _ns2__InvalidNrOfImpersonationsException* soap_dup__ns2__InvalidNrOfImpersonationsException(struct soap*, _ns2__InvalidNrOfImpersonationsException* dst, _ns2__InvalidNrOfImpersonationsException *src) returns deep copy of _ns2__InvalidNrOfImpersonationsException src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns2__InvalidNrOfImpersonationsException(_ns2__InvalidNrOfImpersonationsException*) deep deletes _ns2__InvalidNrOfImpersonationsException data members, use only on dst after soap_dup__ns2__InvalidNrOfImpersonationsException(NULL, _ns2__InvalidNrOfImpersonationsException *dst, _ns2__InvalidNrOfImpersonationsException *src) (use soapcpp2 -Ed)
struct _ns2__InvalidNrOfImpersonationsException
{
/// INHERITED FROM ns2__GeneralWebserviceException:
/// Element "cause" of XSD type xs:anyType.
    _XML                                 cause                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "message" of XSD type xs:string.
    char*                                message                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
//  END OF INHERITED FROM ns2__GeneralWebserviceException
/// INHERITED FROM ns2__UserManagementException:
//  END OF INHERITED FROM ns2__UserManagementException
};

/// @brief Top-level root element "http://exception.blueant.axis.proventis.net/":InvalidNamedLicenseException
/// @brief "http://exception.blueant.axis.proventis.net/":InvalidNamedLicenseException is a complexType with complexContent extension of XSD type "http://exception.blueant.axis.proventis.net/":InvalidLicenseException.
///
/// struct _ns2__InvalidNamedLicenseException operations:
/// - _ns2__InvalidNamedLicenseException* soap_new__ns2__InvalidNamedLicenseException(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns2__InvalidNamedLicenseException(struct soap*, _ns2__InvalidNamedLicenseException*) default initialize members
/// - int soap_read__ns2__InvalidNamedLicenseException(struct soap*, _ns2__InvalidNamedLicenseException*) deserialize from a source
/// - int soap_write__ns2__InvalidNamedLicenseException(struct soap*, _ns2__InvalidNamedLicenseException*) serialize to a sink
/// - _ns2__InvalidNamedLicenseException* soap_dup__ns2__InvalidNamedLicenseException(struct soap*, _ns2__InvalidNamedLicenseException* dst, _ns2__InvalidNamedLicenseException *src) returns deep copy of _ns2__InvalidNamedLicenseException src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns2__InvalidNamedLicenseException(_ns2__InvalidNamedLicenseException*) deep deletes _ns2__InvalidNamedLicenseException data members, use only on dst after soap_dup__ns2__InvalidNamedLicenseException(NULL, _ns2__InvalidNamedLicenseException *dst, _ns2__InvalidNamedLicenseException *src) (use soapcpp2 -Ed)
struct _ns2__InvalidNamedLicenseException
{
/// INHERITED FROM ns2__GeneralWebserviceException:
/// Element "cause" of XSD type xs:anyType.
    _XML                                 cause                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "message" of XSD type xs:string.
    char*                                message                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
//  END OF INHERITED FROM ns2__GeneralWebserviceException
/// INHERITED FROM ns2__UserManagementException:
//  END OF INHERITED FROM ns2__UserManagementException
/// INHERITED FROM ns2__InvalidLicenseException:
//  END OF INHERITED FROM ns2__InvalidLicenseException
};

/// @brief Top-level root element "http://exception.blueant.axis.proventis.net/":InvalidConcurrentLicenseException
/// @brief "http://exception.blueant.axis.proventis.net/":InvalidConcurrentLicenseException is a complexType with complexContent extension of XSD type "http://exception.blueant.axis.proventis.net/":InvalidLicenseException.
///
/// struct _ns2__InvalidConcurrentLicenseException operations:
/// - _ns2__InvalidConcurrentLicenseException* soap_new__ns2__InvalidConcurrentLicenseException(struct soap*, int num) allocate and default initialize one or more values (array)
/// - soap_default__ns2__InvalidConcurrentLicenseException(struct soap*, _ns2__InvalidConcurrentLicenseException*) default initialize members
/// - int soap_read__ns2__InvalidConcurrentLicenseException(struct soap*, _ns2__InvalidConcurrentLicenseException*) deserialize from a source
/// - int soap_write__ns2__InvalidConcurrentLicenseException(struct soap*, _ns2__InvalidConcurrentLicenseException*) serialize to a sink
/// - _ns2__InvalidConcurrentLicenseException* soap_dup__ns2__InvalidConcurrentLicenseException(struct soap*, _ns2__InvalidConcurrentLicenseException* dst, _ns2__InvalidConcurrentLicenseException *src) returns deep copy of _ns2__InvalidConcurrentLicenseException src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del__ns2__InvalidConcurrentLicenseException(_ns2__InvalidConcurrentLicenseException*) deep deletes _ns2__InvalidConcurrentLicenseException data members, use only on dst after soap_dup__ns2__InvalidConcurrentLicenseException(NULL, _ns2__InvalidConcurrentLicenseException *dst, _ns2__InvalidConcurrentLicenseException *src) (use soapcpp2 -Ed)
struct _ns2__InvalidConcurrentLicenseException
{
/// INHERITED FROM ns2__GeneralWebserviceException:
/// Element "cause" of XSD type xs:anyType.
    _XML                                 cause                          nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "message" of XSD type xs:string.
    char*                                message                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
//  END OF INHERITED FROM ns2__GeneralWebserviceException
/// INHERITED FROM ns2__UserManagementException:
//  END OF INHERITED FROM ns2__UserManagementException
/// INHERITED FROM ns2__InvalidLicenseException:
//  END OF INHERITED FROM ns2__InvalidLicenseException
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *                                                                            *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://exception.blueant.axis.proventis.net/                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://exception.blueant.axis.proventis.net/                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://base.blueant.axis.proventis.net/                                  *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://base.blueant.axis.proventis.net/":ID of XSD type "http://base.blueant.axis.proventis.net/":id.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.blueant.axis.proventis.net/":mandatoryID of XSD type "http://base.blueant.axis.proventis.net/":id.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.blueant.axis.proventis.net/":optionalID of XSD type "http://base.blueant.axis.proventis.net/":id.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.blueant.axis.proventis.net/":mandatoryDouble of XSD type xs:double.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.blueant.axis.proventis.net/":mandatoryString of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.blueant.axis.proventis.net/":optionalString of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.blueant.axis.proventis.net/":mandatoryDateTime of XSD type xs:dateTime.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.blueant.axis.proventis.net/":mandatoryInt of XSD type xs:int.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.blueant.axis.proventis.net/":ForeignKey of XSD type "http://base.blueant.axis.proventis.net/":T_ForeignKey.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// @brief Top-level root element "http://base.blueant.axis.proventis.net/":User of XSD type "http://base.blueant.axis.proventis.net/":T_User.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://base.blueant.axis.proventis.net/                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	BaseBinding 
//gsoap ns1  service type:	Base 
//gsoap ns1  service port:	https://blueant.sinnerschrader.com/blueant/services/BaseService/ 
//gsoap ns1  service namespace:	http://blueant.axis.proventis.net/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage BlueAnt Definitions

@section BlueAnt_documentation Documentation
Version 11.1.0 at 26.10.2017 16:30 - WSI - Verified

@section BlueAnt_bindings Service Bindings

  - @ref BaseBinding

@section BlueAnt_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page BaseBinding Binding "BaseBinding"

@section BaseServicePort_port Port Documentation "BaseServicePort"
This service supports login and logout to the BlueAnt system

@section BaseBinding_operations Operations of Binding "BaseBinding"

  - @ref __ns1__Login

  - @ref __ns1__LoginNoAuth

  - @ref __ns1__LoginSAML

  - @ref __ns1__LoginImpersonate

  - @ref __ns1__Logout

  - @ref __ns1__createUser

  - @ref __ns1__deleteUser

  - @ref __ns1__searchUser

@section BaseBinding_ports Default endpoints of Binding "BaseBinding"

  - https://blueant.sinnerschrader.com/blueant/services/BaseService/

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail                                                          *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Fault is part of the gSOAP context and its content is accessed
through the soap.fault->detail variable (SOAP 1.1) or the
soap.fault->SOAP_ENV__Detail variable (SOAP 1.2).
Use wsdl2h option -j to omit these declarations.

*/
mutable struct SOAP_ENV__Detail
{
/// xsd:anyAttribute omitted: to parse attribute content of the Detail element into DOM anyAttribute, use wsdl2h option -d.
/// SOAP Fault message "AssertionException" part "AssertionException" element ""http://exception.blueant.axis.proventis.net/":AssertionException".
    struct _ns2__AssertionException*     ns2__AssertionException       ;
/// SOAP Fault message "GeneralWebserviceException" part "GeneralWebserviceException" element ""http://exception.blueant.axis.proventis.net/":GeneralWebserviceException".
    struct _ns2__GeneralWebserviceException*  ns2__GeneralWebserviceException;
/// SOAP Fault message "ImpersonatedUserNotFoundException" part "ImpersonatedUserNotFoundException" element ""http://exception.blueant.axis.proventis.net/":ImpersonatedUserNotFoundException".
    struct _ns2__ImpersonatedUserNotFoundException*  ns2__ImpersonatedUserNotFoundException;
/// SOAP Fault message "InvalidClientException" part "InvalidClientException" element ""http://exception.blueant.axis.proventis.net/":InvalidClientException".
    struct _ns2__InvalidClientException*  ns2__InvalidClientException   ;
/// SOAP Fault message "InvalidConcurrentLicenseException" part "InvalidConcurrentLicenseException" element ""http://exception.blueant.axis.proventis.net/":InvalidConcurrentLicenseException".
    struct _ns2__InvalidConcurrentLicenseException*  ns2__InvalidConcurrentLicenseException;
/// SOAP Fault message "InvalidDatesException" part "InvalidDatesException" element ""http://exception.blueant.axis.proventis.net/":InvalidDatesException".
    struct _ns2__InvalidDatesException*  ns2__InvalidDatesException    ;
/// SOAP Fault message "InvalidNamedLicenseException" part "InvalidNamedLicenseException" element ""http://exception.blueant.axis.proventis.net/":InvalidNamedLicenseException".
    struct _ns2__InvalidNamedLicenseException*  ns2__InvalidNamedLicenseException;
/// SOAP Fault message "InvalidNrOfImpersonationsException" part "InvalidNrOfImpersonationsException" element ""http://exception.blueant.axis.proventis.net/":InvalidNrOfImpersonationsException".
    struct _ns2__InvalidNrOfImpersonationsException*  ns2__InvalidNrOfImpersonationsException;
/// SOAP Fault message "InvalidParameterException" part "InvalidParameterException" element ""http://exception.blueant.axis.proventis.net/":InvalidParameterException".
    struct _ns2__InvalidParameterException*  ns2__InvalidParameterException;
/// SOAP Fault message "InvalidSessionException" part "InvalidSessionException" element ""http://exception.blueant.axis.proventis.net/":InvalidSessionException".
    struct _ns2__InvalidSessionException*  ns2__InvalidSessionException  ;
/// SOAP Fault message "InvalidUsernameException" part "InvalidUsernameException" element ""http://exception.blueant.axis.proventis.net/":InvalidUsernameException".
    struct _ns2__InvalidUsernameException*  ns2__InvalidUsernameException ;
/// SOAP Fault message "InvalidUsernamePasswordCombinationException" part "InvalidUsernamePasswordCombinatioException" element ""http://exception.blueant.axis.proventis.net/":InvalidUsernamePasswordCombinationException".
    struct _ns2__InvalidUsernamePasswordCombinationException*  ns2__InvalidUsernamePasswordCombinationException;
/// SOAP Fault message "PermissionDeniedException" part "PermissionDeniedException" element ""http://exception.blueant.axis.proventis.net/":PermissionDeniedException".
    struct _ns2__PermissionDeniedException*  ns2__PermissionDeniedException;
/// SOAP Fault message "ServerMaintenanceException" part "ServerMaintenanceException" element ""http://exception.blueant.axis.proventis.net/":ServerMaintenanceException".
    struct _ns2__ServerMaintenanceException*  ns2__ServerMaintenanceException;
    int                                  __type                        ;	///< set to SOAP_TYPE_X for a serializable type X
    void                                *fault                         ;	///< points to serializable object of type X or NULL
    _XML                                 __any                         ;	///< Catch any other content in XML string.
};


/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   BaseBinding                                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Login                                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Login" of service binding "BaseBinding".
creates a new session for the given user, using the given password

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://blueant.sinnerschrader.com/blueant/services/BaseService/

  - Default SOAP action or REST location path:
    - "http://blueant.axis.proventis.net/Login"

  - Addressing input action: "http://blueant.axis.proventis.net/Login"

  - Addressing output action: "http://blueant.axis.proventis.net/LoginResponse"

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidUsernamePasswordCombinationException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidDatesException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":ServerMaintenanceException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidNamedLicenseException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidConcurrentLicenseException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":GeneralWebserviceException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Login(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _ns3__LoginRequestParameter* ns3__LoginRequestParameter,
    // output parameters:
    struct _ns3__session               *ns3__session
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Login(
    struct soap *soap,
    // input parameters:
    struct _ns3__LoginRequestParameter* ns3__LoginRequestParameter,
    // output parameters:
    struct _ns3__session               *ns3__session
  );
@endcode

*/

//gsoap ns1  service method-protocol:	Login SOAP
//gsoap ns1  service method-style:	Login document
//gsoap ns1  service method-encoding:	Login literal
//gsoap ns1  service method-input-action:	Login http://blueant.axis.proventis.net/Login
//gsoap ns1  service method-output-action:	Login http://blueant.axis.proventis.net/LoginResponse
//gsoap ns1  service method-fault:	Login ns2__InvalidUsernamePasswordCombinationException
//gsoap ns1  service method-fault:	Login ns2__InvalidDatesException
//gsoap ns1  service method-fault:	Login ns2__ServerMaintenanceException
//gsoap ns1  service method-fault:	Login ns2__InvalidNamedLicenseException
//gsoap ns1  service method-fault:	Login ns2__InvalidConcurrentLicenseException
//gsoap ns1  service method-fault:	Login ns2__GeneralWebserviceException
int __ns1__Login(
    struct _ns3__LoginRequestParameter* ns3__LoginRequestParameter,	///< Input parameter
    struct _ns3__session               *ns3__session	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__LoginNoAuth                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__LoginNoAuth" of service binding "BaseBinding".
creates a new session for the given user, WITHOUT a password.

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://blueant.sinnerschrader.com/blueant/services/BaseService/

  - Default SOAP action or REST location path:
    - "http://blueant.axis.proventis.net/LoginNoAuth"

  - Addressing input action: "http://blueant.axis.proventis.net/LoginNoAuth"

  - Addressing output action: "http://blueant.axis.proventis.net/LoginNoAuthResponse"

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidUsernameException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidDatesException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":ServerMaintenanceException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidNamedLicenseException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidConcurrentLicenseException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":GeneralWebserviceException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__LoginNoAuth(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _ns3__LoginNoAuthRequestParameter* ns3__LoginNoAuthRequestParameter,
    // output parameters:
    struct _ns3__session               *ns3__session
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__LoginNoAuth(
    struct soap *soap,
    // input parameters:
    struct _ns3__LoginNoAuthRequestParameter* ns3__LoginNoAuthRequestParameter,
    // output parameters:
    struct _ns3__session               *ns3__session
  );
@endcode

*/

//gsoap ns1  service method-protocol:	LoginNoAuth SOAP
//gsoap ns1  service method-style:	LoginNoAuth document
//gsoap ns1  service method-encoding:	LoginNoAuth literal
//gsoap ns1  service method-input-action:	LoginNoAuth http://blueant.axis.proventis.net/LoginNoAuth
//gsoap ns1  service method-output-action:	LoginNoAuth http://blueant.axis.proventis.net/LoginNoAuthResponse
//gsoap ns1  service method-fault:	LoginNoAuth ns2__InvalidUsernameException
//gsoap ns1  service method-fault:	LoginNoAuth ns2__InvalidDatesException
//gsoap ns1  service method-fault:	LoginNoAuth ns2__ServerMaintenanceException
//gsoap ns1  service method-fault:	LoginNoAuth ns2__InvalidNamedLicenseException
//gsoap ns1  service method-fault:	LoginNoAuth ns2__InvalidConcurrentLicenseException
//gsoap ns1  service method-fault:	LoginNoAuth ns2__GeneralWebserviceException
int __ns1__LoginNoAuth(
    struct _ns3__LoginNoAuthRequestParameter* ns3__LoginNoAuthRequestParameter,	///< Input parameter
    struct _ns3__session               *ns3__session	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__LoginSAML                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__LoginSAML" of service binding "BaseBinding".
Login to BlueAnt using SAML artifact via SSO

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://blueant.sinnerschrader.com/blueant/services/BaseService/

  - Default SOAP action or REST location path:
    - "http://blueant.axis.proventis.net/LoginSAML"

  - Addressing input action: "http://blueant.axis.proventis.net/LoginSAML"

  - Addressing output action: "http://blueant.axis.proventis.net/LoginSAMLResponse"

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidUsernamePasswordCombinationException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidDatesException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":ServerMaintenanceException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidNamedLicenseException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidConcurrentLicenseException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":GeneralWebserviceException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__LoginSAML(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _ns3__LoginSAMLRequestParameter* ns3__LoginSAMLRequestParameter,
    // output parameters:
    struct _ns3__session               *ns3__session
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__LoginSAML(
    struct soap *soap,
    // input parameters:
    struct _ns3__LoginSAMLRequestParameter* ns3__LoginSAMLRequestParameter,
    // output parameters:
    struct _ns3__session               *ns3__session
  );
@endcode

*/

//gsoap ns1  service method-protocol:	LoginSAML SOAP
//gsoap ns1  service method-style:	LoginSAML document
//gsoap ns1  service method-encoding:	LoginSAML literal
//gsoap ns1  service method-input-action:	LoginSAML http://blueant.axis.proventis.net/LoginSAML
//gsoap ns1  service method-output-action:	LoginSAML http://blueant.axis.proventis.net/LoginSAMLResponse
//gsoap ns1  service method-fault:	LoginSAML ns2__InvalidUsernamePasswordCombinationException
//gsoap ns1  service method-fault:	LoginSAML ns2__InvalidDatesException
//gsoap ns1  service method-fault:	LoginSAML ns2__ServerMaintenanceException
//gsoap ns1  service method-fault:	LoginSAML ns2__InvalidNamedLicenseException
//gsoap ns1  service method-fault:	LoginSAML ns2__InvalidConcurrentLicenseException
//gsoap ns1  service method-fault:	LoginSAML ns2__GeneralWebserviceException
int __ns1__LoginSAML(
    struct _ns3__LoginSAMLRequestParameter* ns3__LoginSAMLRequestParameter,	///< Input parameter
    struct _ns3__session               *ns3__session	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__LoginImpersonate                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__LoginImpersonate" of service binding "BaseBinding".
Login to BlueAnt and impersonate another user

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://blueant.sinnerschrader.com/blueant/services/BaseService/

  - Default SOAP action or REST location path:
    - "http://blueant.axis.proventis.net/LoginImpersonate"

  - Addressing input action: "http://blueant.axis.proventis.net/LoginImpersonate"

  - Addressing output action: "http://blueant.axis.proventis.net/LoginImpersonateResponse"

  - Output Fault: "http://exception.blueant.axis.proventis.net/":ImpersonatedUserNotFoundException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidNrOfImpersonationsException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidUsernamePasswordCombinationException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidDatesException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":ServerMaintenanceException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidNamedLicenseException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidConcurrentLicenseException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":GeneralWebserviceException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__LoginImpersonate(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _ns3__LoginImpersonateRequestParameter* ns3__LoginImpersonateRequestParameter,
    // output parameters:
    struct _ns3__session               *ns3__session
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__LoginImpersonate(
    struct soap *soap,
    // input parameters:
    struct _ns3__LoginImpersonateRequestParameter* ns3__LoginImpersonateRequestParameter,
    // output parameters:
    struct _ns3__session               *ns3__session
  );
@endcode

*/

//gsoap ns1  service method-protocol:	LoginImpersonate SOAP
//gsoap ns1  service method-style:	LoginImpersonate document
//gsoap ns1  service method-encoding:	LoginImpersonate literal
//gsoap ns1  service method-input-action:	LoginImpersonate http://blueant.axis.proventis.net/LoginImpersonate
//gsoap ns1  service method-output-action:	LoginImpersonate http://blueant.axis.proventis.net/LoginImpersonateResponse
//gsoap ns1  service method-fault:	LoginImpersonate ns2__ImpersonatedUserNotFoundException
//gsoap ns1  service method-fault:	LoginImpersonate ns2__InvalidNrOfImpersonationsException
//gsoap ns1  service method-fault:	LoginImpersonate ns2__InvalidUsernamePasswordCombinationException
//gsoap ns1  service method-fault:	LoginImpersonate ns2__InvalidDatesException
//gsoap ns1  service method-fault:	LoginImpersonate ns2__ServerMaintenanceException
//gsoap ns1  service method-fault:	LoginImpersonate ns2__InvalidNamedLicenseException
//gsoap ns1  service method-fault:	LoginImpersonate ns2__InvalidConcurrentLicenseException
//gsoap ns1  service method-fault:	LoginImpersonate ns2__GeneralWebserviceException
int __ns1__LoginImpersonate(
    struct _ns3__LoginImpersonateRequestParameter* ns3__LoginImpersonateRequestParameter,	///< Input parameter
    struct _ns3__session               *ns3__session	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Logout                                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "__ns1__LogoutResponse" of operation "__ns1__Logout".
struct __ns1__LogoutResponse
{
};

/** Operation "__ns1__Logout" of service binding "BaseBinding".
This service logs out a valid sessionID in BlueAnt.

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://blueant.sinnerschrader.com/blueant/services/BaseService/

  - Default SOAP action or REST location path:
    - "http://blueant.axis.proventis.net/Logout"

  - Addressing input action: "http://blueant.axis.proventis.net/Logout"

  - Addressing output action: "http://blueant.axis.proventis.net/LogoutResponse"

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidSessionException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidClientException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":PermissionDeniedException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidParameterException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Logout(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _ns3__LogoutRequestParameter* ns3__LogoutRequestParameter,
    // output parameters:
    struct __ns1__LogoutResponse*
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Logout(
    struct soap *soap,
    // input parameters:
    struct _ns3__LogoutRequestParameter* ns3__LogoutRequestParameter,
    // output parameters:
    struct __ns1__LogoutResponse*
  );
@endcode

*/

//gsoap ns1  service method-protocol:	Logout SOAP
//gsoap ns1  service method-style:	Logout document
//gsoap ns1  service method-encoding:	Logout literal
//gsoap ns1  service method-input-action:	Logout http://blueant.axis.proventis.net/Logout
//gsoap ns1  service method-output-action:	Logout http://blueant.axis.proventis.net/LogoutResponse
//gsoap ns1  service method-fault:	Logout ns2__InvalidSessionException
//gsoap ns1  service method-fault:	Logout ns2__InvalidClientException
//gsoap ns1  service method-fault:	Logout ns2__PermissionDeniedException
//gsoap ns1  service method-fault:	Logout ns2__InvalidParameterException
int __ns1__Logout(
    struct _ns3__LogoutRequestParameter* ns3__LogoutRequestParameter,	///< Input parameter
    struct __ns1__LogoutResponse       *	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__createUser                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__createUser" of service binding "BaseBinding".
Create a new user in BlueAnt.

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://blueant.sinnerschrader.com/blueant/services/BaseService/

  - Default SOAP action or REST location path:
    - "http://blueant.axis.proventis.net/createUser"

  - Addressing input action: "http://blueant.axis.proventis.net/createUser"

  - Addressing output action: "http://blueant.axis.proventis.net/createUserResponse"

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidSessionException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidClientException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":PermissionDeniedException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidParameterException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":AssertionException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":GeneralWebserviceException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__createUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _ns3__createUserRequestParameter* ns3__createUserRequestParameter,
    // output parameters:
    struct ns3__T_USCOREUser           *ns3__User
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__createUser(
    struct soap *soap,
    // input parameters:
    struct _ns3__createUserRequestParameter* ns3__createUserRequestParameter,
    // output parameters:
    struct ns3__T_USCOREUser           *ns3__User
  );
@endcode

*/

//gsoap ns1  service method-protocol:	createUser SOAP
//gsoap ns1  service method-style:	createUser document
//gsoap ns1  service method-encoding:	createUser literal
//gsoap ns1  service method-input-action:	createUser http://blueant.axis.proventis.net/createUser
//gsoap ns1  service method-output-action:	createUser http://blueant.axis.proventis.net/createUserResponse
//gsoap ns1  service method-fault:	createUser ns2__InvalidSessionException
//gsoap ns1  service method-fault:	createUser ns2__InvalidClientException
//gsoap ns1  service method-fault:	createUser ns2__PermissionDeniedException
//gsoap ns1  service method-fault:	createUser ns2__InvalidParameterException
//gsoap ns1  service method-fault:	createUser ns2__AssertionException
//gsoap ns1  service method-fault:	createUser ns2__GeneralWebserviceException
int __ns1__createUser(
    struct _ns3__createUserRequestParameter* ns3__createUserRequestParameter,	///< Input parameter
///  user parameter: The new created user
    struct ns3__T_USCOREUser           *ns3__User	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__deleteUser                                                        *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "__ns1__deleteUserResponse" of operation "__ns1__deleteUser".
struct __ns1__deleteUserResponse
{
};

/** Operation "__ns1__deleteUser" of service binding "BaseBinding".
Deletes a user in BlueAnt.

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://blueant.sinnerschrader.com/blueant/services/BaseService/

  - Default SOAP action or REST location path:
    - "http://blueant.axis.proventis.net/deleteUser"

  - Addressing input action: "http://blueant.axis.proventis.net/deleteUser"

  - Addressing output action: "http://blueant.axis.proventis.net/deleteUserResponse"

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidSessionException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidClientException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":PermissionDeniedException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidParameterException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":AssertionException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":GeneralWebserviceException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__deleteUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _ns3__deleteUserRequestParameter* ns3__deleteUserRequestParameter,
    // output parameters:
    struct __ns1__deleteUserResponse*
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__deleteUser(
    struct soap *soap,
    // input parameters:
    struct _ns3__deleteUserRequestParameter* ns3__deleteUserRequestParameter,
    // output parameters:
    struct __ns1__deleteUserResponse*
  );
@endcode

*/

//gsoap ns1  service method-protocol:	deleteUser SOAP
//gsoap ns1  service method-style:	deleteUser document
//gsoap ns1  service method-encoding:	deleteUser literal
//gsoap ns1  service method-input-action:	deleteUser http://blueant.axis.proventis.net/deleteUser
//gsoap ns1  service method-output-action:	deleteUser http://blueant.axis.proventis.net/deleteUserResponse
//gsoap ns1  service method-fault:	deleteUser ns2__InvalidSessionException
//gsoap ns1  service method-fault:	deleteUser ns2__InvalidClientException
//gsoap ns1  service method-fault:	deleteUser ns2__PermissionDeniedException
//gsoap ns1  service method-fault:	deleteUser ns2__InvalidParameterException
//gsoap ns1  service method-fault:	deleteUser ns2__AssertionException
//gsoap ns1  service method-fault:	deleteUser ns2__GeneralWebserviceException
int __ns1__deleteUser(
    struct _ns3__deleteUserRequestParameter* ns3__deleteUserRequestParameter,	///< Input parameter
    struct __ns1__deleteUserResponse   *	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__searchUser                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__searchUser" of service binding "BaseBinding".
searches BlueAnt for users, matching the given criteria

  - SOAP document/literal style messaging

  - Default endpoints:
    - https://blueant.sinnerschrader.com/blueant/services/BaseService/

  - Default SOAP action or REST location path:
    - "http://blueant.axis.proventis.net/searchUser"

  - Addressing input action: "http://blueant.axis.proventis.net/searchUser"

  - Addressing output action: "http://blueant.axis.proventis.net/searchUserResponse"

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidSessionException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidClientException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":PermissionDeniedException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":InvalidParameterException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":AssertionException (literal)

  - Output Fault: "http://exception.blueant.axis.proventis.net/":GeneralWebserviceException (literal)

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__searchUser(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    struct _ns3__searchUserRequestParameter* ns3__searchUserRequestParameter,
    // output parameters:
    struct _ns3__UserList              *ns3__UserList
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__searchUser(
    struct soap *soap,
    // input parameters:
    struct _ns3__searchUserRequestParameter* ns3__searchUserRequestParameter,
    // output parameters:
    struct _ns3__UserList              *ns3__UserList
  );
@endcode

*/

//gsoap ns1  service method-protocol:	searchUser SOAP
//gsoap ns1  service method-style:	searchUser document
//gsoap ns1  service method-encoding:	searchUser literal
//gsoap ns1  service method-input-action:	searchUser http://blueant.axis.proventis.net/searchUser
//gsoap ns1  service method-output-action:	searchUser http://blueant.axis.proventis.net/searchUserResponse
//gsoap ns1  service method-fault:	searchUser ns2__InvalidSessionException
//gsoap ns1  service method-fault:	searchUser ns2__InvalidClientException
//gsoap ns1  service method-fault:	searchUser ns2__PermissionDeniedException
//gsoap ns1  service method-fault:	searchUser ns2__InvalidParameterException
//gsoap ns1  service method-fault:	searchUser ns2__AssertionException
//gsoap ns1  service method-fault:	searchUser ns2__GeneralWebserviceException
int __ns1__searchUser(
    struct _ns3__searchUserRequestParameter* ns3__searchUserRequestParameter,	///< Input parameter
///  userList parameter: List of matching users
    struct _ns3__UserList              *ns3__UserList	///< Output parameter
);

/**

@page BaseBinding Binding "BaseBinding"

@section BaseBinding_policy_enablers Policy Enablers of Binding "BaseBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section  Top-level root elements of schema ""

@section  Top-level root elements of schema ""

@section ns2 Top-level root elements of schema "http://exception.blueant.axis.proventis.net/"

  - <ns2:InvalidSessionException> @ref _ns2__InvalidSessionException
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__InvalidSessionException(struct soap*, struct _ns2__InvalidSessionException*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__InvalidSessionException(struct soap*, struct _ns2__InvalidSessionException*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__InvalidSessionException(struct soap*, const char *URL, struct _ns2__InvalidSessionException*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__InvalidSessionException(struct soap*, const char *URL, struct _ns2__InvalidSessionException*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__InvalidSessionException(struct soap*, const char *URL, struct _ns2__InvalidSessionException*);
    soap_POST_recv__ns2__InvalidSessionException(struct soap*, struct _ns2__InvalidSessionException*);
    @endcode

  - <ns2:WeekFinishedException> @ref _ns2__WeekFinishedException
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__WeekFinishedException(struct soap*, struct _ns2__WeekFinishedException*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__WeekFinishedException(struct soap*, struct _ns2__WeekFinishedException*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__WeekFinishedException(struct soap*, const char *URL, struct _ns2__WeekFinishedException*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__WeekFinishedException(struct soap*, const char *URL, struct _ns2__WeekFinishedException*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__WeekFinishedException(struct soap*, const char *URL, struct _ns2__WeekFinishedException*);
    soap_POST_recv__ns2__WeekFinishedException(struct soap*, struct _ns2__WeekFinishedException*);
    @endcode

  - <ns2:InvalidClientException> @ref _ns2__InvalidClientException
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__InvalidClientException(struct soap*, struct _ns2__InvalidClientException*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__InvalidClientException(struct soap*, struct _ns2__InvalidClientException*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__InvalidClientException(struct soap*, const char *URL, struct _ns2__InvalidClientException*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__InvalidClientException(struct soap*, const char *URL, struct _ns2__InvalidClientException*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__InvalidClientException(struct soap*, const char *URL, struct _ns2__InvalidClientException*);
    soap_POST_recv__ns2__InvalidClientException(struct soap*, struct _ns2__InvalidClientException*);
    @endcode

  - <ns2:PermissionDeniedException> @ref _ns2__PermissionDeniedException
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__PermissionDeniedException(struct soap*, struct _ns2__PermissionDeniedException*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__PermissionDeniedException(struct soap*, struct _ns2__PermissionDeniedException*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__PermissionDeniedException(struct soap*, const char *URL, struct _ns2__PermissionDeniedException*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__PermissionDeniedException(struct soap*, const char *URL, struct _ns2__PermissionDeniedException*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__PermissionDeniedException(struct soap*, const char *URL, struct _ns2__PermissionDeniedException*);
    soap_POST_recv__ns2__PermissionDeniedException(struct soap*, struct _ns2__PermissionDeniedException*);
    @endcode

  - <ns2:InvalidUsernamePasswordCombinationException> @ref _ns2__InvalidUsernamePasswordCombinationException
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__InvalidUsernamePasswordCombinationException(struct soap*, struct _ns2__InvalidUsernamePasswordCombinationException*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__InvalidUsernamePasswordCombinationException(struct soap*, struct _ns2__InvalidUsernamePasswordCombinationException*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__InvalidUsernamePasswordCombinationException(struct soap*, const char *URL, struct _ns2__InvalidUsernamePasswordCombinationException*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__InvalidUsernamePasswordCombinationException(struct soap*, const char *URL, struct _ns2__InvalidUsernamePasswordCombinationException*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__InvalidUsernamePasswordCombinationException(struct soap*, const char *URL, struct _ns2__InvalidUsernamePasswordCombinationException*);
    soap_POST_recv__ns2__InvalidUsernamePasswordCombinationException(struct soap*, struct _ns2__InvalidUsernamePasswordCombinationException*);
    @endcode

  - <ns2:InvalidUsernameException> @ref _ns2__InvalidUsernameException
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__InvalidUsernameException(struct soap*, struct _ns2__InvalidUsernameException*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__InvalidUsernameException(struct soap*, struct _ns2__InvalidUsernameException*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__InvalidUsernameException(struct soap*, const char *URL, struct _ns2__InvalidUsernameException*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__InvalidUsernameException(struct soap*, const char *URL, struct _ns2__InvalidUsernameException*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__InvalidUsernameException(struct soap*, const char *URL, struct _ns2__InvalidUsernameException*);
    soap_POST_recv__ns2__InvalidUsernameException(struct soap*, struct _ns2__InvalidUsernameException*);
    @endcode

  - <ns2:InvalidDatesException> @ref _ns2__InvalidDatesException
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__InvalidDatesException(struct soap*, struct _ns2__InvalidDatesException*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__InvalidDatesException(struct soap*, struct _ns2__InvalidDatesException*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__InvalidDatesException(struct soap*, const char *URL, struct _ns2__InvalidDatesException*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__InvalidDatesException(struct soap*, const char *URL, struct _ns2__InvalidDatesException*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__InvalidDatesException(struct soap*, const char *URL, struct _ns2__InvalidDatesException*);
    soap_POST_recv__ns2__InvalidDatesException(struct soap*, struct _ns2__InvalidDatesException*);
    @endcode

  - <ns2:ServerMaintenanceException> @ref _ns2__ServerMaintenanceException
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__ServerMaintenanceException(struct soap*, struct _ns2__ServerMaintenanceException*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__ServerMaintenanceException(struct soap*, struct _ns2__ServerMaintenanceException*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__ServerMaintenanceException(struct soap*, const char *URL, struct _ns2__ServerMaintenanceException*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__ServerMaintenanceException(struct soap*, const char *URL, struct _ns2__ServerMaintenanceException*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__ServerMaintenanceException(struct soap*, const char *URL, struct _ns2__ServerMaintenanceException*);
    soap_POST_recv__ns2__ServerMaintenanceException(struct soap*, struct _ns2__ServerMaintenanceException*);
    @endcode

  - <ns2:InvalidParameterException> @ref _ns2__InvalidParameterException
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__InvalidParameterException(struct soap*, struct _ns2__InvalidParameterException*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__InvalidParameterException(struct soap*, struct _ns2__InvalidParameterException*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__InvalidParameterException(struct soap*, const char *URL, struct _ns2__InvalidParameterException*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__InvalidParameterException(struct soap*, const char *URL, struct _ns2__InvalidParameterException*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__InvalidParameterException(struct soap*, const char *URL, struct _ns2__InvalidParameterException*);
    soap_POST_recv__ns2__InvalidParameterException(struct soap*, struct _ns2__InvalidParameterException*);
    @endcode

  - <ns2:AssertionException> @ref _ns2__AssertionException
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__AssertionException(struct soap*, struct _ns2__AssertionException*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__AssertionException(struct soap*, struct _ns2__AssertionException*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__AssertionException(struct soap*, const char *URL, struct _ns2__AssertionException*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__AssertionException(struct soap*, const char *URL, struct _ns2__AssertionException*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__AssertionException(struct soap*, const char *URL, struct _ns2__AssertionException*);
    soap_POST_recv__ns2__AssertionException(struct soap*, struct _ns2__AssertionException*);
    @endcode

  - <ns2:InvalidNamedLicenseException> @ref _ns2__InvalidNamedLicenseException
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__InvalidNamedLicenseException(struct soap*, struct _ns2__InvalidNamedLicenseException*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__InvalidNamedLicenseException(struct soap*, struct _ns2__InvalidNamedLicenseException*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__InvalidNamedLicenseException(struct soap*, const char *URL, struct _ns2__InvalidNamedLicenseException*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__InvalidNamedLicenseException(struct soap*, const char *URL, struct _ns2__InvalidNamedLicenseException*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__InvalidNamedLicenseException(struct soap*, const char *URL, struct _ns2__InvalidNamedLicenseException*);
    soap_POST_recv__ns2__InvalidNamedLicenseException(struct soap*, struct _ns2__InvalidNamedLicenseException*);
    @endcode

  - <ns2:InvalidConcurrentLicenseException> @ref _ns2__InvalidConcurrentLicenseException
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__InvalidConcurrentLicenseException(struct soap*, struct _ns2__InvalidConcurrentLicenseException*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__InvalidConcurrentLicenseException(struct soap*, struct _ns2__InvalidConcurrentLicenseException*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__InvalidConcurrentLicenseException(struct soap*, const char *URL, struct _ns2__InvalidConcurrentLicenseException*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__InvalidConcurrentLicenseException(struct soap*, const char *URL, struct _ns2__InvalidConcurrentLicenseException*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__InvalidConcurrentLicenseException(struct soap*, const char *URL, struct _ns2__InvalidConcurrentLicenseException*);
    soap_POST_recv__ns2__InvalidConcurrentLicenseException(struct soap*, struct _ns2__InvalidConcurrentLicenseException*);
    @endcode

  - <ns2:GeneralWebserviceException> @ref _ns2__GeneralWebserviceException
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__GeneralWebserviceException(struct soap*, struct _ns2__GeneralWebserviceException*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__GeneralWebserviceException(struct soap*, struct _ns2__GeneralWebserviceException*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__GeneralWebserviceException(struct soap*, const char *URL, struct _ns2__GeneralWebserviceException*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__GeneralWebserviceException(struct soap*, const char *URL, struct _ns2__GeneralWebserviceException*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__GeneralWebserviceException(struct soap*, const char *URL, struct _ns2__GeneralWebserviceException*);
    soap_POST_recv__ns2__GeneralWebserviceException(struct soap*, struct _ns2__GeneralWebserviceException*);
    @endcode

  - <ns2:ImpersonatedUserNotFoundException> @ref _ns2__ImpersonatedUserNotFoundException
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__ImpersonatedUserNotFoundException(struct soap*, struct _ns2__ImpersonatedUserNotFoundException*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__ImpersonatedUserNotFoundException(struct soap*, struct _ns2__ImpersonatedUserNotFoundException*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__ImpersonatedUserNotFoundException(struct soap*, const char *URL, struct _ns2__ImpersonatedUserNotFoundException*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__ImpersonatedUserNotFoundException(struct soap*, const char *URL, struct _ns2__ImpersonatedUserNotFoundException*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__ImpersonatedUserNotFoundException(struct soap*, const char *URL, struct _ns2__ImpersonatedUserNotFoundException*);
    soap_POST_recv__ns2__ImpersonatedUserNotFoundException(struct soap*, struct _ns2__ImpersonatedUserNotFoundException*);
    @endcode

  - <ns2:InvalidNrOfImpersonationsException> @ref _ns2__InvalidNrOfImpersonationsException
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns2__InvalidNrOfImpersonationsException(struct soap*, struct _ns2__InvalidNrOfImpersonationsException*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns2__InvalidNrOfImpersonationsException(struct soap*, struct _ns2__InvalidNrOfImpersonationsException*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns2__InvalidNrOfImpersonationsException(struct soap*, const char *URL, struct _ns2__InvalidNrOfImpersonationsException*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns2__InvalidNrOfImpersonationsException(struct soap*, const char *URL, struct _ns2__InvalidNrOfImpersonationsException*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns2__InvalidNrOfImpersonationsException(struct soap*, const char *URL, struct _ns2__InvalidNrOfImpersonationsException*);
    soap_POST_recv__ns2__InvalidNrOfImpersonationsException(struct soap*, struct _ns2__InvalidNrOfImpersonationsException*);
    @endcode

@section ns3 Top-level root elements of schema "http://base.blueant.axis.proventis.net/"

  - <ns3:ID> (use wsdl2h option -g to auto-generate type _ns3__ID)

  - <ns3:mandatoryID> (use wsdl2h option -g to auto-generate type _ns3__mandatoryID)

  - <ns3:optionalID> (use wsdl2h option -g to auto-generate type _ns3__optionalID)

  - <ns3:session> @ref _ns3__session
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__session(struct soap*, struct _ns3__session*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__session(struct soap*, struct _ns3__session*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__session(struct soap*, const char *URL, struct _ns3__session*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__session(struct soap*, const char *URL, struct _ns3__session*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__session(struct soap*, const char *URL, struct _ns3__session*);
    soap_POST_recv__ns3__session(struct soap*, struct _ns3__session*);
    @endcode

  - <ns3:mandatoryDouble> (use wsdl2h option -g to auto-generate type _ns3__mandatoryDouble)

  - <ns3:mandatoryString> (use wsdl2h option -g to auto-generate type _ns3__mandatoryString)

  - <ns3:optionalString> (use wsdl2h option -g to auto-generate type _ns3__optionalString)

  - <ns3:mandatoryDateTime> (use wsdl2h option -g to auto-generate type _ns3__mandatoryDateTime)

  - <ns3:mandatoryInt> (use wsdl2h option -g to auto-generate type _ns3__mandatoryInt)

  - <ns3:ForeignKey> (use wsdl2h option -g to auto-generate type _ns3__ForeignKey)

  - <ns3:LoginRequestParameter> @ref _ns3__LoginRequestParameter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__LoginRequestParameter(struct soap*, struct _ns3__LoginRequestParameter*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__LoginRequestParameter(struct soap*, struct _ns3__LoginRequestParameter*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__LoginRequestParameter(struct soap*, const char *URL, struct _ns3__LoginRequestParameter*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__LoginRequestParameter(struct soap*, const char *URL, struct _ns3__LoginRequestParameter*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__LoginRequestParameter(struct soap*, const char *URL, struct _ns3__LoginRequestParameter*);
    soap_POST_recv__ns3__LoginRequestParameter(struct soap*, struct _ns3__LoginRequestParameter*);
    @endcode

  - <ns3:LoginNoAuthRequestParameter> @ref _ns3__LoginNoAuthRequestParameter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__LoginNoAuthRequestParameter(struct soap*, struct _ns3__LoginNoAuthRequestParameter*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__LoginNoAuthRequestParameter(struct soap*, struct _ns3__LoginNoAuthRequestParameter*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__LoginNoAuthRequestParameter(struct soap*, const char *URL, struct _ns3__LoginNoAuthRequestParameter*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__LoginNoAuthRequestParameter(struct soap*, const char *URL, struct _ns3__LoginNoAuthRequestParameter*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__LoginNoAuthRequestParameter(struct soap*, const char *URL, struct _ns3__LoginNoAuthRequestParameter*);
    soap_POST_recv__ns3__LoginNoAuthRequestParameter(struct soap*, struct _ns3__LoginNoAuthRequestParameter*);
    @endcode

  - <ns3:LoginSAMLRequestParameter> @ref _ns3__LoginSAMLRequestParameter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__LoginSAMLRequestParameter(struct soap*, struct _ns3__LoginSAMLRequestParameter*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__LoginSAMLRequestParameter(struct soap*, struct _ns3__LoginSAMLRequestParameter*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__LoginSAMLRequestParameter(struct soap*, const char *URL, struct _ns3__LoginSAMLRequestParameter*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__LoginSAMLRequestParameter(struct soap*, const char *URL, struct _ns3__LoginSAMLRequestParameter*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__LoginSAMLRequestParameter(struct soap*, const char *URL, struct _ns3__LoginSAMLRequestParameter*);
    soap_POST_recv__ns3__LoginSAMLRequestParameter(struct soap*, struct _ns3__LoginSAMLRequestParameter*);
    @endcode

  - <ns3:LoginImpersonateRequestParameter> @ref _ns3__LoginImpersonateRequestParameter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__LoginImpersonateRequestParameter(struct soap*, struct _ns3__LoginImpersonateRequestParameter*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__LoginImpersonateRequestParameter(struct soap*, struct _ns3__LoginImpersonateRequestParameter*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__LoginImpersonateRequestParameter(struct soap*, const char *URL, struct _ns3__LoginImpersonateRequestParameter*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__LoginImpersonateRequestParameter(struct soap*, const char *URL, struct _ns3__LoginImpersonateRequestParameter*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__LoginImpersonateRequestParameter(struct soap*, const char *URL, struct _ns3__LoginImpersonateRequestParameter*);
    soap_POST_recv__ns3__LoginImpersonateRequestParameter(struct soap*, struct _ns3__LoginImpersonateRequestParameter*);
    @endcode

  - <ns3:LogoutRequestParameter> @ref _ns3__LogoutRequestParameter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__LogoutRequestParameter(struct soap*, struct _ns3__LogoutRequestParameter*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__LogoutRequestParameter(struct soap*, struct _ns3__LogoutRequestParameter*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__LogoutRequestParameter(struct soap*, const char *URL, struct _ns3__LogoutRequestParameter*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__LogoutRequestParameter(struct soap*, const char *URL, struct _ns3__LogoutRequestParameter*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__LogoutRequestParameter(struct soap*, const char *URL, struct _ns3__LogoutRequestParameter*);
    soap_POST_recv__ns3__LogoutRequestParameter(struct soap*, struct _ns3__LogoutRequestParameter*);
    @endcode

  - <ns3:createUserRequestParameter> @ref _ns3__createUserRequestParameter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__createUserRequestParameter(struct soap*, struct _ns3__createUserRequestParameter*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__createUserRequestParameter(struct soap*, struct _ns3__createUserRequestParameter*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__createUserRequestParameter(struct soap*, const char *URL, struct _ns3__createUserRequestParameter*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__createUserRequestParameter(struct soap*, const char *URL, struct _ns3__createUserRequestParameter*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__createUserRequestParameter(struct soap*, const char *URL, struct _ns3__createUserRequestParameter*);
    soap_POST_recv__ns3__createUserRequestParameter(struct soap*, struct _ns3__createUserRequestParameter*);
    @endcode

  - <ns3:searchUserRequestParameter> @ref _ns3__searchUserRequestParameter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__searchUserRequestParameter(struct soap*, struct _ns3__searchUserRequestParameter*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__searchUserRequestParameter(struct soap*, struct _ns3__searchUserRequestParameter*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__searchUserRequestParameter(struct soap*, const char *URL, struct _ns3__searchUserRequestParameter*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__searchUserRequestParameter(struct soap*, const char *URL, struct _ns3__searchUserRequestParameter*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__searchUserRequestParameter(struct soap*, const char *URL, struct _ns3__searchUserRequestParameter*);
    soap_POST_recv__ns3__searchUserRequestParameter(struct soap*, struct _ns3__searchUserRequestParameter*);
    @endcode

  - <ns3:deleteUserRequestParameter> @ref _ns3__deleteUserRequestParameter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__deleteUserRequestParameter(struct soap*, struct _ns3__deleteUserRequestParameter*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__deleteUserRequestParameter(struct soap*, struct _ns3__deleteUserRequestParameter*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__deleteUserRequestParameter(struct soap*, const char *URL, struct _ns3__deleteUserRequestParameter*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__deleteUserRequestParameter(struct soap*, const char *URL, struct _ns3__deleteUserRequestParameter*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__deleteUserRequestParameter(struct soap*, const char *URL, struct _ns3__deleteUserRequestParameter*);
    soap_POST_recv__ns3__deleteUserRequestParameter(struct soap*, struct _ns3__deleteUserRequestParameter*);
    @endcode

  - <ns3:User> (use wsdl2h option -g to auto-generate type _ns3__User)

  - <ns3:UserList> @ref _ns3__UserList
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__UserList(struct soap*, struct _ns3__UserList*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__UserList(struct soap*, struct _ns3__UserList*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__UserList(struct soap*, const char *URL, struct _ns3__UserList*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__UserList(struct soap*, const char *URL, struct _ns3__UserList*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__UserList(struct soap*, const char *URL, struct _ns3__UserList*);
    soap_POST_recv__ns3__UserList(struct soap*, struct _ns3__UserList*);
    @endcode

*/

/* End of baseService.h */
