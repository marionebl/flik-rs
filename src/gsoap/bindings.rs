/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}

impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }

    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];

        let bit_index = index % 8;
        let mask = 1 << bit_index;

        byte & mask == mask
    }

    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];

        let bit_index = index % 8;
        let mask = 1 << bit_index;

        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }

    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        let mut val = 0;

        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                val |= 1 << i;
            }
        }

        val
    }

    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            self.set_bit(i + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __IncompleteArrayField<T> {}
pub const SOAP_NAMESPACE_OF_ns2: &'static [u8; 45usize] =
    b"http://exception.blueant.axis.proventis.net/\0";
pub const SOAP_NAMESPACE_OF_ns3: &'static [u8; 40usize] =
    b"http://base.blueant.axis.proventis.net/\0";
pub const GSOAP_VERSION: u32 = 20828;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_REENTRANT: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201505;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 23;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const _SIGSET_H_types: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const _STRUCT_TIMEVAL: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_H: u32 = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __have_pthread_attr_t: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const _G_config_h: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _G_HAVE_MMAP: u32 = 1;
pub const _G_HAVE_MREMAP: u32 = 1;
pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
pub const _G_BUFSIZ: u32 = 8192;
pub const _IO_BUFSIZ: u32 = 8192;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
pub const EOF: i32 = -1;
pub const _IOS_INPUT: u32 = 1;
pub const _IOS_OUTPUT: u32 = 2;
pub const _IOS_ATEND: u32 = 4;
pub const _IOS_APPEND: u32 = 8;
pub const _IOS_TRUNC: u32 = 16;
pub const _IOS_NOCREATE: u32 = 32;
pub const _IOS_NOREPLACE: u32 = 64;
pub const _IOS_BIN: u32 = 128;
pub const _IO_MAGIC: u32 = 4222418944;
pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
pub const _IO_MAGIC_MASK: u32 = 4294901760;
pub const _IO_USER_BUF: u32 = 1;
pub const _IO_UNBUFFERED: u32 = 2;
pub const _IO_NO_READS: u32 = 4;
pub const _IO_NO_WRITES: u32 = 8;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
pub const _IO_LINKED: u32 = 128;
pub const _IO_IN_BACKUP: u32 = 256;
pub const _IO_LINE_BUF: u32 = 512;
pub const _IO_TIED_PUT_GET: u32 = 1024;
pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
pub const _IO_IS_APPENDING: u32 = 4096;
pub const _IO_IS_FILEBUF: u32 = 8192;
pub const _IO_BAD_SEEN: u32 = 16384;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IO_FLAGS2_MMAP: u32 = 1;
pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
pub const _IO_SKIPWS: u32 = 1;
pub const _IO_LEFT: u32 = 2;
pub const _IO_RIGHT: u32 = 4;
pub const _IO_INTERNAL: u32 = 8;
pub const _IO_DEC: u32 = 16;
pub const _IO_OCT: u32 = 32;
pub const _IO_HEX: u32 = 64;
pub const _IO_SHOWBASE: u32 = 128;
pub const _IO_SHOWPOINT: u32 = 256;
pub const _IO_UPPERCASE: u32 = 512;
pub const _IO_SHOWPOS: u32 = 1024;
pub const _IO_SCIENTIFIC: u32 = 2048;
pub const _IO_FIXED: u32 = 4096;
pub const _IO_UNITBUF: u32 = 8192;
pub const _IO_STDIO: u32 = 16384;
pub const _IO_DONT_CLOSE: u32 = 32768;
pub const _IO_BOOLALPHA: u32 = 65536;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _STRING_H: u32 = 1;
pub const _XLOCALE_H: u32 = 1;
pub const _CTYPE_H: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const _MATH_H_MATHDEF: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const FP_NAN: u32 = 0;
pub const FP_INFINITE: u32 = 1;
pub const FP_ZERO: u32 = 2;
pub const FP_SUBNORMAL: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const _ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const _SYS_TIMEB_H: u32 = 1;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const _SYS_UIO_H: u32 = 1;
pub const _BITS_UIO_H: u32 = 1;
pub const UIO_MAXIOV: u32 = 1024;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_MAX: u32 = 41;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_MAX: u32 = 41;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOMAXCONN: u32 = 128;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP: u32 = 35078;
pub const SIOCGSTAMPNS: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SO_MARK: u32 = 36;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const _STRINGS_H: u32 = 1;
pub const _SYS_TIME_H: u32 = 1;
pub const _NETINET_IN_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const _NETINET_TCP_H: u32 = 1;
pub const TCP_NODELAY: u32 = 1;
pub const TCP_MAXSEG: u32 = 2;
pub const TCP_CORK: u32 = 3;
pub const TCP_KEEPIDLE: u32 = 4;
pub const TCP_KEEPINTVL: u32 = 5;
pub const TCP_KEEPCNT: u32 = 6;
pub const TCP_SYNCNT: u32 = 7;
pub const TCP_LINGER2: u32 = 8;
pub const TCP_DEFER_ACCEPT: u32 = 9;
pub const TCP_WINDOW_CLAMP: u32 = 10;
pub const TCP_INFO: u32 = 11;
pub const TCP_QUICKACK: u32 = 12;
pub const TCP_CONGESTION: u32 = 13;
pub const TCP_MD5SIG: u32 = 14;
pub const TCP_COOKIE_TRANSACTIONS: u32 = 15;
pub const TCP_THIN_LINEAR_TIMEOUTS: u32 = 16;
pub const TCP_THIN_DUPACK: u32 = 17;
pub const TCP_USER_TIMEOUT: u32 = 18;
pub const TCP_REPAIR: u32 = 19;
pub const TCP_REPAIR_QUEUE: u32 = 20;
pub const TCP_QUEUE_SEQ: u32 = 21;
pub const TCP_REPAIR_OPTIONS: u32 = 22;
pub const TCP_FASTOPEN: u32 = 23;
pub const TCP_TIMESTAMP: u32 = 24;
pub const TCP_NOTSENT_LOWAT: u32 = 25;
pub const TCP_CC_INFO: u32 = 26;
pub const TCP_SAVE_SYN: u32 = 27;
pub const TCP_SAVED_SYN: u32 = 28;
pub const TH_FIN: u32 = 1;
pub const TH_SYN: u32 = 2;
pub const TH_RST: u32 = 4;
pub const TH_PUSH: u32 = 8;
pub const TH_ACK: u32 = 16;
pub const TH_URG: u32 = 32;
pub const TCPOPT_EOL: u32 = 0;
pub const TCPOPT_NOP: u32 = 1;
pub const TCPOPT_MAXSEG: u32 = 2;
pub const TCPOLEN_MAXSEG: u32 = 4;
pub const TCPOPT_WINDOW: u32 = 3;
pub const TCPOLEN_WINDOW: u32 = 3;
pub const TCPOPT_SACK_PERMITTED: u32 = 4;
pub const TCPOLEN_SACK_PERMITTED: u32 = 2;
pub const TCPOPT_SACK: u32 = 5;
pub const TCPOPT_TIMESTAMP: u32 = 8;
pub const TCPOLEN_TIMESTAMP: u32 = 10;
pub const TCPOLEN_TSTAMP_APPA: u32 = 12;
pub const TCPOPT_TSTAMP_HDR: u32 = 16844810;
pub const TCP_MSS: u32 = 512;
pub const TCP_MAXWIN: u32 = 65535;
pub const TCP_MAX_WINSHIFT: u32 = 14;
pub const SOL_TCP: u32 = 6;
pub const TCPI_OPT_TIMESTAMPS: u32 = 1;
pub const TCPI_OPT_SACK: u32 = 2;
pub const TCPI_OPT_WSCALE: u32 = 4;
pub const TCPI_OPT_ECN: u32 = 8;
pub const TCPI_OPT_ECN_SEEN: u32 = 16;
pub const TCPI_OPT_SYN_DATA: u32 = 32;
pub const TCP_MD5SIG_MAXKEYLEN: u32 = 80;
pub const TCP_COOKIE_MIN: u32 = 8;
pub const TCP_COOKIE_MAX: u32 = 16;
pub const TCP_COOKIE_PAIR_SIZE: u32 = 32;
pub const TCP_COOKIE_IN_ALWAYS: u32 = 1;
pub const TCP_COOKIE_OUT_NEVER: u32 = 2;
pub const TCP_S_DATA_IN: u32 = 4;
pub const TCP_S_DATA_OUT: u32 = 8;
pub const TCP_MSS_DEFAULT: u32 = 536;
pub const TCP_MSS_DESIRED: u32 = 1220;
pub const _ARPA_INET_H: u32 = 1;
pub const _NETDB_H: u32 = 1;
pub const _RPC_NETDB_H: u32 = 1;
pub const _PATH_HEQUIV: &'static [u8; 17usize] = b"/etc/hosts.equiv\0";
pub const _PATH_HOSTS: &'static [u8; 11usize] = b"/etc/hosts\0";
pub const _PATH_NETWORKS: &'static [u8; 14usize] = b"/etc/networks\0";
pub const _PATH_NSSWITCH_CONF: &'static [u8; 19usize] = b"/etc/nsswitch.conf\0";
pub const _PATH_PROTOCOLS: &'static [u8; 15usize] = b"/etc/protocols\0";
pub const _PATH_SERVICES: &'static [u8; 14usize] = b"/etc/services\0";
pub const HOST_NOT_FOUND: u32 = 1;
pub const TRY_AGAIN: u32 = 2;
pub const NO_RECOVERY: u32 = 3;
pub const NO_DATA: u32 = 4;
pub const NETDB_INTERNAL: i32 = -1;
pub const NETDB_SUCCESS: u32 = 0;
pub const NO_ADDRESS: u32 = 4;
pub const IPPORT_RESERVED: u32 = 1024;
pub const AI_PASSIVE: u32 = 1;
pub const AI_CANONNAME: u32 = 2;
pub const AI_NUMERICHOST: u32 = 4;
pub const AI_V4MAPPED: u32 = 8;
pub const AI_ALL: u32 = 16;
pub const AI_ADDRCONFIG: u32 = 32;
pub const AI_NUMERICSERV: u32 = 1024;
pub const EAI_BADFLAGS: i32 = -1;
pub const EAI_NONAME: i32 = -2;
pub const EAI_AGAIN: i32 = -3;
pub const EAI_FAIL: i32 = -4;
pub const EAI_FAMILY: i32 = -6;
pub const EAI_SOCKTYPE: i32 = -7;
pub const EAI_SERVICE: i32 = -8;
pub const EAI_MEMORY: i32 = -10;
pub const EAI_SYSTEM: i32 = -11;
pub const EAI_OVERFLOW: i32 = -12;
pub const NI_MAXHOST: u32 = 1025;
pub const NI_MAXSERV: u32 = 32;
pub const NI_NUMERICHOST: u32 = 1;
pub const NI_NUMERICSERV: u32 = 2;
pub const NI_NOFQDN: u32 = 4;
pub const NI_NAMEREQD: u32 = 8;
pub const NI_DGRAM: u32 = 16;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &'static [u8; 48usize] =
    b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _FCNTL_H: u32 = 1;
pub const __O_LARGEFILE: u32 = 0;
pub const F_GETLK64: u32 = 5;
pub const F_SETLK64: u32 = 6;
pub const F_SETLKW64: u32 = 7;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_NDELAY: u32 = 2048;
pub const O_SYNC: u32 = 1052672;
pub const O_FSYNC: u32 = 1052672;
pub const O_ASYNC: u32 = 8192;
pub const __O_DIRECTORY: u32 = 65536;
pub const __O_NOFOLLOW: u32 = 131072;
pub const __O_CLOEXEC: u32 = 524288;
pub const __O_DIRECT: u32 = 16384;
pub const __O_NOATIME: u32 = 262144;
pub const __O_PATH: u32 = 2097152;
pub const __O_DSYNC: u32 = 4096;
pub const __O_TMPFILE: u32 = 4259840;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const O_DIRECTORY: u32 = 65536;
pub const O_NOFOLLOW: u32 = 131072;
pub const O_CLOEXEC: u32 = 524288;
pub const O_DSYNC: u32 = 4096;
pub const O_RSYNC: u32 = 1052672;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const __F_SETOWN: u32 = 8;
pub const __F_GETOWN: u32 = 9;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const __F_SETSIG: u32 = 10;
pub const __F_GETSIG: u32 = 11;
pub const __F_SETOWN_EX: u32 = 15;
pub const __F_GETOWN_EX: u32 = 16;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const FAPPEND: u32 = 1024;
pub const FFSYNC: u32 = 1052672;
pub const FASYNC: u32 = 8192;
pub const FNONBLOCK: u32 = 2048;
pub const FNDELAY: u32 = 2048;
pub const __POSIX_FADV_DONTNEED: u32 = 4;
pub const __POSIX_FADV_NOREUSE: u32 = 5;
pub const POSIX_FADV_NORMAL: u32 = 0;
pub const POSIX_FADV_RANDOM: u32 = 1;
pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
pub const POSIX_FADV_WILLNEED: u32 = 3;
pub const POSIX_FADV_DONTNEED: u32 = 4;
pub const POSIX_FADV_NOREUSE: u32 = 5;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_EACCESS: u32 = 512;
pub const _BITS_STAT_H: u32 = 1;
pub const _STAT_VER_KERNEL: u32 = 0;
pub const _STAT_VER_LINUX: u32 = 1;
pub const _MKNOD_VER_LINUX: u32 = 0;
pub const _STAT_VER: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const SOAP_SHUT_WR: u32 = 1;
pub const SOAP_SHUT_RDWR: u32 = 2;
pub const SOAP_LONG_FORMAT: &'static [u8; 4usize] = b"%ld\0";
pub const SOAP_ULONG_FORMAT: &'static [u8; 4usize] = b"%lu\0";
pub const SOAP_ERANGE: u32 = 34;
pub const SOAP_EINTR: u32 = 4;
pub const SOAP_EAGAIN: u32 = 11;
pub const SOAP_EADDRINUSE: u32 = 98;
pub const SOAP_ECONNREFUSED: u32 = 111;
pub const SOAP_EWOULDBLOCK: u32 = 11;
pub const SOAP_EINPROGRESS: u32 = 115;
pub const SOAP_BUFLEN: u32 = 65536;
pub const SOAP_LABLEN: u32 = 256;
pub const SOAP_PTRBLK: u32 = 32;
pub const SOAP_PTRHASH: u32 = 4096;
pub const SOAP_IDHASH: u32 = 1999;
pub const SOAP_BLKLEN: u32 = 256;
pub const SOAP_TAGLEN: u32 = 1024;
pub const SOAP_HDRLEN: u32 = 8192;
pub const SOAP_TMPLEN: u32 = 1024;
pub const SOAP_MAXDIMS: u32 = 16;
pub const SOAP_MAXPTRS: u32 = 4;
pub const SOAP_MAXLOGS: u32 = 3;
pub const SOAP_INDEX_RECV: u32 = 0;
pub const SOAP_INDEX_SENT: u32 = 1;
pub const SOAP_INDEX_TEST: u32 = 2;
pub const SOAP_MULTIREFTAG: &'static [u8; 3usize] = b"id\0";
pub const SOAP_BASEREFNAME: &'static [u8; 2usize] = b"_\0";
pub const SOAP_MAXEINTR: u32 = 10;
pub const SOAP_MAXKEEPALIVE: u32 = 100;
pub const SOAP_MAXARRAYSIZE: u32 = 100000;
pub const SOAP_MAXDIMESIZE: u32 = 8388608;
pub const SOAP_MAXINFLATESIZE: u32 = 1048576;
pub const SOAP_MINDEFLATERATIO: f64 = 0.001;
pub const SOAP_EOF: i32 = -1;
pub const SOAP_ERR: i32 = -1;
pub const SOAP_OK: u32 = 0;
pub const SOAP_CLI_FAULT: u32 = 1;
pub const SOAP_SVR_FAULT: u32 = 2;
pub const SOAP_TAG_MISMATCH: u32 = 3;
pub const SOAP_TYPE: u32 = 4;
pub const SOAP_SYNTAX_ERROR: u32 = 5;
pub const SOAP_NO_TAG: u32 = 6;
pub const SOAP_IOB: u32 = 7;
pub const SOAP_MUSTUNDERSTAND: u32 = 8;
pub const SOAP_NAMESPACE: u32 = 9;
pub const SOAP_USER_ERROR: u32 = 10;
pub const SOAP_FATAL_ERROR: u32 = 11;
pub const SOAP_FAULT: u32 = 12;
pub const SOAP_NO_METHOD: u32 = 13;
pub const SOAP_NO_DATA: u32 = 14;
pub const SOAP_GET_METHOD: u32 = 15;
pub const SOAP_PUT_METHOD: u32 = 16;
pub const SOAP_DEL_METHOD: u32 = 17;
pub const SOAP_HEAD_METHOD: u32 = 18;
pub const SOAP_HTTP_METHOD: u32 = 19;
pub const SOAP_EOM: u32 = 20;
pub const SOAP_MOE: u32 = 21;
pub const SOAP_HDR: u32 = 22;
pub const SOAP_NULL: u32 = 23;
pub const SOAP_DUPLICATE_ID: u32 = 24;
pub const SOAP_MISSING_ID: u32 = 25;
pub const SOAP_HREF: u32 = 26;
pub const SOAP_UDP_ERROR: u32 = 27;
pub const SOAP_TCP_ERROR: u32 = 28;
pub const SOAP_HTTP_ERROR: u32 = 29;
pub const SOAP_SSL_ERROR: u32 = 30;
pub const SOAP_ZLIB_ERROR: u32 = 31;
pub const SOAP_DIME_ERROR: u32 = 32;
pub const SOAP_DIME_HREF: u32 = 33;
pub const SOAP_DIME_MISMATCH: u32 = 34;
pub const SOAP_DIME_END: u32 = 35;
pub const SOAP_MIME_ERROR: u32 = 36;
pub const SOAP_MIME_HREF: u32 = 37;
pub const SOAP_MIME_END: u32 = 38;
pub const SOAP_VERSIONMISMATCH: u32 = 39;
pub const SOAP_PLUGIN_ERROR: u32 = 40;
pub const SOAP_DATAENCODINGUNKNOWN: u32 = 41;
pub const SOAP_REQUIRED: u32 = 42;
pub const SOAP_PROHIBITED: u32 = 43;
pub const SOAP_OCCURS: u32 = 44;
pub const SOAP_LENGTH: u32 = 45;
pub const SOAP_PATTERN: u32 = 46;
pub const SOAP_FD_EXCEEDED: u32 = 47;
pub const SOAP_UTF_ERROR: u32 = 48;
pub const SOAP_NTLM_ERROR: u32 = 49;
pub const SOAP_STOP: u32 = 1000;
pub const SOAP_FORM: u32 = 1001;
pub const SOAP_HTML: u32 = 1002;
pub const SOAP_FILE: u32 = 1003;
pub const SOAP_POST: u32 = 2000;
pub const SOAP_POST_FILE: u32 = 2001;
pub const SOAP_GET: u32 = 2002;
pub const SOAP_PUT: u32 = 2003;
pub const SOAP_DEL: u32 = 2004;
pub const SOAP_CONNECT: u32 = 2005;
pub const SOAP_DIME_CF: u32 = 1;
pub const SOAP_DIME_ME: u32 = 2;
pub const SOAP_DIME_MB: u32 = 4;
pub const SOAP_DIME_VERSION: u32 = 8;
pub const SOAP_DIME_MEDIA: u32 = 16;
pub const SOAP_DIME_ABSURI: u32 = 32;
pub const SOAP_ZLIB_NONE: u32 = 0;
pub const SOAP_ZLIB_DEFLATE: u32 = 1;
pub const SOAP_ZLIB_INFLATE: u32 = 2;
pub const SOAP_ZLIB_GZIP: u32 = 2;
pub const SOAP_IO: u32 = 3;
pub const SOAP_IO_FLUSH: u32 = 0;
pub const SOAP_IO_BUFFER: u32 = 1;
pub const SOAP_IO_STORE: u32 = 2;
pub const SOAP_IO_CHUNK: u32 = 3;
pub const SOAP_IO_UDP: u32 = 4;
pub const SOAP_IO_LENGTH: u32 = 8;
pub const SOAP_IO_KEEPALIVE: u32 = 16;
pub const SOAP_ENC: u32 = 4095;
pub const SOAP_ENC_LATIN: u32 = 32;
pub const SOAP_ENC_XML: u32 = 64;
pub const SOAP_ENC_DIME: u32 = 128;
pub const SOAP_ENC_MIME: u32 = 256;
pub const SOAP_ENC_MTOM: u32 = 512;
pub const SOAP_ENC_ZLIB: u32 = 1024;
pub const SOAP_ENC_SSL: u32 = 2048;
pub const SOAP_XML_STRICT: u32 = 4096;
pub const SOAP_XML_INDENT: u32 = 8192;
pub const SOAP_XML_IGNORENS: u32 = 16384;
pub const SOAP_XML_DEFAULTNS: u32 = 32768;
pub const SOAP_XML_CANONICAL: u32 = 65536;
pub const SOAP_XML_TREE: u32 = 131072;
pub const SOAP_XML_NIL: u32 = 262144;
pub const SOAP_XML_NOTYPE: u32 = 524288;
pub const SOAP_DOM_TREE: u32 = 1048576;
pub const SOAP_DOM_NODE: u32 = 2097152;
pub const SOAP_DOM_ASIS: u32 = 4194304;
pub const SOAP_RESERVED: u32 = 8388608;
pub const SOAP_C_NOIOB: u32 = 16777216;
pub const SOAP_C_UTFSTRING: u32 = 33554432;
pub const SOAP_C_MBSTRING: u32 = 67108864;
pub const SOAP_C_NILSTRING: u32 = 134217728;
pub const SOAP_XML_DOM: u32 = 268435456;
pub const SOAP_XML_GRAPH: u32 = 536870912;
pub const SOAP_MIME_POSTCHECK: u32 = 1073741824;
pub const SOAP_SEC_WSUID: u32 = 2147483648;
pub const SOAP_IO_DEFAULT: u32 = 0;
pub const SOAP_SSL_NO_AUTHENTICATION: u32 = 0;
pub const SOAP_SSL_REQUIRE_SERVER_AUTHENTICATION: u32 = 1;
pub const SOAP_SSL_REQUIRE_CLIENT_AUTHENTICATION: u32 = 2;
pub const SOAP_SSL_SKIP_HOST_CHECK: u32 = 4;
pub const SOAP_SSL_ALLOW_EXPIRED_CERTIFICATE: u32 = 8;
pub const SOAP_SSL_NO_DEFAULT_CA_PATH: u32 = 16;
pub const SOAP_SSL_RSA: u32 = 32;
pub const SOAP_TLSv1: u32 = 0;
pub const SOAP_SSLv3_TLSv1: u32 = 64;
pub const SOAP_SSLv3: u32 = 128;
pub const SOAP_TLSv1_0: u32 = 256;
pub const SOAP_TLSv1_1: u32 = 512;
pub const SOAP_TLSv1_2: u32 = 1024;
pub const SOAP_SSL_CLIENT: u32 = 4096;
pub const SOAP_SSL_DEFAULT: u32 = 1;
pub const SOAP_NONE: u32 = 0;
pub const SOAP_INIT: u32 = 1;
pub const SOAP_COPY: u32 = 2;
pub const SOAP_BEGIN: u32 = 0;
pub const SOAP_IN_ENVELOPE: u32 = 2;
pub const SOAP_IN_HEADER: u32 = 3;
pub const SOAP_END_HEADER: u32 = 4;
pub const SOAP_NO_BODY: u32 = 5;
pub const SOAP_IN_BODY: u32 = 6;
pub const SOAP_END_BODY: u32 = 7;
pub const SOAP_END_ENVELOPE: u32 = 8;
pub const SOAP_END: u32 = 9;
pub const SOAP_SEC_BEGIN: u32 = 1;
pub const SOAP_SEC_SIGN: u32 = 2;
pub const SOAP_SEC_DECRYPT: u32 = 3;
pub const SOAP_NO_LINK_TO_DELETE: i32 = -2;
pub const SOAP_TYPE_xsd__boolean: u32 = 7;
pub const SOAP_TYPE_ns3__T_USCORELicenseType: u32 = 16;
pub const SOAP_TYPE_ns3__T_USCOREUserState: u32 = 17;
pub const SOAP_TYPE_ns2__GeneralWebserviceException: u32 = 18;
pub const SOAP_TYPE_ns3__T_USCOREForeignKey: u32 = 19;
pub const SOAP_TYPE_ns3__T_USCOREForeignKeyList: u32 = 20;
pub const SOAP_TYPE__ns3__union_UserIDInfo: u32 = 23;
pub const SOAP_UNION__ns3__union_UserIDInfo_userID: u32 = 1;
pub const SOAP_UNION__ns3__union_UserIDInfo_userName: u32 = 2;
pub const SOAP_TYPE_ns3__UserIDInfo: u32 = 22;
pub const SOAP_TYPE_ns3__T_USCOREUser: u32 = 24;
pub const SOAP_TYPE_ns3__T_USCOREIdList: u32 = 25;
pub const SOAP_TYPE__ns3__session: u32 = 29;
pub const SOAP_TYPE__ns3__LoginRequestParameter: u32 = 30;
pub const SOAP_TYPE__ns3__LoginNoAuthRequestParameter: u32 = 31;
pub const SOAP_TYPE__ns3__LoginSAMLRequestParameter: u32 = 32;
pub const SOAP_TYPE__ns3__union_LoginImpersonateRequestParameter: u32 = 34;
pub const SOAP_UNION__ns3__union_LoginImpersonateRequestParameter_ImpersonateUsername: u32 = 1;
pub const SOAP_UNION__ns3__union_LoginImpersonateRequestParameter_ImpersonateUserID: u32 = 2;
pub const SOAP_UNION__ns3__union_LoginImpersonateRequestParameter_ImpersonateForeignKey: u32 = 3;
pub const SOAP_TYPE__ns3__LoginImpersonateRequestParameter: u32 = 33;
pub const SOAP_TYPE__ns3__LogoutRequestParameter: u32 = 35;
pub const SOAP_TYPE__ns3__createUserRequestParameter: u32 = 36;
pub const SOAP_TYPE__ns3__searchUserRequestParameter: u32 = 38;
pub const SOAP_TYPE__ns3__deleteUserRequestParameter: u32 = 40;
pub const SOAP_TYPE__ns3__UserList: u32 = 42;
pub const SOAP_TYPE_ns2__UserManagementException: u32 = 44;
pub const SOAP_TYPE__ns2__WeekFinishedException: u32 = 45;
pub const SOAP_TYPE__ns2__InvalidParameterException: u32 = 46;
pub const SOAP_TYPE__ns2__AssertionException: u32 = 47;
pub const SOAP_TYPE__ns2__GeneralWebserviceException: u32 = 48;
pub const SOAP_TYPE_ns2__InvalidLicenseException: u32 = 49;
pub const SOAP_TYPE__ns2__InvalidSessionException: u32 = 50;
pub const SOAP_TYPE__ns2__InvalidClientException: u32 = 51;
pub const SOAP_TYPE__ns2__PermissionDeniedException: u32 = 52;
pub const SOAP_TYPE__ns2__InvalidUsernamePasswordCombinationException: u32 = 53;
pub const SOAP_TYPE__ns2__InvalidUsernameException: u32 = 54;
pub const SOAP_TYPE__ns2__InvalidDatesException: u32 = 55;
pub const SOAP_TYPE__ns2__ServerMaintenanceException: u32 = 56;
pub const SOAP_TYPE__ns2__ImpersonatedUserNotFoundException: u32 = 57;
pub const SOAP_TYPE__ns2__InvalidNrOfImpersonationsException: u32 = 58;
pub const SOAP_TYPE__ns2__InvalidNamedLicenseException: u32 = 59;
pub const SOAP_TYPE__ns2__InvalidConcurrentLicenseException: u32 = 60;
pub const SOAP_TYPE_SOAP_ENV__Detail: u32 = 61;
pub const SOAP_TYPE___ns1__Login: u32 = 81;
pub const SOAP_TYPE___ns1__LoginNoAuth: u32 = 84;
pub const SOAP_TYPE___ns1__LoginSAML: u32 = 87;
pub const SOAP_TYPE___ns1__LoginImpersonate: u32 = 90;
pub const SOAP_TYPE___ns1__LogoutResponse: u32 = 91;
pub const SOAP_TYPE___ns1__Logout: u32 = 95;
pub const SOAP_TYPE___ns1__createUser: u32 = 98;
pub const SOAP_TYPE___ns1__deleteUserResponse: u32 = 99;
pub const SOAP_TYPE___ns1__deleteUser: u32 = 103;
pub const SOAP_TYPE___ns1__searchUser: u32 = 107;
pub const SOAP_TYPE_SOAP_ENV__Header: u32 = 108;
pub const SOAP_TYPE_SOAP_ENV__Code: u32 = 109;
pub const SOAP_TYPE_SOAP_ENV__Reason: u32 = 111;
pub const SOAP_TYPE_SOAP_ENV__Fault: u32 = 112;
pub const SOAP_TYPE__QName: u32 = 5;
pub const SOAP_TYPE__XML: u32 = 6;
pub const SOAP_TYPE_xsd__date: u32 = 8;
pub const SOAP_TYPE_ns3__id: u32 = 10;
pub const SOAP_TYPE_ns3__optionalInt: u32 = 11;
pub const SOAP_TYPE_ns3__optionalBoolean: u32 = 12;
pub const SOAP_TYPE_ns3__optionalDouble: u32 = 14;
pub const SOAP_TYPE_ns3__optionalLong: u32 = 15;
pub const SOAP_TYPE_byte: u32 = 3;
pub const SOAP_TYPE_int: u32 = 1;
pub const SOAP_TYPE_LONG64: u32 = 9;
pub const SOAP_TYPE_double: u32 = 13;
pub const SOAP_TYPE_PointerToSOAP_ENV__Reason: u32 = 114;
pub const SOAP_TYPE_PointerToSOAP_ENV__Detail: u32 = 113;
pub const SOAP_TYPE_PointerToSOAP_ENV__Code: u32 = 110;
pub const SOAP_TYPE_PointerTo_ns3__UserList: u32 = 105;
pub const SOAP_TYPE_PointerTo_ns3__searchUserRequestParameter: u32 = 104;
pub const SOAP_TYPE_PointerTo__ns1__deleteUserResponse: u32 = 101;
pub const SOAP_TYPE_PointerTo_ns3__deleteUserRequestParameter: u32 = 100;
pub const SOAP_TYPE_PointerTo_ns3__createUserRequestParameter: u32 = 96;
pub const SOAP_TYPE_PointerTo__ns1__LogoutResponse: u32 = 93;
pub const SOAP_TYPE_PointerTo_ns3__LogoutRequestParameter: u32 = 92;
pub const SOAP_TYPE_PointerTo_ns3__LoginImpersonateRequestParameter: u32 = 88;
pub const SOAP_TYPE_PointerTo_ns3__LoginSAMLRequestParameter: u32 = 85;
pub const SOAP_TYPE_PointerTo_ns3__LoginNoAuthRequestParameter: u32 = 82;
pub const SOAP_TYPE_PointerTo_ns3__session: u32 = 79;
pub const SOAP_TYPE_PointerTo_ns3__LoginRequestParameter: u32 = 78;
pub const SOAP_TYPE_PointerTo_ns2__ServerMaintenanceException: u32 = 75;
pub const SOAP_TYPE_PointerTo_ns2__PermissionDeniedException: u32 = 74;
pub const SOAP_TYPE_PointerTo_ns2__InvalidUsernamePasswordCombinationException: u32 = 73;
pub const SOAP_TYPE_PointerTo_ns2__InvalidUsernameException: u32 = 72;
pub const SOAP_TYPE_PointerTo_ns2__InvalidSessionException: u32 = 71;
pub const SOAP_TYPE_PointerTo_ns2__InvalidParameterException: u32 = 70;
pub const SOAP_TYPE_PointerTo_ns2__InvalidNrOfImpersonationsException: u32 = 69;
pub const SOAP_TYPE_PointerTo_ns2__InvalidNamedLicenseException: u32 = 68;
pub const SOAP_TYPE_PointerTo_ns2__InvalidDatesException: u32 = 67;
pub const SOAP_TYPE_PointerTo_ns2__InvalidConcurrentLicenseException: u32 = 66;
pub const SOAP_TYPE_PointerTo_ns2__InvalidClientException: u32 = 65;
pub const SOAP_TYPE_PointerTo_ns2__ImpersonatedUserNotFoundException: u32 = 64;
pub const SOAP_TYPE_PointerTo_ns2__GeneralWebserviceException: u32 = 63;
pub const SOAP_TYPE_PointerTo_ns2__AssertionException: u32 = 62;
pub const SOAP_TYPE_PointerTons3__T_USCOREUser: u32 = 43;
pub const SOAP_TYPE_PointerTons3__UserIDInfo: u32 = 41;
pub const SOAP_TYPE_PointerTons3__T_USCOREUserState: u32 = 39;
pub const SOAP_TYPE_PointerTons3__T_USCORELicenseType: u32 = 37;
pub const SOAP_TYPE_PointerTons3__id: u32 = 28;
pub const SOAP_TYPE_PointerTons3__T_USCOREForeignKeyList: u32 = 27;
pub const SOAP_TYPE_PointerTons3__T_USCOREIdList: u32 = 26;
pub const SOAP_TYPE_PointerTons3__T_USCOREForeignKey: u32 = 21;
pub const SOAP_TYPE_string: u32 = 4;
pub type wchar_t = ::std::os::raw::c_int;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = u32;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub __wait_terminated: wait__bindgen_ty_1,
    pub __wait_stopped: wait__bindgen_ty_2,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_1))
    );
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn __w_termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set___w_termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___w_coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __w_termsig: ::std::os::raw::c_uint,
        __w_coredump: ::std::os::raw::c_uint,
        __w_retcode: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let __w_termsig: u32 = unsafe { ::std::mem::transmute(__w_termsig) };
            __w_termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __w_coredump: u32 = unsafe { ::std::mem::transmute(__w_coredump) };
            __w_coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let __w_retcode: u32 = unsafe { ::std::mem::transmute(__w_retcode) };
            __w_retcode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_2))
    );
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn __w_stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __w_stopval: ::std::os::raw::c_uint,
        __w_stopsig: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let __w_stopval: u32 = unsafe { ::std::mem::transmute(__w_stopval) };
            __w_stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let __w_stopsig: u32 = unsafe { ::std::mem::transmute(__w_stopsig) };
            __w_stopsig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_wait() {
    assert_eq!(
        ::std::mem::size_of::<wait>(),
        4usize,
        concat!("Size of: ", stringify!(wait))
    );
    assert_eq!(
        ::std::mem::align_of::<wait>(),
        4usize,
        concat!("Alignment of ", stringify!(wait))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(w_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).__wait_terminated as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(__wait_terminated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).__wait_stopped as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(__wait_stopped)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __WAIT_STATUS {
    pub __uptr: *mut wait,
    pub __iptr: *mut ::std::os::raw::c_int,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout___WAIT_STATUS() {
    assert_eq!(
        ::std::mem::size_of::<__WAIT_STATUS>(),
        8usize,
        concat!("Size of: ", stringify!(__WAIT_STATUS))
    );
    assert_eq!(
        ::std::mem::align_of::<__WAIT_STATUS>(),
        8usize,
        concat!("Alignment of ", stringify!(__WAIT_STATUS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__WAIT_STATUS>())).__uptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__WAIT_STATUS),
            "::",
            stringify!(__uptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__WAIT_STATUS>())).__iptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__WAIT_STATUS),
            "::",
            stringify!(__iptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: pthread_mutex_t___pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutex_t___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t___pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t___pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t___pthread_mutex_s>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pthread_mutex_t___pthread_mutex_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__lock as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__count as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__owner as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__nusers as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__kind as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__spins as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__elision as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__list as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: pthread_cond_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__lock as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__futex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__total_seq as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__total_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__wakeup_seq as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__wakeup_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__woken_seq as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__woken_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__mutex as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__mutex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__nwaiters as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__nwaiters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__broadcast_seq as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__broadcast_seq)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: pthread_rwlock_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlock_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__lock as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_readers as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__readers_wakeup as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__readers_wakeup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__writer_wakeup as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__writer_wakeup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_readers_queued
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_readers_queued)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_writers_queued
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_writers_queued)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__rwelision as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__pad1 as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__pad2 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__flags as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__flags)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void, arg2: *const ::std::os::raw::c_void)
        -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *const ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
pub const __codecvt_result___codecvt_ok: __codecvt_result = 0;
pub const __codecvt_result___codecvt_partial: __codecvt_result = 1;
pub const __codecvt_result___codecvt_error: __codecvt_result = 2;
pub const __codecvt_result___codecvt_noconv: __codecvt_result = 3;
pub type __codecvt_result = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stdin_"]
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stdout_"]
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stderr_"]
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int, arg3: __ssize_t)
        -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void, arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type fpos_t = _G_fpos_t;
extern "C" {
    #[link_name = "\u{1}stdin"]
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "\u{1}stdout"]
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "\u{1}stderr"]
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: usize,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __s: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: __locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: __locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: __locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
pub const _ISupper: _bindgen_ty_1 = 256;
pub const _ISlower: _bindgen_ty_1 = 512;
pub const _ISalpha: _bindgen_ty_1 = 1024;
pub const _ISdigit: _bindgen_ty_1 = 2048;
pub const _ISxdigit: _bindgen_ty_1 = 4096;
pub const _ISspace: _bindgen_ty_1 = 8192;
pub const _ISprint: _bindgen_ty_1 = 16384;
pub const _ISgraph: _bindgen_ty_1 = 32768;
pub const _ISblank: _bindgen_ty_1 = 1;
pub const _IScntrl: _bindgen_ty_1 = 2;
pub const _ISpunct: _bindgen_ty_1 = 4;
pub const _ISalnum: _bindgen_ty_1 = 8;
pub type _bindgen_ty_1 = u32;
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: __locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: __locale_t) -> ::std::os::raw::c_int;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: f64) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: f64) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn acosl(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosl(__x: f64) -> f64;
}
extern "C" {
    pub fn asinl(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinl(__x: f64) -> f64;
}
extern "C" {
    pub fn atanl(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanl(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2l(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2l(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cosl(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosl(__x: f64) -> f64;
}
extern "C" {
    pub fn sinl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinl(__x: f64) -> f64;
}
extern "C" {
    pub fn tanl(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanl(__x: f64) -> f64;
}
extern "C" {
    pub fn coshl(__x: f64) -> f64;
}
extern "C" {
    pub fn __coshl(__x: f64) -> f64;
}
extern "C" {
    pub fn sinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn tanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn acoshl(__x: f64) -> f64;
}
extern "C" {
    pub fn __acoshl(__x: f64) -> f64;
}
extern "C" {
    pub fn asinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn atanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn expl(__x: f64) -> f64;
}
extern "C" {
    pub fn __expl(__x: f64) -> f64;
}
extern "C" {
    pub fn frexpl(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexpl(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexpl(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn logl(__x: f64) -> f64;
}
extern "C" {
    pub fn __logl(__x: f64) -> f64;
}
extern "C" {
    pub fn log10l(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10l(__x: f64) -> f64;
}
extern "C" {
    pub fn modfl(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modfl(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1l(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1l(__x: f64) -> f64;
}
extern "C" {
    pub fn log1pl(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1pl(__x: f64) -> f64;
}
extern "C" {
    pub fn logbl(__x: f64) -> f64;
}
extern "C" {
    pub fn __logbl(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2l(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2l(__x: f64) -> f64;
}
extern "C" {
    pub fn log2l(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2l(__x: f64) -> f64;
}
extern "C" {
    pub fn powl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __powl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn hypotl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypotl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn ceill(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceill(__x: f64) -> f64;
}
extern "C" {
    pub fn fabsl(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabsl(__x: f64) -> f64;
}
extern "C" {
    pub fn floorl(__x: f64) -> f64;
}
extern "C" {
    pub fn __floorl(__x: f64) -> f64;
}
extern "C" {
    pub fn fmodl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmodl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __isinfl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinfl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __dreml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significandl(__x: f64) -> f64;
}
extern "C" {
    pub fn __significandl(__x: f64) -> f64;
}
extern "C" {
    pub fn copysignl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysignl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __isnanl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnanl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn gammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgammal_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rintl(__x: f64) -> f64;
}
extern "C" {
    pub fn __rintl(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafterl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttowardl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nexttowardl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn remainderl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainderl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbnl(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbnl(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogbl(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnl(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalblnl(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyintl(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyintl(__x: f64) -> f64;
}
extern "C" {
    pub fn roundl(__x: f64) -> f64;
}
extern "C" {
    pub fn __roundl(__x: f64) -> f64;
}
extern "C" {
    pub fn truncl(__x: f64) -> f64;
}
extern "C" {
    pub fn __truncl(__x: f64) -> f64;
}
extern "C" {
    pub fn remquol(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __remquol(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lrintl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdiml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmaxl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fminl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fminl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmal(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fmal(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalbl(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalbl(__x: f64, __n: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}signgam"]
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: _bindgen_ty_2 = 0;
pub const FP_INFINITE: _bindgen_ty_2 = 1;
pub const FP_ZERO: _bindgen_ty_2 = 2;
pub const FP_SUBNORMAL: _bindgen_ty_2 = 3;
pub const FP_NORMAL: _bindgen_ty_2 = 4;
pub type _bindgen_ty_2 = u32;
pub const _LIB_VERSION_TYPE__IEEE_: _LIB_VERSION_TYPE = -1;
pub const _LIB_VERSION_TYPE__SVID_: _LIB_VERSION_TYPE = 0;
pub const _LIB_VERSION_TYPE__XOPEN_: _LIB_VERSION_TYPE = 1;
pub const _LIB_VERSION_TYPE__POSIX_: _LIB_VERSION_TYPE = 2;
pub const _LIB_VERSION_TYPE__ISOC_: _LIB_VERSION_TYPE = 3;
pub type _LIB_VERSION_TYPE = i32;
extern "C" {
    #[link_name = "\u{1}_LIB_VERSION"]
    pub static mut _LIB_VERSION: _LIB_VERSION_TYPE;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout_exception() {
    assert_eq!(
        ::std::mem::size_of::<exception>(),
        40usize,
        concat!("Size of: ", stringify!(exception))
    );
    assert_eq!(
        ::std::mem::align_of::<exception>(),
        8usize,
        concat!("Alignment of ", stringify!(exception))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).arg1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).arg2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).retval as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(retval)
        )
    );
}
extern "C" {
    pub fn matherr(__exc: *mut exception) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeb {
    pub time: time_t,
    pub millitm: ::std::os::raw::c_ushort,
    pub timezone: ::std::os::raw::c_short,
    pub dstflag: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_timeb() {
    assert_eq!(
        ::std::mem::size_of::<timeb>(),
        16usize,
        concat!("Size of: ", stringify!(timeb))
    );
    assert_eq!(
        ::std::mem::align_of::<timeb>(),
        8usize,
        concat!("Alignment of ", stringify!(timeb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeb>())).time as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeb),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeb>())).millitm as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeb),
            "::",
            stringify!(millitm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeb>())).timezone as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(timeb),
            "::",
            stringify!(timezone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeb>())).dstflag as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(timeb),
            "::",
            stringify!(dstflag)
        )
    );
}
extern "C" {
    pub fn ftime(__timebuf: *mut timeb) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: __locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__tzname"]
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    #[link_name = "\u{1}__daylight"]
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__timezone"]
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}tzname"]
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    #[link_name = "\u{1}daylight"]
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}timezone"]
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
extern "C" {
    pub fn readv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn writev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn preadv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwritev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> isize;
}
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = u32;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_padding as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
pub const MSG_OOB: _bindgen_ty_3 = 1;
pub const MSG_PEEK: _bindgen_ty_3 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_3 = 4;
pub const MSG_CTRUNC: _bindgen_ty_3 = 8;
pub const MSG_PROXY: _bindgen_ty_3 = 16;
pub const MSG_TRUNC: _bindgen_ty_3 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_3 = 64;
pub const MSG_EOR: _bindgen_ty_3 = 128;
pub const MSG_WAITALL: _bindgen_ty_3 = 256;
pub const MSG_FIN: _bindgen_ty_3 = 512;
pub const MSG_SYN: _bindgen_ty_3 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_3 = 2048;
pub const MSG_RST: _bindgen_ty_3 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_3 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_3 = 16384;
pub const MSG_MORE: _bindgen_ty_3 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_3 = 65536;
pub const MSG_FASTOPEN: _bindgen_ty_3 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_3 = 1073741824;
pub type _bindgen_ty_3 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_4 = 1;
pub type _bindgen_ty_4 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub const SHUT_RD: _bindgen_ty_5 = 0;
pub const SHUT_WR: _bindgen_ty_5 = 1;
pub const SHUT_RDWR: _bindgen_ty_5 = 2;
pub type _bindgen_ty_5 = u32;
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timezone>())).tz_minuteswest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timezone>())).tz_dsttime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_dsttime)
        )
    );
}
pub type __timezone_ptr_t = *mut timezone;
extern "C" {
    pub fn gettimeofday(__tv: *mut timeval, __tz: __timezone_ptr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval) -> ::std::os::raw::c_int;
}
pub const __itimer_which_ITIMER_REAL: __itimer_which = 0;
pub const __itimer_which_ITIMER_VIRTUAL: __itimer_which = 1;
pub const __itimer_which_ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerval>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerval>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
pub type __itimer_which_t = ::std::os::raw::c_int;
extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(__fd: ::std::os::raw::c_int, __tvp: *const timeval) -> ::std::os::raw::c_int;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_addr>())).s_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_ip_opts() {
    assert_eq!(
        ::std::mem::size_of::<ip_opts>(),
        44usize,
        concat!("Size of: ", stringify!(ip_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_opts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_dst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_opts as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_opts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ip_mreqn() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreqn>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreqn))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreqn>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreqn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_address as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_ifindex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    assert_eq!(
        ::std::mem::size_of::<in_pktinfo>(),
        12usize,
        concat!("Size of: ", stringify!(in_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in_pktinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_ifindex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_spec_dst as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_spec_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_addr)
        )
    );
}
pub const IPPROTO_IP: _bindgen_ty_6 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_6 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_6 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_6 = 4;
pub const IPPROTO_TCP: _bindgen_ty_6 = 6;
pub const IPPROTO_EGP: _bindgen_ty_6 = 8;
pub const IPPROTO_PUP: _bindgen_ty_6 = 12;
pub const IPPROTO_UDP: _bindgen_ty_6 = 17;
pub const IPPROTO_IDP: _bindgen_ty_6 = 22;
pub const IPPROTO_TP: _bindgen_ty_6 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_6 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_6 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_6 = 46;
pub const IPPROTO_GRE: _bindgen_ty_6 = 47;
pub const IPPROTO_ESP: _bindgen_ty_6 = 50;
pub const IPPROTO_AH: _bindgen_ty_6 = 51;
pub const IPPROTO_MTP: _bindgen_ty_6 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_6 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_6 = 98;
pub const IPPROTO_PIM: _bindgen_ty_6 = 103;
pub const IPPROTO_COMP: _bindgen_ty_6 = 108;
pub const IPPROTO_SCTP: _bindgen_ty_6 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_6 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_6 = 137;
pub const IPPROTO_RAW: _bindgen_ty_6 = 255;
pub const IPPROTO_MAX: _bindgen_ty_6 = 256;
pub type _bindgen_ty_6 = u32;
pub const IPPROTO_HOPOPTS: _bindgen_ty_7 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_7 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_7 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_7 = 58;
pub const IPPROTO_NONE: _bindgen_ty_7 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_7 = 60;
pub const IPPROTO_MH: _bindgen_ty_7 = 135;
pub type _bindgen_ty_7 = u32;
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_8 = 7;
pub const IPPORT_DISCARD: _bindgen_ty_8 = 9;
pub const IPPORT_SYSTAT: _bindgen_ty_8 = 11;
pub const IPPORT_DAYTIME: _bindgen_ty_8 = 13;
pub const IPPORT_NETSTAT: _bindgen_ty_8 = 15;
pub const IPPORT_FTP: _bindgen_ty_8 = 21;
pub const IPPORT_TELNET: _bindgen_ty_8 = 23;
pub const IPPORT_SMTP: _bindgen_ty_8 = 25;
pub const IPPORT_TIMESERVER: _bindgen_ty_8 = 37;
pub const IPPORT_NAMESERVER: _bindgen_ty_8 = 42;
pub const IPPORT_WHOIS: _bindgen_ty_8 = 43;
pub const IPPORT_MTP: _bindgen_ty_8 = 57;
pub const IPPORT_TFTP: _bindgen_ty_8 = 69;
pub const IPPORT_RJE: _bindgen_ty_8 = 77;
pub const IPPORT_FINGER: _bindgen_ty_8 = 79;
pub const IPPORT_TTYLINK: _bindgen_ty_8 = 87;
pub const IPPORT_SUPDUP: _bindgen_ty_8 = 95;
pub const IPPORT_EXECSERVER: _bindgen_ty_8 = 512;
pub const IPPORT_LOGINSERVER: _bindgen_ty_8 = 513;
pub const IPPORT_CMDSERVER: _bindgen_ty_8 = 514;
pub const IPPORT_EFSSERVER: _bindgen_ty_8 = 520;
pub const IPPORT_BIFFUDP: _bindgen_ty_8 = 512;
pub const IPPORT_WHOSERVER: _bindgen_ty_8 = 513;
pub const IPPORT_ROUTESERVER: _bindgen_ty_8 = 520;
pub const IPPORT_RESERVED: _bindgen_ty_8 = 1024;
pub const IPPORT_USERRESERVED: _bindgen_ty_8 = 5000;
pub type _bindgen_ty_8 = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr16 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
#[test]
fn bindgen_test_layout_in6_addr() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in6_addr>())).__in6_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__in6_u)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}in6addr_any"]
    pub static mut in6addr_any: in6_addr;
}
extern "C" {
    #[link_name = "\u{1}in6addr_loopback"]
    pub static mut in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_zero as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_flowinfo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_scope_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq>(),
        8usize,
        concat!("Size of: ", stringify!(ip_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq_source() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq_source>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq_source>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_sourceaddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_sourceaddr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ipv6_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ipv6_mreq>(),
        20usize,
        concat!("Size of: ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ipv6_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_interface as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_interface)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_req() {
    assert_eq!(
        ::std::mem::size_of::<group_req>(),
        136usize,
        concat!("Size of: ", stringify!(group_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_group)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_source_req() {
    assert_eq!(
        ::std::mem::size_of::<group_source_req>(),
        264usize,
        concat!("Size of: ", stringify!(group_source_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_source_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_source_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_source as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_source)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[test]
fn bindgen_test_layout_ip_msfilter() {
    assert_eq!(
        ::std::mem::size_of::<ip_msfilter>(),
        20usize,
        concat!("Size of: ", stringify!(ip_msfilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_msfilter>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_msfilter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_fmode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_numsrc as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_numsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_slist as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_slist)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[test]
fn bindgen_test_layout_group_filter() {
    assert_eq!(
        ::std::mem::size_of::<group_filter>(),
        272usize,
        concat!("Size of: ", stringify!(group_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<group_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(group_filter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_fmode as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_numsrc as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_numsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_slist as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_slist)
        )
    );
}
extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
extern "C" {
    pub fn bindresvport(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport6(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::std::os::raw::c_int;
}
pub type tcp_seq = u_int32_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tcphdr {
    pub __bindgen_anon_1: tcphdr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tcphdr__bindgen_ty_1 {
    pub __bindgen_anon_1: tcphdr__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: tcphdr__bindgen_ty_1__bindgen_ty_2,
    _bindgen_union_align: [u32; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcphdr__bindgen_ty_1__bindgen_ty_1 {
    pub th_sport: u_int16_t,
    pub th_dport: u_int16_t,
    pub th_seq: tcp_seq,
    pub th_ack: tcp_seq,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub th_flags: u_int8_t,
    pub th_win: u_int16_t,
    pub th_sum: u_int16_t,
    pub th_urp: u_int16_t,
}
#[test]
fn bindgen_test_layout_tcphdr__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<tcphdr__bindgen_ty_1__bindgen_ty_1>(),
        20usize,
        concat!("Size of: ", stringify!(tcphdr__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<tcphdr__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcphdr__bindgen_ty_1__bindgen_ty_1>())).th_sport as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(th_sport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcphdr__bindgen_ty_1__bindgen_ty_1>())).th_dport as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(th_dport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcphdr__bindgen_ty_1__bindgen_ty_1>())).th_seq as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(th_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcphdr__bindgen_ty_1__bindgen_ty_1>())).th_ack as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(th_ack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcphdr__bindgen_ty_1__bindgen_ty_1>())).th_flags as *const _
                as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(th_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcphdr__bindgen_ty_1__bindgen_ty_1>())).th_win as *const _
                as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(th_win)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcphdr__bindgen_ty_1__bindgen_ty_1>())).th_sum as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(th_sum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcphdr__bindgen_ty_1__bindgen_ty_1>())).th_urp as *const _
                as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(th_urp)
        )
    );
}
impl tcphdr__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn th_x2(&self) -> u_int8_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_th_x2(&mut self, val: u_int8_t) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn th_off(&self) -> u_int8_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_th_off(&mut self, val: u_int8_t) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        th_x2: u_int8_t,
        th_off: u_int8_t,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let th_x2: u8 = unsafe { ::std::mem::transmute(th_x2) };
            th_x2 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let th_off: u8 = unsafe { ::std::mem::transmute(th_off) };
            th_off as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcphdr__bindgen_ty_1__bindgen_ty_2 {
    pub source: u_int16_t,
    pub dest: u_int16_t,
    pub seq: u_int32_t,
    pub ack_seq: u_int32_t,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u8>,
    pub window: u_int16_t,
    pub check: u_int16_t,
    pub urg_ptr: u_int16_t,
}
#[test]
fn bindgen_test_layout_tcphdr__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<tcphdr__bindgen_ty_1__bindgen_ty_2>(),
        20usize,
        concat!("Size of: ", stringify!(tcphdr__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<tcphdr__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcphdr__bindgen_ty_1__bindgen_ty_2>())).source as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcphdr__bindgen_ty_1__bindgen_ty_2>())).dest as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(dest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcphdr__bindgen_ty_1__bindgen_ty_2>())).seq as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcphdr__bindgen_ty_1__bindgen_ty_2>())).ack_seq as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(ack_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcphdr__bindgen_ty_1__bindgen_ty_2>())).window as *const _
                as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcphdr__bindgen_ty_1__bindgen_ty_2>())).check as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(check)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcphdr__bindgen_ty_1__bindgen_ty_2>())).urg_ptr as *const _
                as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(tcphdr__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(urg_ptr)
        )
    );
}
impl tcphdr__bindgen_ty_1__bindgen_ty_2 {
    #[inline]
    pub fn res1(&self) -> u_int16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_res1(&mut self, val: u_int16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn doff(&self) -> u_int16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_doff(&mut self, val: u_int16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn fin(&self) -> u_int16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_fin(&mut self, val: u_int16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn syn(&self) -> u_int16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_syn(&mut self, val: u_int16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rst(&self) -> u_int16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_rst(&mut self, val: u_int16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn psh(&self) -> u_int16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_psh(&mut self, val: u_int16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ack(&self) -> u_int16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_ack(&mut self, val: u_int16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn urg(&self) -> u_int16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_urg(&mut self, val: u_int16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn res2(&self) -> u_int16_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_res2(&mut self, val: u_int16_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        res1: u_int16_t,
        doff: u_int16_t,
        fin: u_int16_t,
        syn: u_int16_t,
        rst: u_int16_t,
        psh: u_int16_t,
        ack: u_int16_t,
        urg: u_int16_t,
        res2: u_int16_t,
    ) -> __BindgenBitfieldUnit<[u8; 2usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let res1: u16 = unsafe { ::std::mem::transmute(res1) };
            res1 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let doff: u16 = unsafe { ::std::mem::transmute(doff) };
            doff as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let fin: u16 = unsafe { ::std::mem::transmute(fin) };
            fin as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let syn: u16 = unsafe { ::std::mem::transmute(syn) };
            syn as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let rst: u16 = unsafe { ::std::mem::transmute(rst) };
            rst as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let psh: u16 = unsafe { ::std::mem::transmute(psh) };
            psh as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let ack: u16 = unsafe { ::std::mem::transmute(ack) };
            ack as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let urg: u16 = unsafe { ::std::mem::transmute(urg) };
            urg as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let res2: u16 = unsafe { ::std::mem::transmute(res2) };
            res2 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_tcphdr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<tcphdr__bindgen_ty_1>(),
        20usize,
        concat!("Size of: ", stringify!(tcphdr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<tcphdr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(tcphdr__bindgen_ty_1))
    );
}
#[test]
fn bindgen_test_layout_tcphdr() {
    assert_eq!(
        ::std::mem::size_of::<tcphdr>(),
        20usize,
        concat!("Size of: ", stringify!(tcphdr))
    );
    assert_eq!(
        ::std::mem::align_of::<tcphdr>(),
        4usize,
        concat!("Alignment of ", stringify!(tcphdr))
    );
}
pub const TCP_ESTABLISHED: _bindgen_ty_9 = 1;
pub const TCP_SYN_SENT: _bindgen_ty_9 = 2;
pub const TCP_SYN_RECV: _bindgen_ty_9 = 3;
pub const TCP_FIN_WAIT1: _bindgen_ty_9 = 4;
pub const TCP_FIN_WAIT2: _bindgen_ty_9 = 5;
pub const TCP_TIME_WAIT: _bindgen_ty_9 = 6;
pub const TCP_CLOSE: _bindgen_ty_9 = 7;
pub const TCP_CLOSE_WAIT: _bindgen_ty_9 = 8;
pub const TCP_LAST_ACK: _bindgen_ty_9 = 9;
pub const TCP_LISTEN: _bindgen_ty_9 = 10;
pub const TCP_CLOSING: _bindgen_ty_9 = 11;
pub type _bindgen_ty_9 = u32;
pub const tcp_ca_state_TCP_CA_Open: tcp_ca_state = 0;
pub const tcp_ca_state_TCP_CA_Disorder: tcp_ca_state = 1;
pub const tcp_ca_state_TCP_CA_CWR: tcp_ca_state = 2;
pub const tcp_ca_state_TCP_CA_Recovery: tcp_ca_state = 3;
pub const tcp_ca_state_TCP_CA_Loss: tcp_ca_state = 4;
pub type tcp_ca_state = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_info {
    pub tcpi_state: u_int8_t,
    pub tcpi_ca_state: u_int8_t,
    pub tcpi_retransmits: u_int8_t,
    pub tcpi_probes: u_int8_t,
    pub tcpi_backoff: u_int8_t,
    pub tcpi_options: u_int8_t,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub tcpi_rto: u_int32_t,
    pub tcpi_ato: u_int32_t,
    pub tcpi_snd_mss: u_int32_t,
    pub tcpi_rcv_mss: u_int32_t,
    pub tcpi_unacked: u_int32_t,
    pub tcpi_sacked: u_int32_t,
    pub tcpi_lost: u_int32_t,
    pub tcpi_retrans: u_int32_t,
    pub tcpi_fackets: u_int32_t,
    pub tcpi_last_data_sent: u_int32_t,
    pub tcpi_last_ack_sent: u_int32_t,
    pub tcpi_last_data_recv: u_int32_t,
    pub tcpi_last_ack_recv: u_int32_t,
    pub tcpi_pmtu: u_int32_t,
    pub tcpi_rcv_ssthresh: u_int32_t,
    pub tcpi_rtt: u_int32_t,
    pub tcpi_rttvar: u_int32_t,
    pub tcpi_snd_ssthresh: u_int32_t,
    pub tcpi_snd_cwnd: u_int32_t,
    pub tcpi_advmss: u_int32_t,
    pub tcpi_reordering: u_int32_t,
    pub tcpi_rcv_rtt: u_int32_t,
    pub tcpi_rcv_space: u_int32_t,
    pub tcpi_total_retrans: u_int32_t,
}
#[test]
fn bindgen_test_layout_tcp_info() {
    assert_eq!(
        ::std::mem::size_of::<tcp_info>(),
        104usize,
        concat!("Size of: ", stringify!(tcp_info))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_info>(),
        4usize,
        concat!("Alignment of ", stringify!(tcp_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_ca_state as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_ca_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_retransmits as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_retransmits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_probes as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_probes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_backoff as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_backoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_options as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_rto as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_rto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_ato as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_ato)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_snd_mss as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_snd_mss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_rcv_mss as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_rcv_mss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_unacked as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_unacked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_sacked as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_sacked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_lost as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_lost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_retrans as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_retrans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_fackets as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_fackets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_last_data_sent as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_last_data_sent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_last_ack_sent as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_last_ack_sent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_last_data_recv as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_last_data_recv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_last_ack_recv as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_last_ack_recv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_pmtu as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_pmtu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_rcv_ssthresh as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_rcv_ssthresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_rtt as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_rtt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_rttvar as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_rttvar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_snd_ssthresh as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_snd_ssthresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_snd_cwnd as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_snd_cwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_advmss as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_advmss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_reordering as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_reordering)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_rcv_rtt as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_rcv_rtt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_rcv_space as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_rcv_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_info>())).tcpi_total_retrans as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_info),
            "::",
            stringify!(tcpi_total_retrans)
        )
    );
}
impl tcp_info {
    #[inline]
    pub fn tcpi_snd_wscale(&self) -> u_int8_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_tcpi_snd_wscale(&mut self, val: u_int8_t) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn tcpi_rcv_wscale(&self) -> u_int8_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_tcpi_rcv_wscale(&mut self, val: u_int8_t) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tcpi_snd_wscale: u_int8_t,
        tcpi_rcv_wscale: u_int8_t,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let tcpi_snd_wscale: u8 = unsafe { ::std::mem::transmute(tcpi_snd_wscale) };
            tcpi_snd_wscale as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let tcpi_rcv_wscale: u8 = unsafe { ::std::mem::transmute(tcpi_rcv_wscale) };
            tcpi_rcv_wscale as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tcp_md5sig {
    pub tcpm_addr: sockaddr_storage,
    pub __tcpm_pad1: u_int16_t,
    pub tcpm_keylen: u_int16_t,
    pub __tcpm_pad2: u_int32_t,
    pub tcpm_key: [u_int8_t; 80usize],
}
#[test]
fn bindgen_test_layout_tcp_md5sig() {
    assert_eq!(
        ::std::mem::size_of::<tcp_md5sig>(),
        216usize,
        concat!("Size of: ", stringify!(tcp_md5sig))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_md5sig>(),
        8usize,
        concat!("Alignment of ", stringify!(tcp_md5sig))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_md5sig>())).tcpm_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_md5sig),
            "::",
            stringify!(tcpm_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_md5sig>())).__tcpm_pad1 as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_md5sig),
            "::",
            stringify!(__tcpm_pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_md5sig>())).tcpm_keylen as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_md5sig),
            "::",
            stringify!(tcpm_keylen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_md5sig>())).__tcpm_pad2 as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_md5sig),
            "::",
            stringify!(__tcpm_pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_md5sig>())).tcpm_key as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_md5sig),
            "::",
            stringify!(tcpm_key)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_repair_opt {
    pub opt_code: u_int32_t,
    pub opt_val: u_int32_t,
}
#[test]
fn bindgen_test_layout_tcp_repair_opt() {
    assert_eq!(
        ::std::mem::size_of::<tcp_repair_opt>(),
        8usize,
        concat!("Size of: ", stringify!(tcp_repair_opt))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_repair_opt>(),
        4usize,
        concat!("Alignment of ", stringify!(tcp_repair_opt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_repair_opt>())).opt_code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_repair_opt),
            "::",
            stringify!(opt_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_repair_opt>())).opt_val as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_repair_opt),
            "::",
            stringify!(opt_val)
        )
    );
}
pub const TCP_NO_QUEUE: _bindgen_ty_10 = 0;
pub const TCP_RECV_QUEUE: _bindgen_ty_10 = 1;
pub const TCP_SEND_QUEUE: _bindgen_ty_10 = 2;
pub const TCP_QUEUES_NR: _bindgen_ty_10 = 3;
pub type _bindgen_ty_10 = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tcp_cookie_transactions {
    pub tcpct_flags: u_int16_t,
    pub __tcpct_pad1: u_int8_t,
    pub tcpct_cookie_desired: u_int8_t,
    pub tcpct_s_data_desired: u_int16_t,
    pub tcpct_used: u_int16_t,
    pub tcpct_value: [u_int8_t; 536usize],
}
#[test]
fn bindgen_test_layout_tcp_cookie_transactions() {
    assert_eq!(
        ::std::mem::size_of::<tcp_cookie_transactions>(),
        544usize,
        concat!("Size of: ", stringify!(tcp_cookie_transactions))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_cookie_transactions>(),
        2usize,
        concat!("Alignment of ", stringify!(tcp_cookie_transactions))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_cookie_transactions>())).tcpct_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_cookie_transactions),
            "::",
            stringify!(tcpct_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_cookie_transactions>())).__tcpct_pad1 as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_cookie_transactions),
            "::",
            stringify!(__tcpct_pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_cookie_transactions>())).tcpct_cookie_desired as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_cookie_transactions),
            "::",
            stringify!(tcpct_cookie_desired)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_cookie_transactions>())).tcpct_s_data_desired as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_cookie_transactions),
            "::",
            stringify!(tcpct_s_data_desired)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_cookie_transactions>())).tcpct_used as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_cookie_transactions),
            "::",
            stringify!(tcpct_used)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_cookie_transactions>())).tcpct_value as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_cookie_transactions),
            "::",
            stringify!(tcpct_value)
        )
    );
}
extern "C" {
    pub fn inet_addr(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_lnaof(__in: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_makeaddr(__net: in_addr_t, __host: in_addr_t) -> in_addr;
}
extern "C" {
    pub fn inet_netof(__in: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_network(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_ntoa(__in: in_addr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_pton(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_ntop(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __len: socklen_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_aton(
        __cp: *const ::std::os::raw::c_char,
        __inp: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_neta(
        __net: in_addr_t,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_ntop(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_void,
        __bits: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_pton(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_nsap_addr(
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_uchar,
        __len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn inet_nsap_ntoa(
        __len: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_uchar,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpcent {
    pub r_name: *mut ::std::os::raw::c_char,
    pub r_aliases: *mut *mut ::std::os::raw::c_char,
    pub r_number: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rpcent() {
    assert_eq!(
        ::std::mem::size_of::<rpcent>(),
        24usize,
        concat!("Size of: ", stringify!(rpcent))
    );
    assert_eq!(
        ::std::mem::align_of::<rpcent>(),
        8usize,
        concat!("Alignment of ", stringify!(rpcent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpcent>())).r_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpcent>())).r_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpcent>())).r_number as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_number)
        )
    );
}
extern "C" {
    pub fn setrpcent(__stayopen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endrpcent();
}
extern "C" {
    pub fn getrpcbyname(__name: *const ::std::os::raw::c_char) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbynumber(__number: ::std::os::raw::c_int) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcent() -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrpcbynumber_r(
        __number: ::std::os::raw::c_int,
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrpcent_r(
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: u32,
}
#[test]
fn bindgen_test_layout_netent() {
    assert_eq!(
        ::std::mem::size_of::<netent>(),
        24usize,
        concat!("Size of: ", stringify!(netent))
    );
    assert_eq!(
        ::std::mem::align_of::<netent>(),
        8usize,
        concat!("Alignment of ", stringify!(netent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_addrtype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_addrtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_net as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_net)
        )
    );
}
extern "C" {
    pub fn __h_errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn herror(__str: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn hstrerror(__err_num: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_hostent() {
    assert_eq!(
        ::std::mem::size_of::<hostent>(),
        32usize,
        concat!("Size of: ", stringify!(hostent))
    );
    assert_eq!(
        ::std::mem::align_of::<hostent>(),
        8usize,
        concat!("Alignment of ", stringify!(hostent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_addrtype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_addrtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_length as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_addr_list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_addr_list)
        )
    );
}
extern "C" {
    pub fn sethostent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endhostent();
}
extern "C" {
    pub fn gethostent() -> *mut hostent;
}
extern "C" {
    pub fn gethostbyaddr(
        __addr: *const ::std::os::raw::c_void,
        __len: __socklen_t,
        __type: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname(__name: *const ::std::os::raw::c_char) -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname2(
        __name: *const ::std::os::raw::c_char,
        __af: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn gethostent_r(
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyaddr_r(
        __addr: *const ::std::os::raw::c_void,
        __len: __socklen_t,
        __type: ::std::os::raw::c_int,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyname2_r(
        __name: *const ::std::os::raw::c_char,
        __af: ::std::os::raw::c_int,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setnetent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endnetent();
}
extern "C" {
    pub fn getnetent() -> *mut netent;
}
extern "C" {
    pub fn getnetbyaddr(__net: u32, __type: ::std::os::raw::c_int) -> *mut netent;
}
extern "C" {
    pub fn getnetbyname(__name: *const ::std::os::raw::c_char) -> *mut netent;
}
extern "C" {
    pub fn getnetent_r(
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyaddr_r(
        __net: u32,
        __type: ::std::os::raw::c_int,
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_servent() {
    assert_eq!(
        ::std::mem::size_of::<servent>(),
        32usize,
        concat!("Size of: ", stringify!(servent))
    );
    assert_eq!(
        ::std::mem::align_of::<servent>(),
        8usize,
        concat!("Alignment of ", stringify!(servent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_port as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_proto as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_proto)
        )
    );
}
extern "C" {
    pub fn setservent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endservent();
}
extern "C" {
    pub fn getservent() -> *mut servent;
}
extern "C" {
    pub fn getservbyname(
        __name: *const ::std::os::raw::c_char,
        __proto: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservbyport(
        __port: ::std::os::raw::c_int,
        __proto: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservent_r(
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getservbyname_r(
        __name: *const ::std::os::raw::c_char,
        __proto: *const ::std::os::raw::c_char,
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getservbyport_r(
        __port: ::std::os::raw::c_int,
        __proto: *const ::std::os::raw::c_char,
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_protoent() {
    assert_eq!(
        ::std::mem::size_of::<protoent>(),
        24usize,
        concat!("Size of: ", stringify!(protoent))
    );
    assert_eq!(
        ::std::mem::align_of::<protoent>(),
        8usize,
        concat!("Alignment of ", stringify!(protoent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<protoent>())).p_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<protoent>())).p_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<protoent>())).p_proto as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_proto)
        )
    );
}
extern "C" {
    pub fn setprotoent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endprotoent();
}
extern "C" {
    pub fn getprotoent() -> *mut protoent;
}
extern "C" {
    pub fn getprotobyname(__name: *const ::std::os::raw::c_char) -> *mut protoent;
}
extern "C" {
    pub fn getprotobynumber(__proto: ::std::os::raw::c_int) -> *mut protoent;
}
extern "C" {
    pub fn getprotoent_r(
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprotobyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprotobynumber_r(
        __proto: ::std::os::raw::c_int,
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setnetgrent(__netgroup: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endnetgrent();
}
extern "C" {
    pub fn getnetgrent(
        __hostp: *mut *mut ::std::os::raw::c_char,
        __userp: *mut *mut ::std::os::raw::c_char,
        __domainp: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn innetgr(
        __netgroup: *const ::std::os::raw::c_char,
        __host: *const ::std::os::raw::c_char,
        __user: *const ::std::os::raw::c_char,
        __domain: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetgrent_r(
        __hostp: *mut *mut ::std::os::raw::c_char,
        __userp: *mut *mut ::std::os::raw::c_char,
        __domainp: *mut *mut ::std::os::raw::c_char,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_ushort,
        __locuser: *const ::std::os::raw::c_char,
        __remuser: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_ushort,
        __locuser: *const ::std::os::raw::c_char,
        __remuser: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rexec(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __pass: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rexec_af(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __pass: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(
        __rhost: *const ::std::os::raw::c_char,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok_af(
        __rhost: *const ::std::os::raw::c_char,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(
        __raddr: u32,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_af(
        __raddr: *const ::std::os::raw::c_void,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(__alport: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(
        __alport: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_addr: *mut sockaddr,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_next: *mut addrinfo,
}
#[test]
fn bindgen_test_layout_addrinfo() {
    assert_eq!(
        ::std::mem::size_of::<addrinfo>(),
        48usize,
        concat!("Size of: ", stringify!(addrinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<addrinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(addrinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_family as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_socktype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_socktype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_protocol as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_addrlen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_addrlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_canonname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_canonname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_next as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_next)
        )
    );
}
extern "C" {
    pub fn getaddrinfo(
        __name: *const ::std::os::raw::c_char,
        __service: *const ::std::os::raw::c_char,
        __req: *const addrinfo,
        __pai: *mut *mut addrinfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freeaddrinfo(__ai: *mut addrinfo);
}
extern "C" {
    pub fn gai_strerror(__ecode: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn getnameinfo(
        __sa: *const sockaddr,
        __salen: socklen_t,
        __host: *mut ::std::os::raw::c_char,
        __hostlen: socklen_t,
        __serv: *mut ::std::os::raw::c_char,
        __servlen: socklen_t,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type useconds_t = __useconds_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
    ) -> isize;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> isize;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(__buf: *mut ::std::os::raw::c_char, __size: usize)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__environ"]
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *const ::std::os::raw::c_char,
        __envp: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *const ::std::os::raw::c_char,
        __envp: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int);
}
pub const _PC_LINK_MAX: _bindgen_ty_11 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_11 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_11 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_11 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_11 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_11 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_11 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_11 = 7;
pub const _PC_VDISABLE: _bindgen_ty_11 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_11 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_11 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_11 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_11 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_11 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_11 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_11 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_11 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_11 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_11 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_11 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_11 = 20;
pub type _bindgen_ty_11 = u32;
pub const _SC_ARG_MAX: _bindgen_ty_12 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_12 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_12 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_12 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_12 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_12 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_12 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_12 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_12 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_12 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_12 = 10;
pub const _SC_TIMERS: _bindgen_ty_12 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_12 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_12 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_12 = 14;
pub const _SC_FSYNC: _bindgen_ty_12 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_12 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_12 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_12 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_12 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_12 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_12 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_12 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_12 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_12 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_12 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_12 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_12 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_12 = 28;
pub const _SC_VERSION: _bindgen_ty_12 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_12 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_12 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_12 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_12 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_12 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_12 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_12 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_12 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_12 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_12 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_12 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_12 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_12 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_12 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_12 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_12 = 45;
pub const _SC_2_VERSION: _bindgen_ty_12 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_12 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_12 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_12 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_12 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_12 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_12 = 52;
pub const _SC_PII: _bindgen_ty_12 = 53;
pub const _SC_PII_XTI: _bindgen_ty_12 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_12 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_12 = 56;
pub const _SC_PII_OSI: _bindgen_ty_12 = 57;
pub const _SC_POLL: _bindgen_ty_12 = 58;
pub const _SC_SELECT: _bindgen_ty_12 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_12 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_12 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_12 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_12 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_12 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_12 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_12 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_12 = 66;
pub const _SC_THREADS: _bindgen_ty_12 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_12 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_12 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_12 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_12 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_12 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_12 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_12 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_12 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_12 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_12 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_12 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_12 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_12 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_12 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_12 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_12 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_12 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_12 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_12 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_12 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_12 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_12 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_12 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_12 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_12 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_12 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_12 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_12 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_12 = 96;
pub const _SC_2_UPE: _bindgen_ty_12 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_12 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_12 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_12 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_12 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_12 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_12 = 103;
pub const _SC_INT_MAX: _bindgen_ty_12 = 104;
pub const _SC_INT_MIN: _bindgen_ty_12 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_12 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_12 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_12 = 108;
pub const _SC_NZERO: _bindgen_ty_12 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_12 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_12 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_12 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_12 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_12 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_12 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_12 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_12 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_12 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_12 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_12 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_12 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_12 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_12 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_12 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_12 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_12 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_12 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_12 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_12 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_12 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_12 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_12 = 132;
pub const _SC_BARRIERS: _bindgen_ty_12 = 133;
pub const _SC_BASE: _bindgen_ty_12 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_12 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_12 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_12 = 137;
pub const _SC_CPUTIME: _bindgen_ty_12 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_12 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_12 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_12 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_12 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_12 = 143;
pub const _SC_FIFO: _bindgen_ty_12 = 144;
pub const _SC_PIPE: _bindgen_ty_12 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_12 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_12 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_12 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_12 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_12 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_12 = 151;
pub const _SC_NETWORKING: _bindgen_ty_12 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_12 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_12 = 154;
pub const _SC_REGEXP: _bindgen_ty_12 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_12 = 156;
pub const _SC_SHELL: _bindgen_ty_12 = 157;
pub const _SC_SIGNALS: _bindgen_ty_12 = 158;
pub const _SC_SPAWN: _bindgen_ty_12 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_12 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_12 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_12 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_12 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_12 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_12 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_12 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_12 = 167;
pub const _SC_2_PBS: _bindgen_ty_12 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_12 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_12 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_12 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_12 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_12 = 173;
pub const _SC_STREAMS: _bindgen_ty_12 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_12 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_12 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_12 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_12 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_12 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_12 = 180;
pub const _SC_TRACE: _bindgen_ty_12 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_12 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_12 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_12 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_12 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_12 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_12 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_12 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_12 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_12 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_12 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_12 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_12 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_12 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_12 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_12 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_12 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_12 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_12 = 199;
pub const _SC_IPV6: _bindgen_ty_12 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_12 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_12 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_12 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_12 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_12 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_12 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_12 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_12 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_12 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_12 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_12 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_12 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_12 = 248;
pub type _bindgen_ty_12 = u32;
pub const _CS_PATH: _bindgen_ty_13 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_13 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_13 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_13 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_13 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_13 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_13 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_13 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_13 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_13 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_13 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_13 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_13 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_13 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_13 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_13 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_13 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_13 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_13 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_13 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_13 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_13 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_13 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_13 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_13 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_13 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_13 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_13 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_13 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_13 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_13 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_13 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_13 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_13 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_13 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_13 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_13 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_13 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_13 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_13 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_13 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_13 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_13 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_13 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_13 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_13 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_13 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_13 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_13 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_13 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_13 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_13 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_13 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_13 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_13 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_13 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_13 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_13 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_13 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_13 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_13 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_13 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_13 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_13 = 1149;
pub type _bindgen_ty_13 = u32;
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> usize;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}optarg"]
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}optind"]
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}opterr"]
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}optopt"]
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *const ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: usize,
        __offset: usize,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        32usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_whence as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_pid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__pad0 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blksize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blocks as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_atim as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mtim as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ctim as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__glibc_reserved as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
extern "C" {
    pub fn fcntl(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open(
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(__file: *const ::std::os::raw::c_char, __mode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fadvise(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fallocate(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union soap_double_nan {
    pub iv: soap_double_nan__bindgen_ty_1,
    pub dv: f64,
    pub fv: f32,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soap_double_nan__bindgen_ty_1 {
    pub n1: ::std::os::raw::c_uint,
    pub n2: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_soap_double_nan__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<soap_double_nan__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(soap_double_nan__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<soap_double_nan__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(soap_double_nan__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<soap_double_nan__bindgen_ty_1>())).n1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_double_nan__bindgen_ty_1),
            "::",
            stringify!(n1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<soap_double_nan__bindgen_ty_1>())).n2 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_double_nan__bindgen_ty_1),
            "::",
            stringify!(n2)
        )
    );
}
#[test]
fn bindgen_test_layout_soap_double_nan() {
    assert_eq!(
        ::std::mem::size_of::<soap_double_nan>(),
        8usize,
        concat!("Size of: ", stringify!(soap_double_nan))
    );
    assert_eq!(
        ::std::mem::align_of::<soap_double_nan>(),
        8usize,
        concat!("Alignment of ", stringify!(soap_double_nan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_double_nan>())).iv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_double_nan),
            "::",
            stringify!(iv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_double_nan>())).dv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_double_nan),
            "::",
            stringify!(dv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_double_nan>())).fv as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_double_nan),
            "::",
            stringify!(fv)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}soap_double_nan"]
    pub static mut soap_double_nan: soap_double_nan;
}
extern "C" {
    #[link_name = "\u{1}soap_base64o"]
    pub static mut soap_base64o: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "\u{1}soap_base64i"]
    pub static mut soap_base64i: [::std::os::raw::c_char; 0usize];
}
pub type soap_status = i32;
pub type soap_mode = i32;
pub type soap_wchar = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Namespace {
    pub id: *const ::std::os::raw::c_char,
    pub ns: *const ::std::os::raw::c_char,
    pub in_: *const ::std::os::raw::c_char,
    pub out: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_Namespace() {
    assert_eq!(
        ::std::mem::size_of::<Namespace>(),
        32usize,
        concat!("Size of: ", stringify!(Namespace))
    );
    assert_eq!(
        ::std::mem::align_of::<Namespace>(),
        8usize,
        concat!("Alignment of ", stringify!(Namespace))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Namespace>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Namespace),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Namespace>())).ns as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Namespace),
            "::",
            stringify!(ns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Namespace>())).in_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Namespace),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Namespace>())).out as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Namespace),
            "::",
            stringify!(out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soap_nlist {
    pub next: *mut soap_nlist,
    pub level: ::std::os::raw::c_uint,
    pub index: ::std::os::raw::c_short,
    pub ns: *const ::std::os::raw::c_char,
    pub id: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout_soap_nlist() {
    assert_eq!(
        ::std::mem::size_of::<soap_nlist>(),
        32usize,
        concat!("Size of: ", stringify!(soap_nlist))
    );
    assert_eq!(
        ::std::mem::align_of::<soap_nlist>(),
        8usize,
        concat!("Alignment of ", stringify!(soap_nlist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_nlist>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_nlist),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_nlist>())).level as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_nlist),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_nlist>())).index as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_nlist),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_nlist>())).ns as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_nlist),
            "::",
            stringify!(ns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_nlist>())).id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_nlist),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soap_bhead {
    pub next: *mut soap_bhead,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_soap_bhead() {
    assert_eq!(
        ::std::mem::size_of::<soap_bhead>(),
        16usize,
        concat!("Size of: ", stringify!(soap_bhead))
    );
    assert_eq!(
        ::std::mem::align_of::<soap_bhead>(),
        8usize,
        concat!("Alignment of ", stringify!(soap_bhead))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_bhead>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_bhead),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_bhead>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_bhead),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soap_blist {
    pub next: *mut soap_blist,
    pub head: *mut soap_bhead,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_soap_blist() {
    assert_eq!(
        ::std::mem::size_of::<soap_blist>(),
        24usize,
        concat!("Size of: ", stringify!(soap_blist))
    );
    assert_eq!(
        ::std::mem::align_of::<soap_blist>(),
        8usize,
        concat!("Alignment of ", stringify!(soap_blist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_blist>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_blist),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_blist>())).head as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_blist),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_blist>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_blist),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soap_plist {
    pub next: *mut soap_plist,
    pub ptr: *const ::std::os::raw::c_void,
    pub dup: *mut ::std::os::raw::c_void,
    pub array: *const ::std::os::raw::c_void,
    pub size: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub id: ::std::os::raw::c_int,
    pub mark1: ::std::os::raw::c_char,
    pub mark2: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_soap_plist() {
    assert_eq!(
        ::std::mem::size_of::<soap_plist>(),
        48usize,
        concat!("Size of: ", stringify!(soap_plist))
    );
    assert_eq!(
        ::std::mem::align_of::<soap_plist>(),
        8usize,
        concat!("Alignment of ", stringify!(soap_plist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_plist>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_plist),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_plist>())).ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_plist),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_plist>())).dup as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_plist),
            "::",
            stringify!(dup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_plist>())).array as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_plist),
            "::",
            stringify!(array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_plist>())).size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_plist),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_plist>())).type_ as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_plist),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_plist>())).id as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_plist),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_plist>())).mark1 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_plist),
            "::",
            stringify!(mark1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_plist>())).mark2 as *const _ as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_plist),
            "::",
            stringify!(mark2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soap_pblk {
    pub next: *mut soap_pblk,
    pub plist: [soap_plist; 32usize],
}
#[test]
fn bindgen_test_layout_soap_pblk() {
    assert_eq!(
        ::std::mem::size_of::<soap_pblk>(),
        1544usize,
        concat!("Size of: ", stringify!(soap_pblk))
    );
    assert_eq!(
        ::std::mem::align_of::<soap_pblk>(),
        8usize,
        concat!("Alignment of ", stringify!(soap_pblk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_pblk>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_pblk),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_pblk>())).plist as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_pblk),
            "::",
            stringify!(plist)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soap_clist {
    pub next: *mut soap_clist,
    pub ptr: *mut ::std::os::raw::c_void,
    pub type_: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub fdelete:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut soap_clist) -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_soap_clist() {
    assert_eq!(
        ::std::mem::size_of::<soap_clist>(),
        32usize,
        concat!("Size of: ", stringify!(soap_clist))
    );
    assert_eq!(
        ::std::mem::align_of::<soap_clist>(),
        8usize,
        concat!("Alignment of ", stringify!(soap_clist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_clist>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_clist),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_clist>())).ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_clist),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_clist>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_clist),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_clist>())).size as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_clist),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_clist>())).fdelete as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_clist),
            "::",
            stringify!(fdelete)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soap_attribute {
    pub next: *mut soap_attribute,
    pub flag: ::std::os::raw::c_short,
    pub value: *mut ::std::os::raw::c_char,
    pub size: usize,
    pub ns: *const ::std::os::raw::c_char,
    pub visible: ::std::os::raw::c_short,
    pub name: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout_soap_attribute() {
    assert_eq!(
        ::std::mem::size_of::<soap_attribute>(),
        48usize,
        concat!("Size of: ", stringify!(soap_attribute))
    );
    assert_eq!(
        ::std::mem::align_of::<soap_attribute>(),
        8usize,
        concat!("Alignment of ", stringify!(soap_attribute))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_attribute>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_attribute),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_attribute>())).flag as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_attribute),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_attribute>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_attribute),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_attribute>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_attribute),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_attribute>())).ns as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_attribute),
            "::",
            stringify!(ns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_attribute>())).visible as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_attribute),
            "::",
            stringify!(visible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_attribute>())).name as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_attribute),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soap_cookie {
    pub next: *mut soap_cookie,
    pub name: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
    pub domain: *mut ::std::os::raw::c_char,
    pub path: *mut ::std::os::raw::c_char,
    pub expire: time_t,
    pub maxage: ::std::os::raw::c_long,
    pub version: ::std::os::raw::c_uint,
    pub secure: ::std::os::raw::c_short,
    pub session: ::std::os::raw::c_short,
    pub env: ::std::os::raw::c_short,
    pub modified: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_soap_cookie() {
    assert_eq!(
        ::std::mem::size_of::<soap_cookie>(),
        72usize,
        concat!("Size of: ", stringify!(soap_cookie))
    );
    assert_eq!(
        ::std::mem::align_of::<soap_cookie>(),
        8usize,
        concat!("Alignment of ", stringify!(soap_cookie))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_cookie>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_cookie),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_cookie>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_cookie),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_cookie>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_cookie),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_cookie>())).domain as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_cookie),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_cookie>())).path as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_cookie),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_cookie>())).expire as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_cookie),
            "::",
            stringify!(expire)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_cookie>())).maxage as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_cookie),
            "::",
            stringify!(maxage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_cookie>())).version as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_cookie),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_cookie>())).secure as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_cookie),
            "::",
            stringify!(secure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_cookie>())).session as *const _ as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_cookie),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_cookie>())).env as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_cookie),
            "::",
            stringify!(env)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_cookie>())).modified as *const _ as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_cookie),
            "::",
            stringify!(modified)
        )
    );
}
extern "C" {
    pub fn soap_next_multipart(arg1: *mut soap_multipart) -> *mut soap_multipart;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soap_dime {
    pub count: usize,
    pub size: usize,
    pub chunksize: usize,
    pub buflen: usize,
    pub flags: ::std::os::raw::c_char,
    pub ptr: *mut ::std::os::raw::c_char,
    pub id: *const ::std::os::raw::c_char,
    pub type_: *const ::std::os::raw::c_char,
    pub options: *const ::std::os::raw::c_char,
    pub list: *mut soap_multipart,
    pub first: *mut soap_multipart,
    pub last: *mut soap_multipart,
}
#[test]
fn bindgen_test_layout_soap_dime() {
    assert_eq!(
        ::std::mem::size_of::<soap_dime>(),
        96usize,
        concat!("Size of: ", stringify!(soap_dime))
    );
    assert_eq!(
        ::std::mem::align_of::<soap_dime>(),
        8usize,
        concat!("Alignment of ", stringify!(soap_dime))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dime>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dime),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dime>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dime),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dime>())).chunksize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dime),
            "::",
            stringify!(chunksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dime>())).buflen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dime),
            "::",
            stringify!(buflen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dime>())).flags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dime),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dime>())).ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dime),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dime>())).id as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dime),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dime>())).type_ as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dime),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dime>())).options as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dime),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dime>())).list as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dime),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dime>())).first as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dime),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dime>())).last as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dime),
            "::",
            stringify!(last)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soap_mime {
    pub boundary: *mut ::std::os::raw::c_char,
    pub start: *const ::std::os::raw::c_char,
    pub list: *mut soap_multipart,
    pub first: *mut soap_multipart,
    pub last: *mut soap_multipart,
}
#[test]
fn bindgen_test_layout_soap_mime() {
    assert_eq!(
        ::std::mem::size_of::<soap_mime>(),
        40usize,
        concat!("Size of: ", stringify!(soap_mime))
    );
    assert_eq!(
        ::std::mem::align_of::<soap_mime>(),
        8usize,
        concat!("Alignment of ", stringify!(soap_mime))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_mime>())).boundary as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_mime),
            "::",
            stringify!(boundary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_mime>())).start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_mime),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_mime>())).list as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_mime),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_mime>())).first as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_mime),
            "::",
            stringify!(first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_mime>())).last as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_mime),
            "::",
            stringify!(last)
        )
    );
}
pub const soap_mime_encoding_SOAP_MIME_NONE: soap_mime_encoding = 0;
pub const soap_mime_encoding_SOAP_MIME_7BIT: soap_mime_encoding = 1;
pub const soap_mime_encoding_SOAP_MIME_8BIT: soap_mime_encoding = 2;
pub const soap_mime_encoding_SOAP_MIME_BINARY: soap_mime_encoding = 3;
pub const soap_mime_encoding_SOAP_MIME_QUOTED_PRINTABLE: soap_mime_encoding = 4;
pub const soap_mime_encoding_SOAP_MIME_BASE64: soap_mime_encoding = 5;
pub const soap_mime_encoding_SOAP_MIME_IETF_TOKEN: soap_mime_encoding = 6;
pub const soap_mime_encoding_SOAP_MIME_X_TOKEN: soap_mime_encoding = 7;
pub type soap_mime_encoding = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soap_multipart {
    pub next: *mut soap_multipart,
    pub ptr: *mut ::std::os::raw::c_char,
    pub size: usize,
    pub id: *const ::std::os::raw::c_char,
    pub type_: *const ::std::os::raw::c_char,
    pub options: *const ::std::os::raw::c_char,
    pub encoding: soap_mime_encoding,
    pub location: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_soap_multipart() {
    assert_eq!(
        ::std::mem::size_of::<soap_multipart>(),
        72usize,
        concat!("Size of: ", stringify!(soap_multipart))
    );
    assert_eq!(
        ::std::mem::align_of::<soap_multipart>(),
        8usize,
        concat!("Alignment of ", stringify!(soap_multipart))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_multipart>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_multipart),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_multipart>())).ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_multipart),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_multipart>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_multipart),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_multipart>())).id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_multipart),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_multipart>())).type_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_multipart),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_multipart>())).options as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_multipart),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_multipart>())).encoding as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_multipart),
            "::",
            stringify!(encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_multipart>())).location as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_multipart),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_multipart>())).description as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_multipart),
            "::",
            stringify!(description)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soap_xlist {
    pub next: *mut soap_xlist,
    pub ptr: *mut *mut ::std::os::raw::c_uchar,
    pub size: *mut ::std::os::raw::c_int,
    pub id: *mut ::std::os::raw::c_char,
    pub type_: *mut *mut ::std::os::raw::c_char,
    pub options: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_soap_xlist() {
    assert_eq!(
        ::std::mem::size_of::<soap_xlist>(),
        48usize,
        concat!("Size of: ", stringify!(soap_xlist))
    );
    assert_eq!(
        ::std::mem::align_of::<soap_xlist>(),
        8usize,
        concat!("Alignment of ", stringify!(soap_xlist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_xlist>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_xlist),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_xlist>())).ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_xlist),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_xlist>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_xlist),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_xlist>())).id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_xlist),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_xlist>())).type_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_xlist),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_xlist>())).options as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_xlist),
            "::",
            stringify!(options)
        )
    );
}
extern "C" {
    pub fn soap_elt_new(
        soap: *mut soap,
        ns: *const ::std::os::raw::c_char,
        tag: *const ::std::os::raw::c_char,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_elt_new_w(
        soap: *mut soap,
        ns: *const ::std::os::raw::c_char,
        tag: *const wchar_t,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_elt_set(
        elt: *mut soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        tag: *const ::std::os::raw::c_char,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_elt_set_w(
        elt: *mut soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        tag: *const wchar_t,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_att(
        elt: *mut soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        tag: *const ::std::os::raw::c_char,
    ) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_att_w(
        elt: *mut soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        tag: *const wchar_t,
    ) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_elt(
        elt: *mut soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        tag: *const ::std::os::raw::c_char,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_elt_w(
        elt: *mut soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        tag: *const wchar_t,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_nth_elt(
        elt: *mut soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        tag: *const ::std::os::raw::c_char,
        n: usize,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_nth_elt_w(
        elt: *mut soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        tag: *const wchar_t,
        n: usize,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_nth(elt: *mut soap_dom_element, n: usize) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_add_att(
        elt: *mut soap_dom_element,
        node: *const soap_dom_attribute,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_add_elt(
        elt: *mut soap_dom_element,
        node: *const soap_dom_element,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_add_atts(
        elt: *mut soap_dom_element,
        atts: *const soap_dom_attribute,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_add_elts(
        elt: *mut soap_dom_element,
        elts: *const soap_dom_element,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_elt_bool(elt: *mut soap_dom_element, b: i64) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_elt_int(elt: *mut soap_dom_element, n: i64) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_elt_double(elt: *mut soap_dom_element, x: f64) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_elt_text(
        elt: *mut soap_dom_element,
        text: *const ::std::os::raw::c_char,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_elt_text_w(
        elt: *mut soap_dom_element,
        text: *const wchar_t,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_elt_node(
        elt: *mut soap_dom_element,
        node: *const ::std::os::raw::c_void,
        type_: ::std::os::raw::c_int,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_elt_copy(
        elt: *mut soap_dom_element,
        node: *const soap_dom_element,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_elt_match(
        elt: *const soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        patt: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_elt_match_w(
        elt: *const soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        patt: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_elt_get_ns(elt: *const soap_dom_element) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_elt_get_tag(elt: *const soap_dom_element) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_elt_is_true(elt: *const soap_dom_element) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_elt_is_false(elt: *const soap_dom_element) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_elt_get_int(elt: *const soap_dom_element) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_elt_get_long(elt: *const soap_dom_element) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn soap_elt_get_LONG64(elt: *const soap_dom_element) -> i64;
}
extern "C" {
    pub fn soap_elt_get_double(elt: *const soap_dom_element) -> f64;
}
extern "C" {
    pub fn soap_elt_get_text(elt: *const soap_dom_element) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_elt_get_node(
        elt: *const soap_dom_element,
        type_: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn soap_elt_get_type(
        elt: *const soap_dom_element,
        node: *mut *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_elt_parent(elt: *const soap_dom_element) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_elt_depth(elt: *const soap_dom_element) -> usize;
}
extern "C" {
    pub fn soap_elt_index(elt: *const soap_dom_element) -> usize;
}
extern "C" {
    pub fn soap_elt_len(elt: *const soap_dom_element) -> usize;
}
extern "C" {
    pub fn soap_elt_nth(elt: *const soap_dom_element) -> usize;
}
extern "C" {
    pub fn soap_att_new(
        soap: *mut soap,
        ns: *const ::std::os::raw::c_char,
        tag: *const ::std::os::raw::c_char,
    ) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_att_new_w(
        soap: *mut soap,
        ns: *const ::std::os::raw::c_char,
        tag: *const wchar_t,
    ) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_att_set(
        att: *mut soap_dom_attribute,
        ns: *const ::std::os::raw::c_char,
        tag: *const ::std::os::raw::c_char,
    ) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_att_set_w(
        att: *mut soap_dom_attribute,
        ns: *const ::std::os::raw::c_char,
        tag: *const wchar_t,
    ) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_att_add(
        att: *mut soap_dom_attribute,
        ns: *const ::std::os::raw::c_char,
        tag: *const ::std::os::raw::c_char,
    ) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_att_add_w(
        att: *mut soap_dom_attribute,
        ns: *const ::std::os::raw::c_char,
        tag: *const wchar_t,
    ) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_att_bool(att: *mut soap_dom_attribute, b: i64) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_att_int(att: *mut soap_dom_attribute, n: i64) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_att_double(att: *mut soap_dom_attribute, x: f64) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_att_text(
        att: *mut soap_dom_attribute,
        text: *const ::std::os::raw::c_char,
    ) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_att_text_w(
        att: *mut soap_dom_attribute,
        text: *const wchar_t,
    ) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_att_copy(
        att: *mut soap_dom_attribute,
        node: *const soap_dom_attribute,
    ) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_att_match(
        att: *const soap_dom_attribute,
        ns: *const ::std::os::raw::c_char,
        patt: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_att_match_w(
        att: *const soap_dom_attribute,
        ns: *const ::std::os::raw::c_char,
        patt: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_att_get_ns(att: *const soap_dom_attribute) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_att_get_tag(att: *const soap_dom_attribute) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_att_is_true(att: *const soap_dom_attribute) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_att_is_false(att: *const soap_dom_attribute) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_att_get_int(att: *const soap_dom_attribute) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_att_get_long(att: *const soap_dom_attribute) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn soap_att_get_LONG64(att: *const soap_dom_attribute) -> i64;
}
extern "C" {
    pub fn soap_att_get_double(att: *const soap_dom_attribute) -> f64;
}
extern "C" {
    pub fn soap_att_get_text(att: *const soap_dom_attribute) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_att_first(elt: *mut soap_dom_element) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_att_next(att: *const soap_dom_attribute) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_elt_first(elt: *mut soap_dom_element) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_elt_next(elt: *const soap_dom_element) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_att_get(
        elt: *const soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        tag: *const ::std::os::raw::c_char,
    ) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_att_get_w(
        elt: *const soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        tag: *const wchar_t,
    ) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_elt_get(
        elt: *const soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        tag: *const ::std::os::raw::c_char,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_elt_get_w(
        elt: *const soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        tag: *const wchar_t,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_elt_get_next(elt: *const soap_dom_element) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_elt_get_nth(elt: *mut soap_dom_element, n: usize) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_att_find(
        elt: *mut soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        patt: *const ::std::os::raw::c_char,
    ) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_att_find_next(
        att: *const soap_dom_attribute,
        ns: *const ::std::os::raw::c_char,
        patt: *const ::std::os::raw::c_char,
    ) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_elt_find(
        elt: *mut soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        patt: *const ::std::os::raw::c_char,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_elt_find_next(
        elt: *const soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        patt: *const ::std::os::raw::c_char,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_elt_find_type(
        elt: *mut soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        patt: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_elt_find_next_type(
        elt: *const soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        patt: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_att_size(
        elt: *mut soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        patt: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn soap_elt_size(
        elt: *mut soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        patt: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn soap_elt_size_type(
        elt: *mut soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        patt: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> usize;
}
extern "C" {
    pub fn soap_dom_next_attribute(att: *const soap_dom_attribute) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_dom_next_element(
        elt: *const soap_dom_element,
        end: *const soap_dom_element,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_dom_find(
        begin: *mut soap_dom_element,
        end: *const soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        patt: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_dom_find_next(
        elt: *const soap_dom_element,
        end: *const soap_dom_element,
        ns: *const ::std::os::raw::c_char,
        patt: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> *mut soap_dom_element;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soap_dom_attribute {
    pub next: *mut soap_dom_attribute,
    pub nstr: *const ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub text: *const ::std::os::raw::c_char,
    pub soap: *mut soap,
}
#[test]
fn bindgen_test_layout_soap_dom_attribute() {
    assert_eq!(
        ::std::mem::size_of::<soap_dom_attribute>(),
        40usize,
        concat!("Size of: ", stringify!(soap_dom_attribute))
    );
    assert_eq!(
        ::std::mem::align_of::<soap_dom_attribute>(),
        8usize,
        concat!("Alignment of ", stringify!(soap_dom_attribute))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dom_attribute>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dom_attribute),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dom_attribute>())).nstr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dom_attribute),
            "::",
            stringify!(nstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dom_attribute>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dom_attribute),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dom_attribute>())).text as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dom_attribute),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dom_attribute>())).soap as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dom_attribute),
            "::",
            stringify!(soap)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soap_dom_element {
    pub next: *mut soap_dom_element,
    pub prnt: *mut soap_dom_element,
    pub elts: *mut soap_dom_element,
    pub atts: *mut soap_dom_attribute,
    pub nstr: *const ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub lead: *const ::std::os::raw::c_char,
    pub text: *const ::std::os::raw::c_char,
    pub code: *const ::std::os::raw::c_char,
    pub tail: *const ::std::os::raw::c_char,
    pub node: *const ::std::os::raw::c_void,
    pub type_: ::std::os::raw::c_int,
    pub soap: *mut soap,
}
#[test]
fn bindgen_test_layout_soap_dom_element() {
    assert_eq!(
        ::std::mem::size_of::<soap_dom_element>(),
        104usize,
        concat!("Size of: ", stringify!(soap_dom_element))
    );
    assert_eq!(
        ::std::mem::align_of::<soap_dom_element>(),
        8usize,
        concat!("Alignment of ", stringify!(soap_dom_element))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dom_element>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dom_element),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dom_element>())).prnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dom_element),
            "::",
            stringify!(prnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dom_element>())).elts as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dom_element),
            "::",
            stringify!(elts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dom_element>())).atts as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dom_element),
            "::",
            stringify!(atts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dom_element>())).nstr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dom_element),
            "::",
            stringify!(nstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dom_element>())).name as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dom_element),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dom_element>())).lead as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dom_element),
            "::",
            stringify!(lead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dom_element>())).text as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dom_element),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dom_element>())).code as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dom_element),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dom_element>())).tail as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dom_element),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dom_element>())).node as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dom_element),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dom_element>())).type_ as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dom_element),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_dom_element>())).soap as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_dom_element),
            "::",
            stringify!(soap)
        )
    );
}
extern "C" {
    pub fn soap_dup_xsd__anyType(
        soap: *mut soap,
        d: *mut soap_dom_element,
        a: *const soap_dom_element,
    ) -> *mut soap_dom_element;
}
extern "C" {
    pub fn soap_del_xsd__anyType(a: *const soap_dom_element);
}
extern "C" {
    pub fn soap_dup_xsd__anyAttribute(
        soap: *mut soap,
        d: *mut soap_dom_attribute,
        a: *const soap_dom_attribute,
    ) -> *mut soap_dom_attribute;
}
extern "C" {
    pub fn soap_del_xsd__anyAttribute(a: *const soap_dom_attribute);
}
extern "C" {
    pub fn soap_dom_call(
        soap: *mut soap,
        endpoint: *const ::std::os::raw::c_char,
        action: *const ::std::os::raw::c_char,
        in_: *const soap_dom_element,
        out: *mut soap_dom_element,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct soap {
    pub state: ::std::os::raw::c_short,
    pub version: ::std::os::raw::c_short,
    pub mode: soap_mode,
    pub imode: soap_mode,
    pub omode: soap_mode,
    pub float_format: *const ::std::os::raw::c_char,
    pub double_format: *const ::std::os::raw::c_char,
    pub long_double_format: *const ::std::os::raw::c_char,
    pub dime_id_format: *const ::std::os::raw::c_char,
    pub http_version: *const ::std::os::raw::c_char,
    pub http_content: *const ::std::os::raw::c_char,
    pub encodingStyle: *const ::std::os::raw::c_char,
    pub actor: *const ::std::os::raw::c_char,
    pub lang: *const ::std::os::raw::c_char,
    pub recv_timeout: ::std::os::raw::c_int,
    pub send_timeout: ::std::os::raw::c_int,
    pub connect_timeout: ::std::os::raw::c_int,
    pub accept_timeout: ::std::os::raw::c_int,
    pub socket_flags: ::std::os::raw::c_int,
    pub connect_flags: ::std::os::raw::c_int,
    pub bind_flags: ::std::os::raw::c_int,
    pub accept_flags: ::std::os::raw::c_int,
    pub linger_time: ::std::os::raw::c_ushort,
    pub namespaces: *const Namespace,
    pub local_namespaces: *mut Namespace,
    pub nlist: *mut soap_nlist,
    pub blist: *mut soap_blist,
    pub clist: *mut soap_clist,
    pub alist: *mut ::std::os::raw::c_void,
    pub shaky: ::std::os::raw::c_short,
    pub iht: [*mut soap_ilist; 1999usize],
    pub pht: [*mut soap_plist; 4096usize],
    pub pblk: *mut soap_pblk,
    pub pidx: ::std::os::raw::c_short,
    pub header: *mut SOAP_ENV__Header,
    pub fault: *mut SOAP_ENV__Fault,
    pub idnum: ::std::os::raw::c_int,
    pub user: *mut ::std::os::raw::c_void,
    pub data: [*mut ::std::os::raw::c_void; 4usize],
    pub plugins: *mut soap_plugin,
    pub userid: *const ::std::os::raw::c_char,
    pub passwd: *const ::std::os::raw::c_char,
    pub authrealm: *const ::std::os::raw::c_char,
    pub ntlm_challenge: *const ::std::os::raw::c_char,
    pub ntlm_auth: ::std::os::raw::c_short,
    pub ntlm_stage: ::std::os::raw::c_short,
    pub fpost: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
            arg4: ::std::os::raw::c_int,
            arg5: *const ::std::os::raw::c_char,
            arg6: *const ::std::os::raw::c_char,
            arg7: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub fget: ::std::option::Option<unsafe extern "C" fn(arg1: *mut soap) -> ::std::os::raw::c_int>,
    pub fput: ::std::option::Option<unsafe extern "C" fn(arg1: *mut soap) -> ::std::os::raw::c_int>,
    pub fdel: ::std::option::Option<unsafe extern "C" fn(arg1: *mut soap) -> ::std::os::raw::c_int>,
    pub fopt: ::std::option::Option<unsafe extern "C" fn(arg1: *mut soap) -> ::std::os::raw::c_int>,
    pub fhead:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut soap) -> ::std::os::raw::c_int>,
    pub fform:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut soap) -> ::std::os::raw::c_int>,
    pub fposthdr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub fresponse: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut soap, arg2: ::std::os::raw::c_int, arg3: usize)
            -> ::std::os::raw::c_int,
    >,
    pub fparse:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut soap) -> ::std::os::raw::c_int>,
    pub fparsehdr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub fheader:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut soap) -> ::std::os::raw::c_int>,
    pub fresolve: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: *const ::std::os::raw::c_char,
            inaddr: *mut in_addr,
        ) -> ::std::os::raw::c_int,
    >,
    pub fconnect: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
            arg4: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub fdisconnect:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut soap) -> ::std::os::raw::c_int>,
    pub fclosesocket: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut soap, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub fshutdownsocket: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub fopen: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
            arg4: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub faccept: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: ::std::os::raw::c_int,
            arg3: *mut sockaddr,
            n: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub fclose:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut soap) -> ::std::os::raw::c_int>,
    pub fsend: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut soap, arg2: *const ::std::os::raw::c_char, arg3: usize)
            -> ::std::os::raw::c_int,
    >,
    pub frecv: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut soap, arg2: *mut ::std::os::raw::c_char, arg3: usize)
            -> usize,
    >,
    pub fpoll:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut soap) -> ::std::os::raw::c_int>,
    pub fseterror: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            c: *mut *const ::std::os::raw::c_char,
            s: *mut *const ::std::os::raw::c_char,
        ),
    >,
    pub fignore: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut soap, arg2: *const ::std::os::raw::c_char)
            -> ::std::os::raw::c_int,
    >,
    pub fserveloop:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut soap) -> ::std::os::raw::c_int>,
    pub fplugin: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut soap, arg2: *const ::std::os::raw::c_char)
            -> *mut ::std::os::raw::c_void,
    >,
    pub fmalloc: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut soap, arg2: usize) -> *mut ::std::os::raw::c_void,
    >,
    pub fsvalidate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub fwvalidate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const wchar_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub feltbegin: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut soap, arg2: *const ::std::os::raw::c_char)
            -> ::std::os::raw::c_int,
    >,
    pub feltendin: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub feltbegout: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut soap, arg2: *const ::std::os::raw::c_char)
            -> ::std::os::raw::c_int,
    >,
    pub feltendout: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut soap, arg2: *const ::std::os::raw::c_char)
            -> ::std::os::raw::c_int,
    >,
    pub fprepareinitsend:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut soap) -> ::std::os::raw::c_int>,
    pub fprepareinitrecv:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut soap) -> ::std::os::raw::c_int>,
    pub fpreparesend: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut soap, arg2: *const ::std::os::raw::c_char, arg3: usize)
            -> ::std::os::raw::c_int,
    >,
    pub fpreparerecv: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut soap, arg2: *const ::std::os::raw::c_char, arg3: usize)
            -> ::std::os::raw::c_int,
    >,
    pub fpreparefinalsend:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut soap) -> ::std::os::raw::c_int>,
    pub fpreparefinalrecv:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut soap) -> ::std::os::raw::c_int>,
    pub recverror: ::std::os::raw::c_int,
    pub ffiltersend: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: *mut *const ::std::os::raw::c_char,
            arg3: *mut usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub ffilterrecv: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: *mut ::std::os::raw::c_char,
            arg3: *mut usize,
            arg4: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub fdimereadopen: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: *mut ::std::os::raw::c_void,
            arg3: *const ::std::os::raw::c_char,
            arg4: *const ::std::os::raw::c_char,
            arg5: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub fdimewriteopen: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
            arg4: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub fdimereadclose: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut soap, arg2: *mut ::std::os::raw::c_void),
    >,
    pub fdimewriteclose: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut soap, arg2: *mut ::std::os::raw::c_void),
    >,
    pub fdimeread: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: *mut ::std::os::raw::c_void,
            arg3: *mut ::std::os::raw::c_char,
            arg4: usize,
        ) -> usize,
    >,
    pub fdimewrite: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: *mut ::std::os::raw::c_void,
            arg3: *const ::std::os::raw::c_char,
            arg4: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub fmimereadopen: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: *mut ::std::os::raw::c_void,
            arg3: *const ::std::os::raw::c_char,
            arg4: *const ::std::os::raw::c_char,
            arg5: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub fmimewriteopen: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: *mut ::std::os::raw::c_void,
            arg3: *const ::std::os::raw::c_char,
            arg4: *const ::std::os::raw::c_char,
            arg5: *const ::std::os::raw::c_char,
            arg6: soap_mime_encoding,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub fmimereadclose: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut soap, arg2: *mut ::std::os::raw::c_void),
    >,
    pub fmimewriteclose: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut soap, arg2: *mut ::std::os::raw::c_void),
    >,
    pub fmimeread: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: *mut ::std::os::raw::c_void,
            arg3: *mut ::std::os::raw::c_char,
            arg4: usize,
        ) -> usize,
    >,
    pub fmimewrite: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: *mut ::std::os::raw::c_void,
            arg3: *const ::std::os::raw::c_char,
            arg4: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub master: ::std::os::raw::c_int,
    pub socket: ::std::os::raw::c_int,
    pub sendsk: ::std::os::raw::c_int,
    pub recvsk: ::std::os::raw::c_int,
    pub os: *mut *const ::std::os::raw::c_char,
    pub is: *const ::std::os::raw::c_char,
    pub sendfd: ::std::os::raw::c_int,
    pub recvfd: ::std::os::raw::c_int,
    pub bufidx: usize,
    pub buflen: usize,
    pub ahead: soap_wchar,
    pub cdata: ::std::os::raw::c_short,
    pub body: ::std::os::raw::c_short,
    pub level: ::std::os::raw::c_uint,
    pub count: usize,
    pub length: usize,
    pub labbuf: *mut ::std::os::raw::c_char,
    pub lablen: usize,
    pub labidx: usize,
    pub buf: [::std::os::raw::c_char; 65536usize],
    pub msgbuf: [::std::os::raw::c_char; 1024usize],
    pub tmpbuf: [::std::os::raw::c_char; 1024usize],
    pub tag: [::std::os::raw::c_char; 1024usize],
    pub id: [::std::os::raw::c_char; 1024usize],
    pub href: [::std::os::raw::c_char; 1024usize],
    pub type_: [::std::os::raw::c_char; 1024usize],
    pub arrayType: [::std::os::raw::c_char; 1024usize],
    pub arraySize: [::std::os::raw::c_char; 1024usize],
    pub arrayOffset: [::std::os::raw::c_char; 1024usize],
    pub other: ::std::os::raw::c_short,
    pub root: ::std::os::raw::c_short,
    pub position: ::std::os::raw::c_int,
    pub positions: [::std::os::raw::c_int; 16usize],
    pub attributes: *mut soap_attribute,
    pub encoding: ::std::os::raw::c_short,
    pub mustUnderstand: ::std::os::raw::c_short,
    pub null: ::std::os::raw::c_short,
    pub ns: ::std::os::raw::c_short,
    pub part: ::std::os::raw::c_short,
    pub event: ::std::os::raw::c_short,
    pub peeked: ::std::os::raw::c_short,
    pub evlev: ::std::os::raw::c_uint,
    pub alloced: ::std::os::raw::c_int,
    pub chunksize: usize,
    pub chunkbuflen: usize,
    pub endpoint: [::std::os::raw::c_char; 1024usize],
    pub path: [::std::os::raw::c_char; 1024usize],
    pub host: [::std::os::raw::c_char; 1024usize],
    pub action: *mut ::std::os::raw::c_char,
    pub prolog: *const ::std::os::raw::c_char,
    pub ip: ::std::os::raw::c_ulong,
    pub port: ::std::os::raw::c_int,
    pub keep_alive: ::std::os::raw::c_short,
    pub tcp_keep_alive: ::std::os::raw::c_short,
    pub tcp_keep_idle: ::std::os::raw::c_uint,
    pub tcp_keep_intvl: ::std::os::raw::c_uint,
    pub tcp_keep_cnt: ::std::os::raw::c_uint,
    pub max_keep_alive: ::std::os::raw::c_uint,
    pub proxy_http_version: *const ::std::os::raw::c_char,
    pub proxy_host: *const ::std::os::raw::c_char,
    pub proxy_port: ::std::os::raw::c_int,
    pub proxy_userid: *const ::std::os::raw::c_char,
    pub proxy_passwd: *const ::std::os::raw::c_char,
    pub proxy_from: *const ::std::os::raw::c_char,
    pub status: ::std::os::raw::c_int,
    pub error: ::std::os::raw::c_int,
    pub errmode: ::std::os::raw::c_int,
    pub errnum: ::std::os::raw::c_int,
    pub dom: *mut soap_dom_element,
    pub dime: soap_dime,
    pub mime: soap_mime,
    pub xlist: *mut soap_xlist,
    pub logfile: [*const ::std::os::raw::c_char; 3usize],
    pub fdebug: [*mut FILE; 3usize],
    pub mht: [*mut soap_mlist; 4096usize],
    pub wsuid: *const ::std::os::raw::c_char,
    pub c14nexclude: *const ::std::os::raw::c_char,
    pub c14ninclude: *const ::std::os::raw::c_char,
    pub cookies: *mut soap_cookie,
    pub cookie_domain: *const ::std::os::raw::c_char,
    pub cookie_path: *const ::std::os::raw::c_char,
    pub cookie_max: ::std::os::raw::c_int,
    pub ipv6_multicast_if: ::std::os::raw::c_uint,
    pub ipv4_multicast_if: *mut ::std::os::raw::c_char,
    pub ipv4_multicast_ttl: ::std::os::raw::c_uchar,
    pub peer: soap__bindgen_ty_1,
    pub peerlen: usize,
    pub fsslauth: *mut ::std::os::raw::c_void,
    pub fsslverify: *mut ::std::os::raw::c_void,
    pub bio: *mut ::std::os::raw::c_void,
    pub ssl: *mut ::std::os::raw::c_void,
    pub ctx: *mut ::std::os::raw::c_void,
    pub session: *mut ::std::os::raw::c_void,
    pub dh_params: *mut ::std::os::raw::c_void,
    pub rsa_params: *mut ::std::os::raw::c_void,
    pub ssl_flags: ::std::os::raw::c_ushort,
    pub keyfile: *const ::std::os::raw::c_char,
    pub keyid: *const ::std::os::raw::c_char,
    pub password: *const ::std::os::raw::c_char,
    pub cafile: *const ::std::os::raw::c_char,
    pub capath: *const ::std::os::raw::c_char,
    pub crlfile: *const ::std::os::raw::c_char,
    pub session_host: [::std::os::raw::c_char; 1024usize],
    pub session_port: ::std::os::raw::c_int,
    pub c_locale: *mut ::std::os::raw::c_void,
    pub d_stream: *mut ::std::os::raw::c_void,
    pub z_crc: i32,
    pub z_dict: *const ::std::os::raw::c_char,
    pub z_dict_len: ::std::os::raw::c_uint,
    pub zlib_state: ::std::os::raw::c_short,
    pub zlib_in: ::std::os::raw::c_short,
    pub zlib_out: ::std::os::raw::c_short,
    pub z_buf: *mut ::std::os::raw::c_char,
    pub z_buflen: usize,
    pub z_level: ::std::os::raw::c_ushort,
    pub z_ratio_in: f32,
    pub z_ratio_out: f32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union soap__bindgen_ty_1 {
    pub addr: sockaddr,
    pub in_: sockaddr_in,
    pub storage: sockaddr_storage,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout_soap__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<soap__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(soap__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<soap__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(soap__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap__bindgen_ty_1>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap__bindgen_ty_1),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap__bindgen_ty_1>())).in_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap__bindgen_ty_1),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap__bindgen_ty_1>())).storage as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap__bindgen_ty_1),
            "::",
            stringify!(storage)
        )
    );
}
#[test]
fn bindgen_test_layout_soap() {
    assert_eq!(
        ::std::mem::size_of::<soap>(),
        162088usize,
        concat!("Size of: ", stringify!(soap))
    );
    assert_eq!(
        ::std::mem::align_of::<soap>(),
        8usize,
        concat!("Alignment of ", stringify!(soap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).version as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).mode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).imode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(imode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).omode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(omode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).float_format as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(float_format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).double_format as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(double_format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).long_double_format as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(long_double_format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).dime_id_format as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(dime_id_format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).http_version as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(http_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).http_content as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(http_content)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).encodingStyle as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(encodingStyle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).actor as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(actor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).lang as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(lang)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).recv_timeout as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(recv_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).send_timeout as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(send_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).connect_timeout as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(connect_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).accept_timeout as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(accept_timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).socket_flags as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(socket_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).connect_flags as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(connect_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).bind_flags as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(bind_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).accept_flags as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(accept_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).linger_time as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(linger_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).namespaces as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(namespaces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).local_namespaces as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(local_namespaces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).nlist as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(nlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).blist as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(blist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).clist as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(clist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).alist as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(alist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).shaky as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(shaky)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).iht as *const _ as usize },
        184usize,
        concat!("Offset of field: ", stringify!(soap), "::", stringify!(iht))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).pht as *const _ as usize },
        16176usize,
        concat!("Offset of field: ", stringify!(soap), "::", stringify!(pht))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).pblk as *const _ as usize },
        48944usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(pblk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).pidx as *const _ as usize },
        48952usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(pidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).header as *const _ as usize },
        48960usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fault as *const _ as usize },
        48968usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fault)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).idnum as *const _ as usize },
        48976usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(idnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).user as *const _ as usize },
        48984usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).data as *const _ as usize },
        48992usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).plugins as *const _ as usize },
        49024usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(plugins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).userid as *const _ as usize },
        49032usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(userid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).passwd as *const _ as usize },
        49040usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(passwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).authrealm as *const _ as usize },
        49048usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(authrealm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).ntlm_challenge as *const _ as usize },
        49056usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(ntlm_challenge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).ntlm_auth as *const _ as usize },
        49064usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(ntlm_auth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).ntlm_stage as *const _ as usize },
        49066usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(ntlm_stage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fpost as *const _ as usize },
        49072usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fpost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fget as *const _ as usize },
        49080usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fput as *const _ as usize },
        49088usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fdel as *const _ as usize },
        49096usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fdel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fopt as *const _ as usize },
        49104usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fopt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fhead as *const _ as usize },
        49112usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fhead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fform as *const _ as usize },
        49120usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fform)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fposthdr as *const _ as usize },
        49128usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fposthdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fresponse as *const _ as usize },
        49136usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fresponse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fparse as *const _ as usize },
        49144usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fparse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fparsehdr as *const _ as usize },
        49152usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fparsehdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fheader as *const _ as usize },
        49160usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fheader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fresolve as *const _ as usize },
        49168usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fresolve)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fconnect as *const _ as usize },
        49176usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fconnect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fdisconnect as *const _ as usize },
        49184usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fdisconnect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fclosesocket as *const _ as usize },
        49192usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fclosesocket)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fshutdownsocket as *const _ as usize },
        49200usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fshutdownsocket)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fopen as *const _ as usize },
        49208usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fopen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).faccept as *const _ as usize },
        49216usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(faccept)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fclose as *const _ as usize },
        49224usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fclose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fsend as *const _ as usize },
        49232usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fsend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).frecv as *const _ as usize },
        49240usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(frecv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fpoll as *const _ as usize },
        49248usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fpoll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fseterror as *const _ as usize },
        49256usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fseterror)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fignore as *const _ as usize },
        49264usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fignore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fserveloop as *const _ as usize },
        49272usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fserveloop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fplugin as *const _ as usize },
        49280usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fplugin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fmalloc as *const _ as usize },
        49288usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fmalloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fsvalidate as *const _ as usize },
        49296usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fsvalidate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fwvalidate as *const _ as usize },
        49304usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fwvalidate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).feltbegin as *const _ as usize },
        49312usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(feltbegin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).feltendin as *const _ as usize },
        49320usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(feltendin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).feltbegout as *const _ as usize },
        49328usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(feltbegout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).feltendout as *const _ as usize },
        49336usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(feltendout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fprepareinitsend as *const _ as usize },
        49344usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fprepareinitsend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fprepareinitrecv as *const _ as usize },
        49352usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fprepareinitrecv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fpreparesend as *const _ as usize },
        49360usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fpreparesend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fpreparerecv as *const _ as usize },
        49368usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fpreparerecv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fpreparefinalsend as *const _ as usize },
        49376usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fpreparefinalsend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fpreparefinalrecv as *const _ as usize },
        49384usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fpreparefinalrecv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).recverror as *const _ as usize },
        49392usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(recverror)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).ffiltersend as *const _ as usize },
        49400usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(ffiltersend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).ffilterrecv as *const _ as usize },
        49408usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(ffilterrecv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fdimereadopen as *const _ as usize },
        49416usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fdimereadopen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fdimewriteopen as *const _ as usize },
        49424usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fdimewriteopen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fdimereadclose as *const _ as usize },
        49432usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fdimereadclose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fdimewriteclose as *const _ as usize },
        49440usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fdimewriteclose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fdimeread as *const _ as usize },
        49448usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fdimeread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fdimewrite as *const _ as usize },
        49456usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fdimewrite)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fmimereadopen as *const _ as usize },
        49464usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fmimereadopen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fmimewriteopen as *const _ as usize },
        49472usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fmimewriteopen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fmimereadclose as *const _ as usize },
        49480usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fmimereadclose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fmimewriteclose as *const _ as usize },
        49488usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fmimewriteclose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fmimeread as *const _ as usize },
        49496usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fmimeread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fmimewrite as *const _ as usize },
        49504usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fmimewrite)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).master as *const _ as usize },
        49512usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(master)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).socket as *const _ as usize },
        49516usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(socket)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).sendsk as *const _ as usize },
        49520usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(sendsk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).recvsk as *const _ as usize },
        49524usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(recvsk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).os as *const _ as usize },
        49528usize,
        concat!("Offset of field: ", stringify!(soap), "::", stringify!(os))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).is as *const _ as usize },
        49536usize,
        concat!("Offset of field: ", stringify!(soap), "::", stringify!(is))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).sendfd as *const _ as usize },
        49544usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(sendfd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).recvfd as *const _ as usize },
        49548usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(recvfd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).bufidx as *const _ as usize },
        49552usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(bufidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).buflen as *const _ as usize },
        49560usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(buflen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).ahead as *const _ as usize },
        49568usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(ahead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).cdata as *const _ as usize },
        49572usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(cdata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).body as *const _ as usize },
        49574usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).level as *const _ as usize },
        49576usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).count as *const _ as usize },
        49584usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).length as *const _ as usize },
        49592usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).labbuf as *const _ as usize },
        49600usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(labbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).lablen as *const _ as usize },
        49608usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(lablen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).labidx as *const _ as usize },
        49616usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(labidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).buf as *const _ as usize },
        49624usize,
        concat!("Offset of field: ", stringify!(soap), "::", stringify!(buf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).msgbuf as *const _ as usize },
        115160usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(msgbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).tmpbuf as *const _ as usize },
        116184usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(tmpbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).tag as *const _ as usize },
        117208usize,
        concat!("Offset of field: ", stringify!(soap), "::", stringify!(tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).id as *const _ as usize },
        118232usize,
        concat!("Offset of field: ", stringify!(soap), "::", stringify!(id))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).href as *const _ as usize },
        119256usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(href)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).type_ as *const _ as usize },
        120280usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).arrayType as *const _ as usize },
        121304usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(arrayType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).arraySize as *const _ as usize },
        122328usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(arraySize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).arrayOffset as *const _ as usize },
        123352usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(arrayOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).other as *const _ as usize },
        124376usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(other)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).root as *const _ as usize },
        124378usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).position as *const _ as usize },
        124380usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).positions as *const _ as usize },
        124384usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(positions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).attributes as *const _ as usize },
        124448usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(attributes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).encoding as *const _ as usize },
        124456usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).mustUnderstand as *const _ as usize },
        124458usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(mustUnderstand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).null as *const _ as usize },
        124460usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).ns as *const _ as usize },
        124462usize,
        concat!("Offset of field: ", stringify!(soap), "::", stringify!(ns))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).part as *const _ as usize },
        124464usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(part)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).event as *const _ as usize },
        124466usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).peeked as *const _ as usize },
        124468usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(peeked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).evlev as *const _ as usize },
        124472usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(evlev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).alloced as *const _ as usize },
        124476usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(alloced)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).chunksize as *const _ as usize },
        124480usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(chunksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).chunkbuflen as *const _ as usize },
        124488usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(chunkbuflen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).endpoint as *const _ as usize },
        124496usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(endpoint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).path as *const _ as usize },
        125520usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).host as *const _ as usize },
        126544usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).action as *const _ as usize },
        127568usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).prolog as *const _ as usize },
        127576usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(prolog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).ip as *const _ as usize },
        127584usize,
        concat!("Offset of field: ", stringify!(soap), "::", stringify!(ip))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).port as *const _ as usize },
        127592usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).keep_alive as *const _ as usize },
        127596usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(keep_alive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).tcp_keep_alive as *const _ as usize },
        127598usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(tcp_keep_alive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).tcp_keep_idle as *const _ as usize },
        127600usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(tcp_keep_idle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).tcp_keep_intvl as *const _ as usize },
        127604usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(tcp_keep_intvl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).tcp_keep_cnt as *const _ as usize },
        127608usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(tcp_keep_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).max_keep_alive as *const _ as usize },
        127612usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(max_keep_alive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).proxy_http_version as *const _ as usize },
        127616usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(proxy_http_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).proxy_host as *const _ as usize },
        127624usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(proxy_host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).proxy_port as *const _ as usize },
        127632usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(proxy_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).proxy_userid as *const _ as usize },
        127640usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(proxy_userid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).proxy_passwd as *const _ as usize },
        127648usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(proxy_passwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).proxy_from as *const _ as usize },
        127656usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(proxy_from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).status as *const _ as usize },
        127664usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).error as *const _ as usize },
        127668usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).errmode as *const _ as usize },
        127672usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(errmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).errnum as *const _ as usize },
        127676usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(errnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).dom as *const _ as usize },
        127680usize,
        concat!("Offset of field: ", stringify!(soap), "::", stringify!(dom))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).dime as *const _ as usize },
        127688usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(dime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).mime as *const _ as usize },
        127784usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(mime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).xlist as *const _ as usize },
        127824usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(xlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).logfile as *const _ as usize },
        127832usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(logfile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fdebug as *const _ as usize },
        127856usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fdebug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).mht as *const _ as usize },
        127880usize,
        concat!("Offset of field: ", stringify!(soap), "::", stringify!(mht))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).wsuid as *const _ as usize },
        160648usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(wsuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).c14nexclude as *const _ as usize },
        160656usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(c14nexclude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).c14ninclude as *const _ as usize },
        160664usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(c14ninclude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).cookies as *const _ as usize },
        160672usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(cookies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).cookie_domain as *const _ as usize },
        160680usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(cookie_domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).cookie_path as *const _ as usize },
        160688usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(cookie_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).cookie_max as *const _ as usize },
        160696usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(cookie_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).ipv6_multicast_if as *const _ as usize },
        160700usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(ipv6_multicast_if)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).ipv4_multicast_if as *const _ as usize },
        160704usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(ipv4_multicast_if)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).ipv4_multicast_ttl as *const _ as usize },
        160712usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(ipv4_multicast_ttl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).peer as *const _ as usize },
        160720usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(peer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).peerlen as *const _ as usize },
        160848usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(peerlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fsslauth as *const _ as usize },
        160856usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fsslauth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).fsslverify as *const _ as usize },
        160864usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(fsslverify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).bio as *const _ as usize },
        160872usize,
        concat!("Offset of field: ", stringify!(soap), "::", stringify!(bio))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).ssl as *const _ as usize },
        160880usize,
        concat!("Offset of field: ", stringify!(soap), "::", stringify!(ssl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).ctx as *const _ as usize },
        160888usize,
        concat!("Offset of field: ", stringify!(soap), "::", stringify!(ctx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).session as *const _ as usize },
        160896usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).dh_params as *const _ as usize },
        160904usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(dh_params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).rsa_params as *const _ as usize },
        160912usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(rsa_params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).ssl_flags as *const _ as usize },
        160920usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(ssl_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).keyfile as *const _ as usize },
        160928usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(keyfile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).keyid as *const _ as usize },
        160936usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(keyid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).password as *const _ as usize },
        160944usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(password)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).cafile as *const _ as usize },
        160952usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(cafile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).capath as *const _ as usize },
        160960usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(capath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).crlfile as *const _ as usize },
        160968usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(crlfile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).session_host as *const _ as usize },
        160976usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(session_host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).session_port as *const _ as usize },
        162000usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(session_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).c_locale as *const _ as usize },
        162008usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(c_locale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).d_stream as *const _ as usize },
        162016usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(d_stream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).z_crc as *const _ as usize },
        162024usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(z_crc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).z_dict as *const _ as usize },
        162032usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(z_dict)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).z_dict_len as *const _ as usize },
        162040usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(z_dict_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).zlib_state as *const _ as usize },
        162044usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(zlib_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).zlib_in as *const _ as usize },
        162046usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(zlib_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).zlib_out as *const _ as usize },
        162048usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(zlib_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).z_buf as *const _ as usize },
        162056usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(z_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).z_buflen as *const _ as usize },
        162064usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(z_buflen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).z_level as *const _ as usize },
        162072usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(z_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).z_ratio_in as *const _ as usize },
        162076usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(z_ratio_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap>())).z_ratio_out as *const _ as usize },
        162080usize,
        concat!(
            "Offset of field: ",
            stringify!(soap),
            "::",
            stringify!(z_ratio_out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soap_code_map {
    pub code: i64,
    pub string: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_soap_code_map() {
    assert_eq!(
        ::std::mem::size_of::<soap_code_map>(),
        16usize,
        concat!("Size of: ", stringify!(soap_code_map))
    );
    assert_eq!(
        ::std::mem::align_of::<soap_code_map>(),
        8usize,
        concat!("Alignment of ", stringify!(soap_code_map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_code_map>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_code_map),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_code_map>())).string as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_code_map),
            "::",
            stringify!(string)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soap_flist {
    pub next: *mut soap_flist,
    pub type_: ::std::os::raw::c_int,
    pub ptr: *mut ::std::os::raw::c_void,
    pub level: ::std::os::raw::c_uint,
    pub index: usize,
    pub finsert: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut soap,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut ::std::os::raw::c_void,
            arg5: usize,
            arg6: *const ::std::os::raw::c_void,
            arg7: *mut *mut ::std::os::raw::c_void,
        ),
    >,
}
#[test]
fn bindgen_test_layout_soap_flist() {
    assert_eq!(
        ::std::mem::size_of::<soap_flist>(),
        48usize,
        concat!("Size of: ", stringify!(soap_flist))
    );
    assert_eq!(
        ::std::mem::align_of::<soap_flist>(),
        8usize,
        concat!("Alignment of ", stringify!(soap_flist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_flist>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_flist),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_flist>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_flist),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_flist>())).ptr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_flist),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_flist>())).level as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_flist),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_flist>())).index as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_flist),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_flist>())).finsert as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_flist),
            "::",
            stringify!(finsert)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soap_ilist {
    pub next: *mut soap_ilist,
    pub type_: ::std::os::raw::c_int,
    pub size: usize,
    pub ptr: *mut ::std::os::raw::c_void,
    pub spine: *mut *mut ::std::os::raw::c_void,
    pub link: *mut ::std::os::raw::c_void,
    pub copy: *mut ::std::os::raw::c_void,
    pub flist: *mut soap_flist,
    pub smart: *mut ::std::os::raw::c_void,
    pub shaky: ::std::os::raw::c_short,
    pub id: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout_soap_ilist() {
    assert_eq!(
        ::std::mem::size_of::<soap_ilist>(),
        80usize,
        concat!("Size of: ", stringify!(soap_ilist))
    );
    assert_eq!(
        ::std::mem::align_of::<soap_ilist>(),
        8usize,
        concat!("Alignment of ", stringify!(soap_ilist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_ilist>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_ilist),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_ilist>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_ilist),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_ilist>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_ilist),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_ilist>())).ptr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_ilist),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_ilist>())).spine as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_ilist),
            "::",
            stringify!(spine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_ilist>())).link as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_ilist),
            "::",
            stringify!(link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_ilist>())).copy as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_ilist),
            "::",
            stringify!(copy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_ilist>())).flist as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_ilist),
            "::",
            stringify!(flist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_ilist>())).smart as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_ilist),
            "::",
            stringify!(smart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_ilist>())).shaky as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_ilist),
            "::",
            stringify!(shaky)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_ilist>())).id as *const _ as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_ilist),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soap_plugin {
    pub next: *mut soap_plugin,
    pub id: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub fcopy: ::std::option::Option<
        unsafe extern "C" fn(soap: *mut soap, dst: *mut soap_plugin, src: *mut soap_plugin)
            -> ::std::os::raw::c_int,
    >,
    pub fdelete: ::std::option::Option<unsafe extern "C" fn(soap: *mut soap, p: *mut soap_plugin)>,
}
#[test]
fn bindgen_test_layout_soap_plugin() {
    assert_eq!(
        ::std::mem::size_of::<soap_plugin>(),
        40usize,
        concat!("Size of: ", stringify!(soap_plugin))
    );
    assert_eq!(
        ::std::mem::align_of::<soap_plugin>(),
        8usize,
        concat!("Alignment of ", stringify!(soap_plugin))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_plugin>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_plugin),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_plugin>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_plugin),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_plugin>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_plugin),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_plugin>())).fcopy as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_plugin),
            "::",
            stringify!(fcopy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<soap_plugin>())).fdelete as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(soap_plugin),
            "::",
            stringify!(fdelete)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}namespaces"]
    pub static mut namespaces: [Namespace; 0usize];
}
pub type soap_walker = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut soap,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn soap_serve(soap: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_serve_request(soap: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_header(arg1: *mut soap);
}
extern "C" {
    pub fn soap_fault(arg1: *mut soap);
}
extern "C" {
    pub fn soap_faultcode(arg1: *mut soap) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_faultsubcode(arg1: *mut soap) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_faultstring(arg1: *mut soap) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_faultdetail(arg1: *mut soap) -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_check_faultsubcode(arg1: *mut soap) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_check_faultdetail(arg1: *mut soap) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_serializefault(arg1: *mut soap);
}
extern "C" {
    pub fn soap_serializeheader(arg1: *mut soap);
}
extern "C" {
    pub fn soap_getheader(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_putheader(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_getfault(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_putfault(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_ssl_init();
}
extern "C" {
    pub fn soap_poll(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_connect_command(
        arg1: *mut soap,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_connect(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_bind(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_accept(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_ssl_accept(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_ssl_error(
        arg1: *mut soap,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_ssl_crl(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_ssl_server_context(
        soap: *mut soap,
        flags: ::std::os::raw::c_ushort,
        keyfile: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
        cafile: *const ::std::os::raw::c_char,
        capath: *const ::std::os::raw::c_char,
        dhfile: *const ::std::os::raw::c_char,
        randfile: *const ::std::os::raw::c_char,
        sid: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_ssl_client_context(
        soap: *mut soap,
        flags: ::std::os::raw::c_ushort,
        keyfile: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
        cafile: *const ::std::os::raw::c_char,
        capath: *const ::std::os::raw::c_char,
        randfile: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_puthttphdr(
        arg1: *mut soap,
        status: ::std::os::raw::c_int,
        count: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_header_attribute(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_decode_key(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_decode_val(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_hash(arg1: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn soap_set_endpoint(arg1: *mut soap, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn soap_flush_raw(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_flush(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get(arg1: *mut soap) -> soap_wchar;
}
extern "C" {
    pub fn soap_getchar(arg1: *mut soap) -> soap_wchar;
}
extern "C" {
    pub fn soap_tag_cmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_set_fault(arg1: *mut soap);
}
extern "C" {
    pub fn soap_sender_fault(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_sender_fault_subcode(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_receiver_fault(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_receiver_fault_subcode(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_set_sender_error(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_set_receiver_error(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_send_raw(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_recv_raw(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_recv(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_send(arg1: *mut soap, arg2: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_send2(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_send3(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_pututf8(arg1: *mut soap, arg2: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_getutf8(arg1: *mut soap) -> soap_wchar;
}
extern "C" {
    pub fn soap_utf8len(arg1: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn soap_putbase64(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_getbase64(
        arg1: *mut soap,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn soap_puthex(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_gethex(
        arg1: *mut soap,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn soap_xop_forward(
        arg1: *mut soap,
        arg2: *mut *mut ::std::os::raw::c_uchar,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: *mut *mut ::std::os::raw::c_char,
        arg6: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_attachment_forward(
        arg1: *mut soap,
        arg2: *mut *mut ::std::os::raw::c_uchar,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: *mut *mut ::std::os::raw::c_char,
        arg6: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_pointer_lookup(
        arg1: *mut soap,
        p: *const ::std::os::raw::c_void,
        t: ::std::os::raw::c_int,
        arg2: *mut *mut soap_plist,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_pointer_enter(
        arg1: *mut soap,
        p: *const ::std::os::raw::c_void,
        a: *const ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
        t: ::std::os::raw::c_int,
        arg2: *mut *mut soap_plist,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_array_pointer_lookup(
        arg1: *mut soap,
        p: *const ::std::os::raw::c_void,
        a: *const ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
        t: ::std::os::raw::c_int,
        arg2: *mut *mut soap_plist,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_pointer_lookup_id(
        arg1: *mut soap,
        p: *mut ::std::os::raw::c_void,
        t: ::std::os::raw::c_int,
        arg2: *mut *mut soap_plist,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_embed(
        soap: *mut soap,
        p: *const ::std::os::raw::c_void,
        a: *const ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_lookup(arg1: *mut soap, arg2: *const ::std::os::raw::c_char) -> *mut soap_ilist;
}
extern "C" {
    pub fn soap_enter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> *mut soap_ilist;
}
extern "C" {
    pub fn soap_resolve(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_embedded(
        arg1: *mut soap,
        p: *const ::std::os::raw::c_void,
        t: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn soap_reference(
        arg1: *mut soap,
        p: *const ::std::os::raw::c_void,
        t: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_array_reference(
        arg1: *mut soap,
        p: *const ::std::os::raw::c_void,
        a: *const ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
        t: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_embedded_id(
        arg1: *mut soap,
        id: ::std::os::raw::c_int,
        p: *const ::std::os::raw::c_void,
        t: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_is_embedded(arg1: *mut soap, arg2: *mut soap_plist) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_is_single(arg1: *mut soap, arg2: *mut soap_plist) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_set_embedded(arg1: *mut soap, arg2: *mut soap_plist);
}
extern "C" {
    pub fn soap_check_and_mark(
        soap: *mut soap,
        p: *const ::std::os::raw::c_void,
        t: ::std::os::raw::c_int,
        mark: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_mark_lookup(
        soap: *mut soap,
        p: *const ::std::os::raw::c_void,
        t: ::std::os::raw::c_int,
        pp: *mut *mut soap_plist,
        mark: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn soap_mark_cycle(soap: *mut soap, pp: *mut soap_plist) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_mark_dup(soap: *mut soap, a: *mut ::std::os::raw::c_void, pp: *mut soap_plist);
}
extern "C" {
    pub fn soap_unmark(soap: *mut soap, mark: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn soap_begin_count(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_end_count(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_begin_send(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_end_send(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_end_send_flush(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_code(
        arg1: *const soap_code_map,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const soap_code_map;
}
extern "C" {
    pub fn soap_code_int(
        arg1: *const soap_code_map,
        arg2: *const ::std::os::raw::c_char,
        arg3: i64,
    ) -> i64;
}
extern "C" {
    pub fn soap_code_str(
        arg1: *const soap_code_map,
        arg2: ::std::os::raw::c_long,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_code_bits(arg1: *const soap_code_map, arg2: *const ::std::os::raw::c_char) -> i64;
}
extern "C" {
    pub fn soap_code_list(
        arg1: *mut soap,
        arg2: *const soap_code_map,
        arg3: ::std::os::raw::c_long,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_getline(
        arg1: *mut soap,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_begin_serve(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_begin_recv(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_end_recv(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_malloc(arg1: *mut soap, arg2: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn soap_dealloc(arg1: *mut soap, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn soap_link(
        arg1: *mut soap,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        fdelete: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut soap_clist) -> ::std::os::raw::c_int,
        >,
    ) -> *mut soap_clist;
}
extern "C" {
    pub fn soap_unlink(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_free_temp(arg1: *mut soap);
}
extern "C" {
    pub fn soap_del(arg1: *mut soap);
}
extern "C" {
    pub fn soap_track_malloc(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn soap_track_free(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn soap_lookup_type(
        arg1: *mut soap,
        id: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_begin_shaky(arg1: *mut soap) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn soap_end_shaky(arg1: *mut soap, arg2: ::std::os::raw::c_short);
}
extern "C" {
    pub fn soap_id_lookup(
        arg1: *mut soap,
        id: *const ::std::os::raw::c_char,
        p: *mut *mut ::std::os::raw::c_void,
        t: ::std::os::raw::c_int,
        n: usize,
        k: ::std::os::raw::c_uint,
        fbase: ::std::option::Option<
            unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
                -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn soap_id_forward(
        arg1: *mut soap,
        id: *const ::std::os::raw::c_char,
        p: *mut ::std::os::raw::c_void,
        i: usize,
        t: ::std::os::raw::c_int,
        tt: ::std::os::raw::c_int,
        n: usize,
        k: ::std::os::raw::c_uint,
        finsert: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut soap,
                arg2: ::std::os::raw::c_int,
                arg3: ::std::os::raw::c_int,
                arg4: *mut ::std::os::raw::c_void,
                arg5: usize,
                arg6: *const ::std::os::raw::c_void,
                arg7: *mut *mut ::std::os::raw::c_void,
            ),
        >,
        fbase: ::std::option::Option<
            unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
                -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn soap_id_nullify(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_id_enter(
        arg1: *mut soap,
        id: *const ::std::os::raw::c_char,
        p: *mut ::std::os::raw::c_void,
        t: ::std::os::raw::c_int,
        n: usize,
        type_: *const ::std::os::raw::c_char,
        arrayType: *const ::std::os::raw::c_char,
        finstantiate: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut soap,
                arg2: ::std::os::raw::c_int,
                arg3: *const ::std::os::raw::c_char,
                arg4: *const ::std::os::raw::c_char,
                arg5: *mut usize,
            ) -> *mut ::std::os::raw::c_void,
        >,
        fbase: ::std::option::Option<
            unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
                -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn soap_id_smart(
        soap: *mut soap,
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn soap_size(arg1: *const ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    pub fn soap_getsizes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> usize;
}
extern "C" {
    pub fn soap_getoffsets(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_getposition(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_putsizesoffsets(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_putoffsets(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_closesock(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_force_closesock(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_new_REQUIRE_lib_v20828(arg1: soap_mode, arg2: soap_mode) -> *mut soap;
}
extern "C" {
    pub fn soap_free(arg1: *mut soap);
}
extern "C" {
    pub fn soap_copy(arg1: *const soap) -> *mut soap;
}
extern "C" {
    pub fn soap_copy_context(arg1: *mut soap, arg2: *const soap) -> *mut soap;
}
extern "C" {
    pub fn soap_copy_stream(arg1: *mut soap, arg2: *mut soap);
}
extern "C" {
    pub fn soap_free_stream(arg1: *mut soap);
}
extern "C" {
    pub fn soap_init_REQUIRE_lib_v20828(arg1: *mut soap, arg2: soap_mode, arg3: soap_mode);
}
extern "C" {
    pub fn soap_initialize(arg1: *mut soap);
}
extern "C" {
    pub fn soap_done(arg1: *mut soap);
}
extern "C" {
    pub fn soap_cleanup(arg1: *mut soap);
}
extern "C" {
    pub fn soap_begin(arg1: *mut soap);
}
extern "C" {
    pub fn soap_end(arg1: *mut soap);
}
extern "C" {
    pub fn soap_delete(arg1: *mut soap, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn soap_delegate_deletion(arg1: *mut soap, arg2: *mut soap);
}
extern "C" {
    pub fn soap_set_recv_logfile(arg1: *mut soap, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn soap_set_sent_logfile(arg1: *mut soap, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn soap_set_test_logfile(arg1: *mut soap, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn soap_close_logfiles(arg1: *mut soap);
}
extern "C" {
    pub fn soap_open_logfile(arg1: *mut soap, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn soap_value(arg1: *mut soap) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_match_tag(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_match_array(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_element(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_element_begin_out(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        type_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_array_begin_out(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        type_: *const ::std::os::raw::c_char,
        offset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_element_ref(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        href: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_element_href(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        ref_: *const ::std::os::raw::c_char,
        val: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_element_null(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        type_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_element_nil(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_element_id(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        p: *const ::std::os::raw::c_void,
        a: *const ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
        type_: *const ::std::os::raw::c_char,
        t: ::std::os::raw::c_int,
        mark: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_element_result(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_check_result(arg1: *mut soap, tag: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn soap_element_end_out(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_element_start_end_out(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_attribute(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_element_begin_in(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        nillable: ::std::os::raw::c_int,
        type_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_element_end_in(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_peek_element(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_retry(arg1: *mut soap);
}
extern "C" {
    pub fn soap_revert(arg1: *mut soap);
}
extern "C" {
    pub fn soap_memdup(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn soap_strdup(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_wstrdup(arg1: *mut soap, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn soap_strtrim(
        arg1: *mut soap,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_wstrtrim(arg1: *mut soap, arg2: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn soap_tagsearch(
        big: *const ::std::os::raw::c_char,
        little: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_string_out(
        arg1: *mut soap,
        s: *const ::std::os::raw::c_char,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_string_in(
        arg1: *mut soap,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_wstring_out(
        arg1: *mut soap,
        s: *const wchar_t,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_wstring_in(
        arg1: *mut soap,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: *const ::std::os::raw::c_char,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn soap_match_namespace(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        n1: usize,
        n2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_set_version(arg1: *mut soap, arg2: ::std::os::raw::c_short);
}
extern "C" {
    pub fn soap_get_version(arg1: *mut soap);
}
extern "C" {
    pub fn soap_set_namespaces(arg1: *mut soap, arg2: *const Namespace) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_set_local_namespaces(arg1: *mut soap);
}
extern "C" {
    pub fn soap_pop_namespace(arg1: *mut soap);
}
extern "C" {
    pub fn soap_push_namespace(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> *mut soap_nlist;
}
extern "C" {
    pub fn soap_current_namespace(
        soap: *mut soap,
        tag: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_lookup_ns(
        soap: *mut soap,
        tag: *const ::std::os::raw::c_char,
        n: usize,
    ) -> *mut soap_nlist;
}
extern "C" {
    pub fn soap_store_lab(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_append_lab(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_new_block(arg1: *mut soap) -> *mut soap_blist;
}
extern "C" {
    pub fn soap_push_block(
        arg1: *mut soap,
        arg2: *mut soap_blist,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn soap_pop_block(arg1: *mut soap, arg2: *mut soap_blist);
}
extern "C" {
    pub fn soap_size_block(arg1: *mut soap, arg2: *mut soap_blist, arg3: usize) -> usize;
}
extern "C" {
    pub fn soap_first_block(arg1: *mut soap, arg2: *mut soap_blist) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_next_block(arg1: *mut soap, arg2: *mut soap_blist) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_block_size(arg1: *mut soap, arg2: *mut soap_blist) -> usize;
}
extern "C" {
    pub fn soap_save_block(
        arg1: *mut soap,
        arg2: *mut soap_blist,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_end_block(arg1: *mut soap, arg2: *mut soap_blist);
}
extern "C" {
    pub fn soap_update_pointers(
        soap: *mut soap,
        dst: *const ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        len: usize,
    );
}
extern "C" {
    pub fn soap_envelope_begin_out(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_envelope_end_out(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_http_body(arg1: *mut soap, len: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_envelope_begin_in(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_envelope_end_in(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_body_begin_out(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_body_end_out(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_body_begin_in(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_body_end_in(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_recv_header(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_response(arg1: *mut soap, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_send_empty_response(
        arg1: *mut soap,
        status: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_recv_empty_response(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_send_fault(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_recv_fault(arg1: *mut soap, check: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_print_fault(arg1: *mut soap, arg2: *mut FILE);
}
extern "C" {
    pub fn soap_print_fault_location(arg1: *mut soap, arg2: *mut FILE);
}
extern "C" {
    pub fn soap_sprint_fault(
        arg1: *mut soap,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_s2byte(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_s2short(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_s2int(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_s2long(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_s2LONG64(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_s2float(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_s2double(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_s2unsignedByte(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_s2unsignedShort(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_s2unsignedInt(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_s2unsignedLong(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_s2ULONG64(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_s2string(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
        minlen: ::std::os::raw::c_long,
        maxlen: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_s2QName(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
        minlen: ::std::os::raw::c_long,
        maxlen: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_s2wchar(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut wchar_t,
        minlen: ::std::os::raw::c_long,
        maxlen: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_s2dateTime(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut time_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_s2base64(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_s2hex(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_byte2s(
        arg1: *mut soap,
        arg2: ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_short2s(
        arg1: *mut soap,
        arg2: ::std::os::raw::c_short,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_int2s(
        arg1: *mut soap,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_long2s(
        arg1: *mut soap,
        arg2: ::std::os::raw::c_long,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_LONG642s(arg1: *mut soap, arg2: i64) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_float2s(arg1: *mut soap, arg2: f32) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_double2s(arg1: *mut soap, arg2: f64) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_unsignedByte2s(
        arg1: *mut soap,
        arg2: ::std::os::raw::c_uchar,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_unsignedShort2s(
        arg1: *mut soap,
        arg2: ::std::os::raw::c_ushort,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_unsignedInt2s(
        arg1: *mut soap,
        arg2: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_unsignedLong2s(
        arg1: *mut soap,
        arg2: ::std::os::raw::c_ulong,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_ULONG642s(arg1: *mut soap, arg2: u64) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_QName2s(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_wchar2s(arg1: *mut soap, arg2: *const wchar_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_dateTime2s(arg1: *mut soap, arg2: time_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_base642s(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_hex2s(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_inint(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        p: *mut ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_inbyte(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        p: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_inlong(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        p: *mut ::std::os::raw::c_long,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_long;
}
extern "C" {
    pub fn soap_inLONG64(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        p: *mut i64,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut i64;
}
extern "C" {
    pub fn soap_inshort(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        p: *mut ::std::os::raw::c_short,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_short;
}
extern "C" {
    pub fn soap_infloat(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        p: *mut f32,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut f32;
}
extern "C" {
    pub fn soap_indouble(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        p: *mut f64,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut f64;
}
extern "C" {
    pub fn soap_inunsignedByte(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        p: *mut ::std::os::raw::c_uchar,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn soap_inunsignedShort(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        p: *mut ::std::os::raw::c_ushort,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn soap_inunsignedInt(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        p: *mut ::std::os::raw::c_uint,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub fn soap_inunsignedLong(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        p: *mut ::std::os::raw::c_ulong,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn soap_inULONG64(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        p: *mut u64,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut u64;
}
extern "C" {
    pub fn soap_instring(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        p: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_long,
        arg6: ::std::os::raw::c_long,
        arg7: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_inliteral(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        p: *mut *mut ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_indateTime(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        p: *mut time_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut time_t;
}
extern "C" {
    pub fn soap_timegm(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn soap_inwstring(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        p: *mut *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_long,
        arg6: *const ::std::os::raw::c_char,
    ) -> *mut *mut wchar_t;
}
extern "C" {
    pub fn soap_inwliteral(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        p: *mut *mut wchar_t,
    ) -> *mut *mut wchar_t;
}
extern "C" {
    pub fn soap_outbyte(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        p: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_outshort(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        p: *const ::std::os::raw::c_short,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_outint(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        p: *const ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_outlong(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        p: *const ::std::os::raw::c_long,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_outLONG64(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        p: *const i64,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_outfloat(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        p: *const f32,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_outdouble(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        p: *const f64,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_outunsignedByte(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        p: *const ::std::os::raw::c_uchar,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_outunsignedShort(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        p: *const ::std::os::raw::c_ushort,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_outunsignedInt(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        p: *const ::std::os::raw::c_uint,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_outunsignedLong(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        p: *const ::std::os::raw::c_ulong,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_outULONG64(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        p: *const u64,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_outstring(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        p: *const *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_outliteral(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        p: *const *const ::std::os::raw::c_char,
        type_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_outdateTime(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        p: *const time_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_outwstring(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        id: ::std::os::raw::c_int,
        p: *const *const wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_outwliteral(
        arg1: *mut soap,
        tag: *const ::std::os::raw::c_char,
        p: *const *const wchar_t,
        type_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_attachment(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_void,
        arg5: *const ::std::os::raw::c_void,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_char,
        arg8: *const ::std::os::raw::c_char,
        arg9: *const ::std::os::raw::c_char,
        arg10: *const ::std::os::raw::c_char,
        arg11: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_move(arg1: *mut soap, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_tell(arg1: *mut soap) -> usize;
}
extern "C" {
    pub fn soap_dime_option(
        arg1: *mut soap,
        arg2: ::std::os::raw::c_ushort,
        arg3: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_getdimehdr(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_getdime(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_putdimehdr(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_putdime(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_getmimehdr(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_getmime(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_putmimehdr(arg1: *mut soap, arg2: *mut soap_multipart) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_putmime(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_set_dime(arg1: *mut soap);
}
extern "C" {
    pub fn soap_set_mime(
        arg1: *mut soap,
        boundary: *const ::std::os::raw::c_char,
        start: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn soap_clr_dime(arg1: *mut soap);
}
extern "C" {
    pub fn soap_clr_mime(arg1: *mut soap);
}
extern "C" {
    pub fn soap_set_dime_attachment(
        arg1: *mut soap,
        ptr: *mut ::std::os::raw::c_char,
        size: usize,
        type_: *const ::std::os::raw::c_char,
        id: *const ::std::os::raw::c_char,
        optype: ::std::os::raw::c_ushort,
        option: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_set_mime_attachment(
        arg1: *mut soap,
        ptr: *mut ::std::os::raw::c_char,
        size: usize,
        encoding: soap_mime_encoding,
        type_: *const ::std::os::raw::c_char,
        id: *const ::std::os::raw::c_char,
        location: *const ::std::os::raw::c_char,
        description: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_post_check_mime_attachments(soap: *mut soap);
}
extern "C" {
    pub fn soap_check_mime_attachments(soap: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_mime_attachment(
        soap: *mut soap,
        handle: *mut ::std::os::raw::c_void,
    ) -> *mut soap_multipart;
}
extern "C" {
    pub fn soap_match_cid(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_register_plugin_arg(
        arg1: *mut soap,
        fcreate: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut soap,
                arg2: *mut soap_plugin,
                arg3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_lookup_plugin(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn soap_attr_value(
        soap: *mut soap,
        name: *const ::std::os::raw::c_char,
        flag: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_set_attr(
        soap: *mut soap,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_clr_attr(soap: *mut soap);
}
extern "C" {
    pub fn soap_url(
        soap: *mut soap,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_encode_url(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> usize;
}
extern "C" {
    pub fn soap_encode_url_string(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
pub const xsd__boolean_xsd__boolean__false_: xsd__boolean = 0;
pub const xsd__boolean_xsd__boolean__true_: xsd__boolean = 1;
pub type xsd__boolean = u32;
pub const ns3__T_USCORELicenseType_ns3__T_USCORELicenseType__named: ns3__T_USCORELicenseType = 0;
pub const ns3__T_USCORELicenseType_ns3__T_USCORELicenseType__concurrent: ns3__T_USCORELicenseType =
    1;
pub type ns3__T_USCORELicenseType = u32;
pub const ns3__T_USCOREUserState_ns3__T_USCOREUserState__active: ns3__T_USCOREUserState = 0;
pub const ns3__T_USCOREUserState_ns3__T_USCOREUserState__locked: ns3__T_USCOREUserState = 1;
pub type ns3__T_USCOREUserState = u32;
/// \
/// *
/// Classes, Structs, and Unions                                               *
/// *
/// \
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ns2__GeneralWebserviceException {
    pub cause: *mut ::std::os::raw::c_char,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ns2__GeneralWebserviceException() {
    assert_eq!(
        ::std::mem::size_of::<ns2__GeneralWebserviceException>(),
        16usize,
        concat!("Size of: ", stringify!(ns2__GeneralWebserviceException))
    );
    assert_eq!(
        ::std::mem::align_of::<ns2__GeneralWebserviceException>(),
        8usize,
        concat!("Alignment of ", stringify!(ns2__GeneralWebserviceException))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ns2__GeneralWebserviceException>())).cause as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ns2__GeneralWebserviceException),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ns2__GeneralWebserviceException>())).message as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ns2__GeneralWebserviceException),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ns3__T_USCOREForeignKey {
    pub foreignID: *mut ::std::os::raw::c_char,
    pub foreignSystem: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ns3__T_USCOREForeignKey() {
    assert_eq!(
        ::std::mem::size_of::<ns3__T_USCOREForeignKey>(),
        16usize,
        concat!("Size of: ", stringify!(ns3__T_USCOREForeignKey))
    );
    assert_eq!(
        ::std::mem::align_of::<ns3__T_USCOREForeignKey>(),
        8usize,
        concat!("Alignment of ", stringify!(ns3__T_USCOREForeignKey))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ns3__T_USCOREForeignKey>())).foreignID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ns3__T_USCOREForeignKey),
            "::",
            stringify!(foreignID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ns3__T_USCOREForeignKey>())).foreignSystem as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ns3__T_USCOREForeignKey),
            "::",
            stringify!(foreignSystem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ns3__T_USCOREForeignKeyList {
    pub __sizeForeignKey: ::std::os::raw::c_int,
    pub ForeignKey: *mut ns3__T_USCOREForeignKey,
}
#[test]
fn bindgen_test_layout_ns3__T_USCOREForeignKeyList() {
    assert_eq!(
        ::std::mem::size_of::<ns3__T_USCOREForeignKeyList>(),
        16usize,
        concat!("Size of: ", stringify!(ns3__T_USCOREForeignKeyList))
    );
    assert_eq!(
        ::std::mem::align_of::<ns3__T_USCOREForeignKeyList>(),
        8usize,
        concat!("Alignment of ", stringify!(ns3__T_USCOREForeignKeyList))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ns3__T_USCOREForeignKeyList>())).__sizeForeignKey as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ns3__T_USCOREForeignKeyList),
            "::",
            stringify!(__sizeForeignKey)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ns3__T_USCOREForeignKeyList>())).ForeignKey as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ns3__T_USCOREForeignKeyList),
            "::",
            stringify!(ForeignKey)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ns3__union_UserIDInfo {
    pub userID: i64,
    pub userName: *mut ::std::os::raw::c_char,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__ns3__union_UserIDInfo() {
    assert_eq!(
        ::std::mem::size_of::<_ns3__union_UserIDInfo>(),
        8usize,
        concat!("Size of: ", stringify!(_ns3__union_UserIDInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns3__union_UserIDInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(_ns3__union_UserIDInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ns3__union_UserIDInfo>())).userID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__union_UserIDInfo),
            "::",
            stringify!(userID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ns3__union_UserIDInfo>())).userName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__union_UserIDInfo),
            "::",
            stringify!(userName)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ns3__UserIDInfo {
    pub __union_UserIDInfo: ::std::os::raw::c_int,
    pub union_UserIDInfo: _ns3__union_UserIDInfo,
}
#[test]
fn bindgen_test_layout_ns3__UserIDInfo() {
    assert_eq!(
        ::std::mem::size_of::<ns3__UserIDInfo>(),
        16usize,
        concat!("Size of: ", stringify!(ns3__UserIDInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ns3__UserIDInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ns3__UserIDInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ns3__UserIDInfo>())).__union_UserIDInfo as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ns3__UserIDInfo),
            "::",
            stringify!(__union_UserIDInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ns3__UserIDInfo>())).union_UserIDInfo as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ns3__UserIDInfo),
            "::",
            stringify!(union_UserIDInfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ns3__T_USCOREUser {
    pub userID: i64,
    pub personID: i64,
    pub username: *mut ::std::os::raw::c_char,
    pub permissionGroups: *mut ns3__T_USCOREIdList,
    pub lastname: *mut ::std::os::raw::c_char,
    pub firstname: *mut ::std::os::raw::c_char,
    pub personalNumber: *mut ::std::os::raw::c_char,
    pub email: *mut ::std::os::raw::c_char,
    pub licenseType: ns3__T_USCORELicenseType,
    pub userState: ns3__T_USCOREUserState,
    pub foreignKeyList: *mut ns3__T_USCOREForeignKeyList,
}
#[test]
fn bindgen_test_layout_ns3__T_USCOREUser() {
    assert_eq!(
        ::std::mem::size_of::<ns3__T_USCOREUser>(),
        80usize,
        concat!("Size of: ", stringify!(ns3__T_USCOREUser))
    );
    assert_eq!(
        ::std::mem::align_of::<ns3__T_USCOREUser>(),
        8usize,
        concat!("Alignment of ", stringify!(ns3__T_USCOREUser))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ns3__T_USCOREUser>())).userID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ns3__T_USCOREUser),
            "::",
            stringify!(userID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ns3__T_USCOREUser>())).personID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ns3__T_USCOREUser),
            "::",
            stringify!(personID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ns3__T_USCOREUser>())).username as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ns3__T_USCOREUser),
            "::",
            stringify!(username)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ns3__T_USCOREUser>())).permissionGroups as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ns3__T_USCOREUser),
            "::",
            stringify!(permissionGroups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ns3__T_USCOREUser>())).lastname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ns3__T_USCOREUser),
            "::",
            stringify!(lastname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ns3__T_USCOREUser>())).firstname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ns3__T_USCOREUser),
            "::",
            stringify!(firstname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ns3__T_USCOREUser>())).personalNumber as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ns3__T_USCOREUser),
            "::",
            stringify!(personalNumber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ns3__T_USCOREUser>())).email as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ns3__T_USCOREUser),
            "::",
            stringify!(email)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ns3__T_USCOREUser>())).licenseType as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ns3__T_USCOREUser),
            "::",
            stringify!(licenseType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ns3__T_USCOREUser>())).userState as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ns3__T_USCOREUser),
            "::",
            stringify!(userState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ns3__T_USCOREUser>())).foreignKeyList as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ns3__T_USCOREUser),
            "::",
            stringify!(foreignKeyList)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ns3__T_USCOREIdList {
    pub __sizeID: ::std::os::raw::c_int,
    pub ID: *mut i64,
}
#[test]
fn bindgen_test_layout_ns3__T_USCOREIdList() {
    assert_eq!(
        ::std::mem::size_of::<ns3__T_USCOREIdList>(),
        16usize,
        concat!("Size of: ", stringify!(ns3__T_USCOREIdList))
    );
    assert_eq!(
        ::std::mem::align_of::<ns3__T_USCOREIdList>(),
        8usize,
        concat!("Alignment of ", stringify!(ns3__T_USCOREIdList))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ns3__T_USCOREIdList>())).__sizeID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ns3__T_USCOREIdList),
            "::",
            stringify!(__sizeID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ns3__T_USCOREIdList>())).ID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ns3__T_USCOREIdList),
            "::",
            stringify!(ID)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns3__session {
    pub sessionID: *mut ::std::os::raw::c_char,
    pub personID: i64,
}
#[test]
fn bindgen_test_layout__ns3__session() {
    assert_eq!(
        ::std::mem::size_of::<_ns3__session>(),
        16usize,
        concat!("Size of: ", stringify!(_ns3__session))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns3__session>(),
        8usize,
        concat!("Alignment of ", stringify!(_ns3__session))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ns3__session>())).sessionID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__session),
            "::",
            stringify!(sessionID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ns3__session>())).personID as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__session),
            "::",
            stringify!(personID)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns3__LoginRequestParameter {
    pub username: *mut ::std::os::raw::c_char,
    pub password: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ns3__LoginRequestParameter() {
    assert_eq!(
        ::std::mem::size_of::<_ns3__LoginRequestParameter>(),
        16usize,
        concat!("Size of: ", stringify!(_ns3__LoginRequestParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns3__LoginRequestParameter>(),
        8usize,
        concat!("Alignment of ", stringify!(_ns3__LoginRequestParameter))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__LoginRequestParameter>())).username as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__LoginRequestParameter),
            "::",
            stringify!(username)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__LoginRequestParameter>())).password as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__LoginRequestParameter),
            "::",
            stringify!(password)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns3__LoginNoAuthRequestParameter {
    pub username: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ns3__LoginNoAuthRequestParameter() {
    assert_eq!(
        ::std::mem::size_of::<_ns3__LoginNoAuthRequestParameter>(),
        8usize,
        concat!("Size of: ", stringify!(_ns3__LoginNoAuthRequestParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns3__LoginNoAuthRequestParameter>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ns3__LoginNoAuthRequestParameter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__LoginNoAuthRequestParameter>())).username as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__LoginNoAuthRequestParameter),
            "::",
            stringify!(username)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns3__LoginSAMLRequestParameter {
    pub SAMLartifact: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ns3__LoginSAMLRequestParameter() {
    assert_eq!(
        ::std::mem::size_of::<_ns3__LoginSAMLRequestParameter>(),
        8usize,
        concat!("Size of: ", stringify!(_ns3__LoginSAMLRequestParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns3__LoginSAMLRequestParameter>(),
        8usize,
        concat!("Alignment of ", stringify!(_ns3__LoginSAMLRequestParameter))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__LoginSAMLRequestParameter>())).SAMLartifact as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__LoginSAMLRequestParameter),
            "::",
            stringify!(SAMLartifact)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ns3__union_LoginImpersonateRequestParameter {
    pub ImpersonateUsername: *mut ::std::os::raw::c_char,
    pub ImpersonateUserID: *mut i64,
    pub ImpersonateForeignKey: *mut ns3__T_USCOREForeignKey,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__ns3__union_LoginImpersonateRequestParameter() {
    assert_eq!(
        ::std::mem::size_of::<_ns3__union_LoginImpersonateRequestParameter>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(_ns3__union_LoginImpersonateRequestParameter)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ns3__union_LoginImpersonateRequestParameter>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ns3__union_LoginImpersonateRequestParameter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__union_LoginImpersonateRequestParameter>()))
                .ImpersonateUsername as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__union_LoginImpersonateRequestParameter),
            "::",
            stringify!(ImpersonateUsername)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__union_LoginImpersonateRequestParameter>()))
                .ImpersonateUserID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__union_LoginImpersonateRequestParameter),
            "::",
            stringify!(ImpersonateUserID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__union_LoginImpersonateRequestParameter>()))
                .ImpersonateForeignKey as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__union_LoginImpersonateRequestParameter),
            "::",
            stringify!(ImpersonateForeignKey)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ns3__LoginImpersonateRequestParameter {
    pub username: *mut ::std::os::raw::c_char,
    pub password: *mut ::std::os::raw::c_char,
    pub __union_LoginImpersonateRequestParameter: ::std::os::raw::c_int,
    pub union_LoginImpersonateRequestParameter: _ns3__union_LoginImpersonateRequestParameter,
}
#[test]
fn bindgen_test_layout__ns3__LoginImpersonateRequestParameter() {
    assert_eq!(
        ::std::mem::size_of::<_ns3__LoginImpersonateRequestParameter>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(_ns3__LoginImpersonateRequestParameter)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ns3__LoginImpersonateRequestParameter>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ns3__LoginImpersonateRequestParameter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__LoginImpersonateRequestParameter>())).username as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__LoginImpersonateRequestParameter),
            "::",
            stringify!(username)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__LoginImpersonateRequestParameter>())).password as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__LoginImpersonateRequestParameter),
            "::",
            stringify!(password)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__LoginImpersonateRequestParameter>()))
                .__union_LoginImpersonateRequestParameter as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__LoginImpersonateRequestParameter),
            "::",
            stringify!(__union_LoginImpersonateRequestParameter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__LoginImpersonateRequestParameter>()))
                .union_LoginImpersonateRequestParameter as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__LoginImpersonateRequestParameter),
            "::",
            stringify!(union_LoginImpersonateRequestParameter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns3__LogoutRequestParameter {
    pub sessionID: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ns3__LogoutRequestParameter() {
    assert_eq!(
        ::std::mem::size_of::<_ns3__LogoutRequestParameter>(),
        8usize,
        concat!("Size of: ", stringify!(_ns3__LogoutRequestParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns3__LogoutRequestParameter>(),
        8usize,
        concat!("Alignment of ", stringify!(_ns3__LogoutRequestParameter))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__LogoutRequestParameter>())).sessionID as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__LogoutRequestParameter),
            "::",
            stringify!(sessionID)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns3__createUserRequestParameter {
    pub sessionID: *mut ::std::os::raw::c_char,
    pub personID: i64,
    pub username: *mut ::std::os::raw::c_char,
    pub passwort: *mut ::std::os::raw::c_char,
    pub permissionGroups: *mut ns3__T_USCOREIdList,
    pub accessFrom: *mut ::std::os::raw::c_char,
    pub accessTo: *mut ::std::os::raw::c_char,
    pub licenseType: *mut ns3__T_USCORELicenseType,
    pub foreignKeyList: *mut ns3__T_USCOREForeignKeyList,
}
#[test]
fn bindgen_test_layout__ns3__createUserRequestParameter() {
    assert_eq!(
        ::std::mem::size_of::<_ns3__createUserRequestParameter>(),
        72usize,
        concat!("Size of: ", stringify!(_ns3__createUserRequestParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns3__createUserRequestParameter>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ns3__createUserRequestParameter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__createUserRequestParameter>())).sessionID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__createUserRequestParameter),
            "::",
            stringify!(sessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__createUserRequestParameter>())).personID as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__createUserRequestParameter),
            "::",
            stringify!(personID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__createUserRequestParameter>())).username as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__createUserRequestParameter),
            "::",
            stringify!(username)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__createUserRequestParameter>())).passwort as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__createUserRequestParameter),
            "::",
            stringify!(passwort)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__createUserRequestParameter>())).permissionGroups
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__createUserRequestParameter),
            "::",
            stringify!(permissionGroups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__createUserRequestParameter>())).accessFrom as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__createUserRequestParameter),
            "::",
            stringify!(accessFrom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__createUserRequestParameter>())).accessTo as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__createUserRequestParameter),
            "::",
            stringify!(accessTo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__createUserRequestParameter>())).licenseType as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__createUserRequestParameter),
            "::",
            stringify!(licenseType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__createUserRequestParameter>())).foreignKeyList as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__createUserRequestParameter),
            "::",
            stringify!(foreignKeyList)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns3__searchUserRequestParameter {
    pub sessionID: *mut ::std::os::raw::c_char,
    pub username: *mut ::std::os::raw::c_char,
    pub email: *mut ::std::os::raw::c_char,
    pub personID: *mut i64,
    pub permissionGroupID: *mut i64,
    pub firstname: *mut ::std::os::raw::c_char,
    pub lastname: *mut ::std::os::raw::c_char,
    pub personalNumber: *mut ::std::os::raw::c_char,
    pub licenseType: *mut ns3__T_USCORELicenseType,
    pub userState: *mut ns3__T_USCOREUserState,
    pub foreignKey: *mut ns3__T_USCOREForeignKey,
}
#[test]
fn bindgen_test_layout__ns3__searchUserRequestParameter() {
    assert_eq!(
        ::std::mem::size_of::<_ns3__searchUserRequestParameter>(),
        88usize,
        concat!("Size of: ", stringify!(_ns3__searchUserRequestParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns3__searchUserRequestParameter>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ns3__searchUserRequestParameter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__searchUserRequestParameter>())).sessionID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__searchUserRequestParameter),
            "::",
            stringify!(sessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__searchUserRequestParameter>())).username as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__searchUserRequestParameter),
            "::",
            stringify!(username)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__searchUserRequestParameter>())).email as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__searchUserRequestParameter),
            "::",
            stringify!(email)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__searchUserRequestParameter>())).personID as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__searchUserRequestParameter),
            "::",
            stringify!(personID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__searchUserRequestParameter>())).permissionGroupID
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__searchUserRequestParameter),
            "::",
            stringify!(permissionGroupID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__searchUserRequestParameter>())).firstname as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__searchUserRequestParameter),
            "::",
            stringify!(firstname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__searchUserRequestParameter>())).lastname as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__searchUserRequestParameter),
            "::",
            stringify!(lastname)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__searchUserRequestParameter>())).personalNumber as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__searchUserRequestParameter),
            "::",
            stringify!(personalNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__searchUserRequestParameter>())).licenseType as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__searchUserRequestParameter),
            "::",
            stringify!(licenseType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__searchUserRequestParameter>())).userState as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__searchUserRequestParameter),
            "::",
            stringify!(userState)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__searchUserRequestParameter>())).foreignKey as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__searchUserRequestParameter),
            "::",
            stringify!(foreignKey)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns3__deleteUserRequestParameter {
    pub sessionID: *mut ::std::os::raw::c_char,
    pub user: *mut ns3__UserIDInfo,
}
#[test]
fn bindgen_test_layout__ns3__deleteUserRequestParameter() {
    assert_eq!(
        ::std::mem::size_of::<_ns3__deleteUserRequestParameter>(),
        16usize,
        concat!("Size of: ", stringify!(_ns3__deleteUserRequestParameter))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns3__deleteUserRequestParameter>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ns3__deleteUserRequestParameter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__deleteUserRequestParameter>())).sessionID as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__deleteUserRequestParameter),
            "::",
            stringify!(sessionID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns3__deleteUserRequestParameter>())).user as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__deleteUserRequestParameter),
            "::",
            stringify!(user)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns3__UserList {
    pub __sizeUser: ::std::os::raw::c_int,
    pub User: *mut ns3__T_USCOREUser,
}
#[test]
fn bindgen_test_layout__ns3__UserList() {
    assert_eq!(
        ::std::mem::size_of::<_ns3__UserList>(),
        16usize,
        concat!("Size of: ", stringify!(_ns3__UserList))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns3__UserList>(),
        8usize,
        concat!("Alignment of ", stringify!(_ns3__UserList))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ns3__UserList>())).__sizeUser as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__UserList),
            "::",
            stringify!(__sizeUser)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ns3__UserList>())).User as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns3__UserList),
            "::",
            stringify!(User)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ns2__UserManagementException {
    pub cause: *mut ::std::os::raw::c_char,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ns2__UserManagementException() {
    assert_eq!(
        ::std::mem::size_of::<ns2__UserManagementException>(),
        16usize,
        concat!("Size of: ", stringify!(ns2__UserManagementException))
    );
    assert_eq!(
        ::std::mem::align_of::<ns2__UserManagementException>(),
        8usize,
        concat!("Alignment of ", stringify!(ns2__UserManagementException))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ns2__UserManagementException>())).cause as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ns2__UserManagementException),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ns2__UserManagementException>())).message as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ns2__UserManagementException),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns2__WeekFinishedException {
    pub cause: *mut ::std::os::raw::c_char,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ns2__WeekFinishedException() {
    assert_eq!(
        ::std::mem::size_of::<_ns2__WeekFinishedException>(),
        16usize,
        concat!("Size of: ", stringify!(_ns2__WeekFinishedException))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns2__WeekFinishedException>(),
        8usize,
        concat!("Alignment of ", stringify!(_ns2__WeekFinishedException))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__WeekFinishedException>())).cause as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__WeekFinishedException),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__WeekFinishedException>())).message as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__WeekFinishedException),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns2__InvalidParameterException {
    pub cause: *mut ::std::os::raw::c_char,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ns2__InvalidParameterException() {
    assert_eq!(
        ::std::mem::size_of::<_ns2__InvalidParameterException>(),
        16usize,
        concat!("Size of: ", stringify!(_ns2__InvalidParameterException))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns2__InvalidParameterException>(),
        8usize,
        concat!("Alignment of ", stringify!(_ns2__InvalidParameterException))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__InvalidParameterException>())).cause as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__InvalidParameterException),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__InvalidParameterException>())).message as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__InvalidParameterException),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns2__AssertionException {
    pub cause: *mut ::std::os::raw::c_char,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ns2__AssertionException() {
    assert_eq!(
        ::std::mem::size_of::<_ns2__AssertionException>(),
        16usize,
        concat!("Size of: ", stringify!(_ns2__AssertionException))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns2__AssertionException>(),
        8usize,
        concat!("Alignment of ", stringify!(_ns2__AssertionException))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ns2__AssertionException>())).cause as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__AssertionException),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__AssertionException>())).message as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__AssertionException),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns2__GeneralWebserviceException {
    pub cause: *mut ::std::os::raw::c_char,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ns2__GeneralWebserviceException() {
    assert_eq!(
        ::std::mem::size_of::<_ns2__GeneralWebserviceException>(),
        16usize,
        concat!("Size of: ", stringify!(_ns2__GeneralWebserviceException))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns2__GeneralWebserviceException>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ns2__GeneralWebserviceException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__GeneralWebserviceException>())).cause as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__GeneralWebserviceException),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__GeneralWebserviceException>())).message as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__GeneralWebserviceException),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ns2__InvalidLicenseException {
    pub cause: *mut ::std::os::raw::c_char,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ns2__InvalidLicenseException() {
    assert_eq!(
        ::std::mem::size_of::<ns2__InvalidLicenseException>(),
        16usize,
        concat!("Size of: ", stringify!(ns2__InvalidLicenseException))
    );
    assert_eq!(
        ::std::mem::align_of::<ns2__InvalidLicenseException>(),
        8usize,
        concat!("Alignment of ", stringify!(ns2__InvalidLicenseException))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ns2__InvalidLicenseException>())).cause as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ns2__InvalidLicenseException),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ns2__InvalidLicenseException>())).message as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ns2__InvalidLicenseException),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns2__InvalidSessionException {
    pub cause: *mut ::std::os::raw::c_char,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ns2__InvalidSessionException() {
    assert_eq!(
        ::std::mem::size_of::<_ns2__InvalidSessionException>(),
        16usize,
        concat!("Size of: ", stringify!(_ns2__InvalidSessionException))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns2__InvalidSessionException>(),
        8usize,
        concat!("Alignment of ", stringify!(_ns2__InvalidSessionException))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__InvalidSessionException>())).cause as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__InvalidSessionException),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__InvalidSessionException>())).message as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__InvalidSessionException),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns2__InvalidClientException {
    pub cause: *mut ::std::os::raw::c_char,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ns2__InvalidClientException() {
    assert_eq!(
        ::std::mem::size_of::<_ns2__InvalidClientException>(),
        16usize,
        concat!("Size of: ", stringify!(_ns2__InvalidClientException))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns2__InvalidClientException>(),
        8usize,
        concat!("Alignment of ", stringify!(_ns2__InvalidClientException))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__InvalidClientException>())).cause as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__InvalidClientException),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__InvalidClientException>())).message as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__InvalidClientException),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns2__PermissionDeniedException {
    pub cause: *mut ::std::os::raw::c_char,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ns2__PermissionDeniedException() {
    assert_eq!(
        ::std::mem::size_of::<_ns2__PermissionDeniedException>(),
        16usize,
        concat!("Size of: ", stringify!(_ns2__PermissionDeniedException))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns2__PermissionDeniedException>(),
        8usize,
        concat!("Alignment of ", stringify!(_ns2__PermissionDeniedException))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__PermissionDeniedException>())).cause as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__PermissionDeniedException),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__PermissionDeniedException>())).message as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__PermissionDeniedException),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns2__InvalidUsernamePasswordCombinationException {
    pub cause: *mut ::std::os::raw::c_char,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ns2__InvalidUsernamePasswordCombinationException() {
    assert_eq!(
        ::std::mem::size_of::<_ns2__InvalidUsernamePasswordCombinationException>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_ns2__InvalidUsernamePasswordCombinationException)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ns2__InvalidUsernamePasswordCombinationException>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ns2__InvalidUsernamePasswordCombinationException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__InvalidUsernamePasswordCombinationException>())).cause
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__InvalidUsernamePasswordCombinationException),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__InvalidUsernamePasswordCombinationException>())).message
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__InvalidUsernamePasswordCombinationException),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns2__InvalidUsernameException {
    pub cause: *mut ::std::os::raw::c_char,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ns2__InvalidUsernameException() {
    assert_eq!(
        ::std::mem::size_of::<_ns2__InvalidUsernameException>(),
        16usize,
        concat!("Size of: ", stringify!(_ns2__InvalidUsernameException))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns2__InvalidUsernameException>(),
        8usize,
        concat!("Alignment of ", stringify!(_ns2__InvalidUsernameException))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__InvalidUsernameException>())).cause as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__InvalidUsernameException),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__InvalidUsernameException>())).message as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__InvalidUsernameException),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns2__InvalidDatesException {
    pub cause: *mut ::std::os::raw::c_char,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ns2__InvalidDatesException() {
    assert_eq!(
        ::std::mem::size_of::<_ns2__InvalidDatesException>(),
        16usize,
        concat!("Size of: ", stringify!(_ns2__InvalidDatesException))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns2__InvalidDatesException>(),
        8usize,
        concat!("Alignment of ", stringify!(_ns2__InvalidDatesException))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__InvalidDatesException>())).cause as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__InvalidDatesException),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__InvalidDatesException>())).message as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__InvalidDatesException),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns2__ServerMaintenanceException {
    pub cause: *mut ::std::os::raw::c_char,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ns2__ServerMaintenanceException() {
    assert_eq!(
        ::std::mem::size_of::<_ns2__ServerMaintenanceException>(),
        16usize,
        concat!("Size of: ", stringify!(_ns2__ServerMaintenanceException))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns2__ServerMaintenanceException>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ns2__ServerMaintenanceException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__ServerMaintenanceException>())).cause as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__ServerMaintenanceException),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__ServerMaintenanceException>())).message as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__ServerMaintenanceException),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns2__ImpersonatedUserNotFoundException {
    pub cause: *mut ::std::os::raw::c_char,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ns2__ImpersonatedUserNotFoundException() {
    assert_eq!(
        ::std::mem::size_of::<_ns2__ImpersonatedUserNotFoundException>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_ns2__ImpersonatedUserNotFoundException)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ns2__ImpersonatedUserNotFoundException>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ns2__ImpersonatedUserNotFoundException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__ImpersonatedUserNotFoundException>())).cause as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__ImpersonatedUserNotFoundException),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__ImpersonatedUserNotFoundException>())).message as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__ImpersonatedUserNotFoundException),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns2__InvalidNrOfImpersonationsException {
    pub cause: *mut ::std::os::raw::c_char,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ns2__InvalidNrOfImpersonationsException() {
    assert_eq!(
        ::std::mem::size_of::<_ns2__InvalidNrOfImpersonationsException>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_ns2__InvalidNrOfImpersonationsException)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ns2__InvalidNrOfImpersonationsException>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ns2__InvalidNrOfImpersonationsException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__InvalidNrOfImpersonationsException>())).cause as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__InvalidNrOfImpersonationsException),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__InvalidNrOfImpersonationsException>())).message as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__InvalidNrOfImpersonationsException),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns2__InvalidNamedLicenseException {
    pub cause: *mut ::std::os::raw::c_char,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ns2__InvalidNamedLicenseException() {
    assert_eq!(
        ::std::mem::size_of::<_ns2__InvalidNamedLicenseException>(),
        16usize,
        concat!("Size of: ", stringify!(_ns2__InvalidNamedLicenseException))
    );
    assert_eq!(
        ::std::mem::align_of::<_ns2__InvalidNamedLicenseException>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ns2__InvalidNamedLicenseException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__InvalidNamedLicenseException>())).cause as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__InvalidNamedLicenseException),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__InvalidNamedLicenseException>())).message as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__InvalidNamedLicenseException),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ns2__InvalidConcurrentLicenseException {
    pub cause: *mut ::std::os::raw::c_char,
    pub message: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__ns2__InvalidConcurrentLicenseException() {
    assert_eq!(
        ::std::mem::size_of::<_ns2__InvalidConcurrentLicenseException>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(_ns2__InvalidConcurrentLicenseException)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<_ns2__InvalidConcurrentLicenseException>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_ns2__InvalidConcurrentLicenseException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__InvalidConcurrentLicenseException>())).cause as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__InvalidConcurrentLicenseException),
            "::",
            stringify!(cause)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ns2__InvalidConcurrentLicenseException>())).message as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ns2__InvalidConcurrentLicenseException),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SOAP_ENV__Detail {
    pub ns2__AssertionException: *mut _ns2__AssertionException,
    pub ns2__GeneralWebserviceException: *mut _ns2__GeneralWebserviceException,
    pub ns2__ImpersonatedUserNotFoundException: *mut _ns2__ImpersonatedUserNotFoundException,
    pub ns2__InvalidClientException: *mut _ns2__InvalidClientException,
    pub ns2__InvalidConcurrentLicenseException: *mut _ns2__InvalidConcurrentLicenseException,
    pub ns2__InvalidDatesException: *mut _ns2__InvalidDatesException,
    pub ns2__InvalidNamedLicenseException: *mut _ns2__InvalidNamedLicenseException,
    pub ns2__InvalidNrOfImpersonationsException: *mut _ns2__InvalidNrOfImpersonationsException,
    pub ns2__InvalidParameterException: *mut _ns2__InvalidParameterException,
    pub ns2__InvalidSessionException: *mut _ns2__InvalidSessionException,
    pub ns2__InvalidUsernameException: *mut _ns2__InvalidUsernameException,
    pub ns2__InvalidUsernamePasswordCombinationException:
        *mut _ns2__InvalidUsernamePasswordCombinationException,
    pub ns2__PermissionDeniedException: *mut _ns2__PermissionDeniedException,
    pub ns2__ServerMaintenanceException: *mut _ns2__ServerMaintenanceException,
    pub __type: ::std::os::raw::c_int,
    pub fault: *mut ::std::os::raw::c_void,
    pub __any: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SOAP_ENV__Detail() {
    assert_eq!(
        ::std::mem::size_of::<SOAP_ENV__Detail>(),
        136usize,
        concat!("Size of: ", stringify!(SOAP_ENV__Detail))
    );
    assert_eq!(
        ::std::mem::align_of::<SOAP_ENV__Detail>(),
        8usize,
        concat!("Alignment of ", stringify!(SOAP_ENV__Detail))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SOAP_ENV__Detail>())).ns2__AssertionException as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Detail),
            "::",
            stringify!(ns2__AssertionException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SOAP_ENV__Detail>())).ns2__GeneralWebserviceException as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Detail),
            "::",
            stringify!(ns2__GeneralWebserviceException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SOAP_ENV__Detail>())).ns2__ImpersonatedUserNotFoundException
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Detail),
            "::",
            stringify!(ns2__ImpersonatedUserNotFoundException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SOAP_ENV__Detail>())).ns2__InvalidClientException as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Detail),
            "::",
            stringify!(ns2__InvalidClientException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SOAP_ENV__Detail>())).ns2__InvalidConcurrentLicenseException
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Detail),
            "::",
            stringify!(ns2__InvalidConcurrentLicenseException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SOAP_ENV__Detail>())).ns2__InvalidDatesException as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Detail),
            "::",
            stringify!(ns2__InvalidDatesException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SOAP_ENV__Detail>())).ns2__InvalidNamedLicenseException
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Detail),
            "::",
            stringify!(ns2__InvalidNamedLicenseException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SOAP_ENV__Detail>())).ns2__InvalidNrOfImpersonationsException
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Detail),
            "::",
            stringify!(ns2__InvalidNrOfImpersonationsException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SOAP_ENV__Detail>())).ns2__InvalidParameterException as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Detail),
            "::",
            stringify!(ns2__InvalidParameterException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SOAP_ENV__Detail>())).ns2__InvalidSessionException as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Detail),
            "::",
            stringify!(ns2__InvalidSessionException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SOAP_ENV__Detail>())).ns2__InvalidUsernameException as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Detail),
            "::",
            stringify!(ns2__InvalidUsernameException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SOAP_ENV__Detail>()))
                .ns2__InvalidUsernamePasswordCombinationException as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Detail),
            "::",
            stringify!(ns2__InvalidUsernamePasswordCombinationException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SOAP_ENV__Detail>())).ns2__PermissionDeniedException as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Detail),
            "::",
            stringify!(ns2__PermissionDeniedException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SOAP_ENV__Detail>())).ns2__ServerMaintenanceException as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Detail),
            "::",
            stringify!(ns2__ServerMaintenanceException)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SOAP_ENV__Detail>())).__type as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Detail),
            "::",
            stringify!(__type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SOAP_ENV__Detail>())).fault as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Detail),
            "::",
            stringify!(fault)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SOAP_ENV__Detail>())).__any as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Detail),
            "::",
            stringify!(__any)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ns1__Login {
    pub ns3__LoginRequestParameter: *mut _ns3__LoginRequestParameter,
}
#[test]
fn bindgen_test_layout___ns1__Login() {
    assert_eq!(
        ::std::mem::size_of::<__ns1__Login>(),
        8usize,
        concat!("Size of: ", stringify!(__ns1__Login))
    );
    assert_eq!(
        ::std::mem::align_of::<__ns1__Login>(),
        8usize,
        concat!("Alignment of ", stringify!(__ns1__Login))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ns1__Login>())).ns3__LoginRequestParameter as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns1__Login),
            "::",
            stringify!(ns3__LoginRequestParameter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ns1__LoginNoAuth {
    pub ns3__LoginNoAuthRequestParameter: *mut _ns3__LoginNoAuthRequestParameter,
}
#[test]
fn bindgen_test_layout___ns1__LoginNoAuth() {
    assert_eq!(
        ::std::mem::size_of::<__ns1__LoginNoAuth>(),
        8usize,
        concat!("Size of: ", stringify!(__ns1__LoginNoAuth))
    );
    assert_eq!(
        ::std::mem::align_of::<__ns1__LoginNoAuth>(),
        8usize,
        concat!("Alignment of ", stringify!(__ns1__LoginNoAuth))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ns1__LoginNoAuth>())).ns3__LoginNoAuthRequestParameter
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns1__LoginNoAuth),
            "::",
            stringify!(ns3__LoginNoAuthRequestParameter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ns1__LoginSAML {
    pub ns3__LoginSAMLRequestParameter: *mut _ns3__LoginSAMLRequestParameter,
}
#[test]
fn bindgen_test_layout___ns1__LoginSAML() {
    assert_eq!(
        ::std::mem::size_of::<__ns1__LoginSAML>(),
        8usize,
        concat!("Size of: ", stringify!(__ns1__LoginSAML))
    );
    assert_eq!(
        ::std::mem::align_of::<__ns1__LoginSAML>(),
        8usize,
        concat!("Alignment of ", stringify!(__ns1__LoginSAML))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ns1__LoginSAML>())).ns3__LoginSAMLRequestParameter as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns1__LoginSAML),
            "::",
            stringify!(ns3__LoginSAMLRequestParameter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ns1__LoginImpersonate {
    pub ns3__LoginImpersonateRequestParameter: *mut _ns3__LoginImpersonateRequestParameter,
}
#[test]
fn bindgen_test_layout___ns1__LoginImpersonate() {
    assert_eq!(
        ::std::mem::size_of::<__ns1__LoginImpersonate>(),
        8usize,
        concat!("Size of: ", stringify!(__ns1__LoginImpersonate))
    );
    assert_eq!(
        ::std::mem::align_of::<__ns1__LoginImpersonate>(),
        8usize,
        concat!("Alignment of ", stringify!(__ns1__LoginImpersonate))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ns1__LoginImpersonate>()))
                .ns3__LoginImpersonateRequestParameter as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns1__LoginImpersonate),
            "::",
            stringify!(ns3__LoginImpersonateRequestParameter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ns1__LogoutResponse {
    pub dummy: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout___ns1__LogoutResponse() {
    assert_eq!(
        ::std::mem::size_of::<__ns1__LogoutResponse>(),
        1usize,
        concat!("Size of: ", stringify!(__ns1__LogoutResponse))
    );
    assert_eq!(
        ::std::mem::align_of::<__ns1__LogoutResponse>(),
        1usize,
        concat!("Alignment of ", stringify!(__ns1__LogoutResponse))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ns1__LogoutResponse>())).dummy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns1__LogoutResponse),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ns1__Logout {
    pub ns3__LogoutRequestParameter: *mut _ns3__LogoutRequestParameter,
}
#[test]
fn bindgen_test_layout___ns1__Logout() {
    assert_eq!(
        ::std::mem::size_of::<__ns1__Logout>(),
        8usize,
        concat!("Size of: ", stringify!(__ns1__Logout))
    );
    assert_eq!(
        ::std::mem::align_of::<__ns1__Logout>(),
        8usize,
        concat!("Alignment of ", stringify!(__ns1__Logout))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ns1__Logout>())).ns3__LogoutRequestParameter as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns1__Logout),
            "::",
            stringify!(ns3__LogoutRequestParameter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ns1__createUser {
    pub ns3__createUserRequestParameter: *mut _ns3__createUserRequestParameter,
}
#[test]
fn bindgen_test_layout___ns1__createUser() {
    assert_eq!(
        ::std::mem::size_of::<__ns1__createUser>(),
        8usize,
        concat!("Size of: ", stringify!(__ns1__createUser))
    );
    assert_eq!(
        ::std::mem::align_of::<__ns1__createUser>(),
        8usize,
        concat!("Alignment of ", stringify!(__ns1__createUser))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ns1__createUser>())).ns3__createUserRequestParameter
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns1__createUser),
            "::",
            stringify!(ns3__createUserRequestParameter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ns1__deleteUserResponse {
    pub dummy: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout___ns1__deleteUserResponse() {
    assert_eq!(
        ::std::mem::size_of::<__ns1__deleteUserResponse>(),
        1usize,
        concat!("Size of: ", stringify!(__ns1__deleteUserResponse))
    );
    assert_eq!(
        ::std::mem::align_of::<__ns1__deleteUserResponse>(),
        1usize,
        concat!("Alignment of ", stringify!(__ns1__deleteUserResponse))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__ns1__deleteUserResponse>())).dummy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns1__deleteUserResponse),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ns1__deleteUser {
    pub ns3__deleteUserRequestParameter: *mut _ns3__deleteUserRequestParameter,
}
#[test]
fn bindgen_test_layout___ns1__deleteUser() {
    assert_eq!(
        ::std::mem::size_of::<__ns1__deleteUser>(),
        8usize,
        concat!("Size of: ", stringify!(__ns1__deleteUser))
    );
    assert_eq!(
        ::std::mem::align_of::<__ns1__deleteUser>(),
        8usize,
        concat!("Alignment of ", stringify!(__ns1__deleteUser))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ns1__deleteUser>())).ns3__deleteUserRequestParameter
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns1__deleteUser),
            "::",
            stringify!(ns3__deleteUserRequestParameter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ns1__searchUser {
    pub ns3__searchUserRequestParameter: *mut _ns3__searchUserRequestParameter,
}
#[test]
fn bindgen_test_layout___ns1__searchUser() {
    assert_eq!(
        ::std::mem::size_of::<__ns1__searchUser>(),
        8usize,
        concat!("Size of: ", stringify!(__ns1__searchUser))
    );
    assert_eq!(
        ::std::mem::align_of::<__ns1__searchUser>(),
        8usize,
        concat!("Alignment of ", stringify!(__ns1__searchUser))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__ns1__searchUser>())).ns3__searchUserRequestParameter
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ns1__searchUser),
            "::",
            stringify!(ns3__searchUserRequestParameter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SOAP_ENV__Header {
    pub dummy: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SOAP_ENV__Header() {
    assert_eq!(
        ::std::mem::size_of::<SOAP_ENV__Header>(),
        1usize,
        concat!("Size of: ", stringify!(SOAP_ENV__Header))
    );
    assert_eq!(
        ::std::mem::align_of::<SOAP_ENV__Header>(),
        1usize,
        concat!("Alignment of ", stringify!(SOAP_ENV__Header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SOAP_ENV__Header>())).dummy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Header),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SOAP_ENV__Code {
    pub SOAP_ENV__Value: *mut ::std::os::raw::c_char,
    pub SOAP_ENV__Subcode: *mut SOAP_ENV__Code,
}
#[test]
fn bindgen_test_layout_SOAP_ENV__Code() {
    assert_eq!(
        ::std::mem::size_of::<SOAP_ENV__Code>(),
        16usize,
        concat!("Size of: ", stringify!(SOAP_ENV__Code))
    );
    assert_eq!(
        ::std::mem::align_of::<SOAP_ENV__Code>(),
        8usize,
        concat!("Alignment of ", stringify!(SOAP_ENV__Code))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SOAP_ENV__Code>())).SOAP_ENV__Value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Code),
            "::",
            stringify!(SOAP_ENV__Value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SOAP_ENV__Code>())).SOAP_ENV__Subcode as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Code),
            "::",
            stringify!(SOAP_ENV__Subcode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SOAP_ENV__Reason {
    pub SOAP_ENV__Text: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SOAP_ENV__Reason() {
    assert_eq!(
        ::std::mem::size_of::<SOAP_ENV__Reason>(),
        8usize,
        concat!("Size of: ", stringify!(SOAP_ENV__Reason))
    );
    assert_eq!(
        ::std::mem::align_of::<SOAP_ENV__Reason>(),
        8usize,
        concat!("Alignment of ", stringify!(SOAP_ENV__Reason))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SOAP_ENV__Reason>())).SOAP_ENV__Text as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Reason),
            "::",
            stringify!(SOAP_ENV__Text)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SOAP_ENV__Fault {
    pub faultcode: *mut ::std::os::raw::c_char,
    pub faultstring: *mut ::std::os::raw::c_char,
    pub faultactor: *mut ::std::os::raw::c_char,
    pub detail: *mut SOAP_ENV__Detail,
    pub SOAP_ENV__Code: *mut SOAP_ENV__Code,
    pub SOAP_ENV__Reason: *mut SOAP_ENV__Reason,
    pub SOAP_ENV__Node: *mut ::std::os::raw::c_char,
    pub SOAP_ENV__Role: *mut ::std::os::raw::c_char,
    pub SOAP_ENV__Detail: *mut SOAP_ENV__Detail,
}
#[test]
fn bindgen_test_layout_SOAP_ENV__Fault() {
    assert_eq!(
        ::std::mem::size_of::<SOAP_ENV__Fault>(),
        72usize,
        concat!("Size of: ", stringify!(SOAP_ENV__Fault))
    );
    assert_eq!(
        ::std::mem::align_of::<SOAP_ENV__Fault>(),
        8usize,
        concat!("Alignment of ", stringify!(SOAP_ENV__Fault))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SOAP_ENV__Fault>())).faultcode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Fault),
            "::",
            stringify!(faultcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SOAP_ENV__Fault>())).faultstring as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Fault),
            "::",
            stringify!(faultstring)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SOAP_ENV__Fault>())).faultactor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Fault),
            "::",
            stringify!(faultactor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SOAP_ENV__Fault>())).detail as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Fault),
            "::",
            stringify!(detail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SOAP_ENV__Fault>())).SOAP_ENV__Code as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Fault),
            "::",
            stringify!(SOAP_ENV__Code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SOAP_ENV__Fault>())).SOAP_ENV__Reason as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Fault),
            "::",
            stringify!(SOAP_ENV__Reason)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SOAP_ENV__Fault>())).SOAP_ENV__Node as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Fault),
            "::",
            stringify!(SOAP_ENV__Node)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SOAP_ENV__Fault>())).SOAP_ENV__Role as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Fault),
            "::",
            stringify!(SOAP_ENV__Role)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<SOAP_ENV__Fault>())).SOAP_ENV__Detail as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SOAP_ENV__Fault),
            "::",
            stringify!(SOAP_ENV__Detail)
        )
    );
}
pub type _QName = *mut ::std::os::raw::c_char;
pub type _XML = *mut ::std::os::raw::c_char;
pub type xsd__date = *mut ::std::os::raw::c_char;
pub type ns3__id = i64;
pub type ns3__optionalInt = ::std::os::raw::c_int;
pub use self::xsd__boolean as ns3__optionalBoolean;
pub type ns3__optionalDouble = f64;
pub type ns3__optionalLong = i64;
extern "C" {
    /// \
    /// *
    /// Client-Side Call Stubs                                                     *
    /// *
    /// \
    pub fn soap_call___ns1__Login(
        soap: *mut soap,
        soap_endpoint: *const ::std::os::raw::c_char,
        soap_action: *const ::std::os::raw::c_char,
        ns3__LoginRequestParameter: *mut _ns3__LoginRequestParameter,
        ns3__session: *mut _ns3__session,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_call___ns1__LoginNoAuth(
        soap: *mut soap,
        soap_endpoint: *const ::std::os::raw::c_char,
        soap_action: *const ::std::os::raw::c_char,
        ns3__LoginNoAuthRequestParameter: *mut _ns3__LoginNoAuthRequestParameter,
        ns3__session: *mut _ns3__session,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_call___ns1__LoginSAML(
        soap: *mut soap,
        soap_endpoint: *const ::std::os::raw::c_char,
        soap_action: *const ::std::os::raw::c_char,
        ns3__LoginSAMLRequestParameter: *mut _ns3__LoginSAMLRequestParameter,
        ns3__session: *mut _ns3__session,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_call___ns1__LoginImpersonate(
        soap: *mut soap,
        soap_endpoint: *const ::std::os::raw::c_char,
        soap_action: *const ::std::os::raw::c_char,
        ns3__LoginImpersonateRequestParameter: *mut _ns3__LoginImpersonateRequestParameter,
        ns3__session: *mut _ns3__session,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_call___ns1__Logout(
        soap: *mut soap,
        soap_endpoint: *const ::std::os::raw::c_char,
        soap_action: *const ::std::os::raw::c_char,
        ns3__LogoutRequestParameter: *mut _ns3__LogoutRequestParameter,
        _param_1: *mut __ns1__LogoutResponse,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_call___ns1__createUser(
        soap: *mut soap,
        soap_endpoint: *const ::std::os::raw::c_char,
        soap_action: *const ::std::os::raw::c_char,
        ns3__createUserRequestParameter: *mut _ns3__createUserRequestParameter,
        ns3__User: *mut ns3__T_USCOREUser,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_call___ns1__deleteUser(
        soap: *mut soap,
        soap_endpoint: *const ::std::os::raw::c_char,
        soap_action: *const ::std::os::raw::c_char,
        ns3__deleteUserRequestParameter: *mut _ns3__deleteUserRequestParameter,
        _param_2: *mut __ns1__deleteUserResponse,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_call___ns1__searchUser(
        soap: *mut soap,
        soap_endpoint: *const ::std::os::raw::c_char,
        soap_action: *const ::std::os::raw::c_char,
        ns3__searchUserRequestParameter: *mut _ns3__searchUserRequestParameter,
        ns3__UserList: *mut _ns3__UserList,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_markelement(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn soap_putindependent(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_getindependent(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_getelement(
        arg1: *mut soap,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn soap_putelement(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_ignore_element(arg1: *mut soap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_default_byte(arg1: *mut soap, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn soap_out_byte(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_byte(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_put_byte(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_byte(
        arg1: *mut soap,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_out_ns3__optionalInt(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_int,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_ns3__optionalInt(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_put_ns3__optionalInt(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_ns3__optionalInt(
        arg1: *mut soap,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_default_int(arg1: *mut soap, arg2: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn soap_out_int(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_int,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_int(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_put_int(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_int(
        arg1: *mut soap,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_out_ns3__optionalLong(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const i64,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_ns3__optionalLong(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut i64,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut i64;
}
extern "C" {
    pub fn soap_put_ns3__optionalLong(
        arg1: *mut soap,
        arg2: *const i64,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_ns3__optionalLong(
        arg1: *mut soap,
        arg2: *mut i64,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut i64;
}
extern "C" {
    pub fn soap_out_ns3__id(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const i64,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_ns3__id(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut i64,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut i64;
}
extern "C" {
    pub fn soap_put_ns3__id(
        arg1: *mut soap,
        arg2: *const i64,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_ns3__id(
        arg1: *mut soap,
        arg2: *mut i64,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut i64;
}
extern "C" {
    pub fn soap_default_LONG64(arg1: *mut soap, arg2: *mut i64);
}
extern "C" {
    pub fn soap_out_LONG64(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const i64,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_LONG64(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut i64,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut i64;
}
extern "C" {
    pub fn soap_put_LONG64(
        arg1: *mut soap,
        arg2: *const i64,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_LONG64(
        arg1: *mut soap,
        arg2: *mut i64,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut i64;
}
extern "C" {
    pub fn soap_out_ns3__optionalDouble(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const f64,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_ns3__optionalDouble(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut f64,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut f64;
}
extern "C" {
    pub fn soap_put_ns3__optionalDouble(
        arg1: *mut soap,
        arg2: *const f64,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_ns3__optionalDouble(
        arg1: *mut soap,
        arg2: *mut f64,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut f64;
}
extern "C" {
    pub fn soap_default_double(arg1: *mut soap, arg2: *mut f64);
}
extern "C" {
    pub fn soap_out_double(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const f64,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_double(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut f64,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut f64;
}
extern "C" {
    pub fn soap_put_double(
        arg1: *mut soap,
        arg2: *const f64,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_double(
        arg1: *mut soap,
        arg2: *mut f64,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut f64;
}
extern "C" {
    pub fn soap_default_ns3__T_USCOREUserState(arg1: *mut soap, arg2: *mut ns3__T_USCOREUserState);
}
extern "C" {
    pub fn soap_out_ns3__T_USCOREUserState(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ns3__T_USCOREUserState,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_ns3__T_USCOREUserState2s(
        arg1: *mut soap,
        arg2: ns3__T_USCOREUserState,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_in_ns3__T_USCOREUserState(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ns3__T_USCOREUserState,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ns3__T_USCOREUserState;
}
extern "C" {
    pub fn soap_s2ns3__T_USCOREUserState(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ns3__T_USCOREUserState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_put_ns3__T_USCOREUserState(
        arg1: *mut soap,
        arg2: *const ns3__T_USCOREUserState,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_ns3__T_USCOREUserState(
        arg1: *mut soap,
        arg2: *mut ns3__T_USCOREUserState,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ns3__T_USCOREUserState;
}
extern "C" {
    pub fn soap_default_ns3__T_USCORELicenseType(
        arg1: *mut soap,
        arg2: *mut ns3__T_USCORELicenseType,
    );
}
extern "C" {
    pub fn soap_out_ns3__T_USCORELicenseType(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ns3__T_USCORELicenseType,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_ns3__T_USCORELicenseType2s(
        arg1: *mut soap,
        arg2: ns3__T_USCORELicenseType,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_in_ns3__T_USCORELicenseType(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ns3__T_USCORELicenseType,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ns3__T_USCORELicenseType;
}
extern "C" {
    pub fn soap_s2ns3__T_USCORELicenseType(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ns3__T_USCORELicenseType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_put_ns3__T_USCORELicenseType(
        arg1: *mut soap,
        arg2: *const ns3__T_USCORELicenseType,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_ns3__T_USCORELicenseType(
        arg1: *mut soap,
        arg2: *mut ns3__T_USCORELicenseType,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ns3__T_USCORELicenseType;
}
extern "C" {
    pub fn soap_out_ns3__optionalBoolean(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const xsd__boolean,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_ns3__optionalBoolean(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut xsd__boolean,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut xsd__boolean;
}
extern "C" {
    pub fn soap_put_ns3__optionalBoolean(
        arg1: *mut soap,
        arg2: *const xsd__boolean,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_ns3__optionalBoolean(
        arg1: *mut soap,
        arg2: *mut xsd__boolean,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut xsd__boolean;
}
extern "C" {
    pub fn soap_default_xsd__boolean(arg1: *mut soap, arg2: *mut xsd__boolean);
}
extern "C" {
    pub fn soap_out_xsd__boolean(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const xsd__boolean,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_xsd__boolean2s(
        arg1: *mut soap,
        arg2: xsd__boolean,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_in_xsd__boolean(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut xsd__boolean,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut xsd__boolean;
}
extern "C" {
    pub fn soap_s2xsd__boolean(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut xsd__boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_put_xsd__boolean(
        arg1: *mut soap,
        arg2: *const xsd__boolean,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_xsd__boolean(
        arg1: *mut soap,
        arg2: *mut xsd__boolean,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut xsd__boolean;
}
extern "C" {
    pub fn soap_default_SOAP_ENV__Fault(arg1: *mut soap, arg2: *mut SOAP_ENV__Fault);
}
extern "C" {
    pub fn soap_serialize_SOAP_ENV__Fault(arg1: *mut soap, arg2: *const SOAP_ENV__Fault);
}
extern "C" {
    pub fn soap_out_SOAP_ENV__Fault(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const SOAP_ENV__Fault,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_SOAP_ENV__Fault(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut SOAP_ENV__Fault,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut SOAP_ENV__Fault;
}
extern "C" {
    pub fn soap_put_SOAP_ENV__Fault(
        arg1: *mut soap,
        arg2: *const SOAP_ENV__Fault,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_SOAP_ENV__Fault(
        arg1: *mut soap,
        arg2: *mut SOAP_ENV__Fault,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut SOAP_ENV__Fault;
}
extern "C" {
    pub fn soap_default_SOAP_ENV__Reason(arg1: *mut soap, arg2: *mut SOAP_ENV__Reason);
}
extern "C" {
    pub fn soap_serialize_SOAP_ENV__Reason(arg1: *mut soap, arg2: *const SOAP_ENV__Reason);
}
extern "C" {
    pub fn soap_out_SOAP_ENV__Reason(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const SOAP_ENV__Reason,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_SOAP_ENV__Reason(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut SOAP_ENV__Reason,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut SOAP_ENV__Reason;
}
extern "C" {
    pub fn soap_put_SOAP_ENV__Reason(
        arg1: *mut soap,
        arg2: *const SOAP_ENV__Reason,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_SOAP_ENV__Reason(
        arg1: *mut soap,
        arg2: *mut SOAP_ENV__Reason,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut SOAP_ENV__Reason;
}
extern "C" {
    pub fn soap_default_SOAP_ENV__Code(arg1: *mut soap, arg2: *mut SOAP_ENV__Code);
}
extern "C" {
    pub fn soap_serialize_SOAP_ENV__Code(arg1: *mut soap, arg2: *const SOAP_ENV__Code);
}
extern "C" {
    pub fn soap_out_SOAP_ENV__Code(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const SOAP_ENV__Code,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_SOAP_ENV__Code(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut SOAP_ENV__Code,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut SOAP_ENV__Code;
}
extern "C" {
    pub fn soap_put_SOAP_ENV__Code(
        arg1: *mut soap,
        arg2: *const SOAP_ENV__Code,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_SOAP_ENV__Code(
        arg1: *mut soap,
        arg2: *mut SOAP_ENV__Code,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut SOAP_ENV__Code;
}
extern "C" {
    pub fn soap_default_SOAP_ENV__Header(arg1: *mut soap, arg2: *mut SOAP_ENV__Header);
}
extern "C" {
    pub fn soap_serialize_SOAP_ENV__Header(arg1: *mut soap, arg2: *const SOAP_ENV__Header);
}
extern "C" {
    pub fn soap_out_SOAP_ENV__Header(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const SOAP_ENV__Header,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_SOAP_ENV__Header(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut SOAP_ENV__Header,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut SOAP_ENV__Header;
}
extern "C" {
    pub fn soap_put_SOAP_ENV__Header(
        arg1: *mut soap,
        arg2: *const SOAP_ENV__Header,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_SOAP_ENV__Header(
        arg1: *mut soap,
        arg2: *mut SOAP_ENV__Header,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut SOAP_ENV__Header;
}
extern "C" {
    pub fn soap_default___ns1__searchUser(arg1: *mut soap, arg2: *mut __ns1__searchUser);
}
extern "C" {
    pub fn soap_serialize___ns1__searchUser(arg1: *mut soap, arg2: *const __ns1__searchUser);
}
extern "C" {
    pub fn soap_out___ns1__searchUser(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const __ns1__searchUser,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in___ns1__searchUser(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __ns1__searchUser,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut __ns1__searchUser;
}
extern "C" {
    pub fn soap_put___ns1__searchUser(
        arg1: *mut soap,
        arg2: *const __ns1__searchUser,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get___ns1__searchUser(
        arg1: *mut soap,
        arg2: *mut __ns1__searchUser,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut __ns1__searchUser;
}
extern "C" {
    pub fn soap_default___ns1__deleteUser(arg1: *mut soap, arg2: *mut __ns1__deleteUser);
}
extern "C" {
    pub fn soap_serialize___ns1__deleteUser(arg1: *mut soap, arg2: *const __ns1__deleteUser);
}
extern "C" {
    pub fn soap_out___ns1__deleteUser(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const __ns1__deleteUser,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in___ns1__deleteUser(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __ns1__deleteUser,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut __ns1__deleteUser;
}
extern "C" {
    pub fn soap_put___ns1__deleteUser(
        arg1: *mut soap,
        arg2: *const __ns1__deleteUser,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get___ns1__deleteUser(
        arg1: *mut soap,
        arg2: *mut __ns1__deleteUser,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut __ns1__deleteUser;
}
extern "C" {
    pub fn soap_default___ns1__deleteUserResponse(
        arg1: *mut soap,
        arg2: *mut __ns1__deleteUserResponse,
    );
}
extern "C" {
    pub fn soap_serialize___ns1__deleteUserResponse(
        arg1: *mut soap,
        arg2: *const __ns1__deleteUserResponse,
    );
}
extern "C" {
    pub fn soap_out___ns1__deleteUserResponse(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const __ns1__deleteUserResponse,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in___ns1__deleteUserResponse(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __ns1__deleteUserResponse,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut __ns1__deleteUserResponse;
}
extern "C" {
    pub fn soap_put___ns1__deleteUserResponse(
        arg1: *mut soap,
        arg2: *const __ns1__deleteUserResponse,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get___ns1__deleteUserResponse(
        arg1: *mut soap,
        arg2: *mut __ns1__deleteUserResponse,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut __ns1__deleteUserResponse;
}
extern "C" {
    pub fn soap_default___ns1__createUser(arg1: *mut soap, arg2: *mut __ns1__createUser);
}
extern "C" {
    pub fn soap_serialize___ns1__createUser(arg1: *mut soap, arg2: *const __ns1__createUser);
}
extern "C" {
    pub fn soap_out___ns1__createUser(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const __ns1__createUser,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in___ns1__createUser(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __ns1__createUser,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut __ns1__createUser;
}
extern "C" {
    pub fn soap_put___ns1__createUser(
        arg1: *mut soap,
        arg2: *const __ns1__createUser,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get___ns1__createUser(
        arg1: *mut soap,
        arg2: *mut __ns1__createUser,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut __ns1__createUser;
}
extern "C" {
    pub fn soap_default___ns1__Logout(arg1: *mut soap, arg2: *mut __ns1__Logout);
}
extern "C" {
    pub fn soap_serialize___ns1__Logout(arg1: *mut soap, arg2: *const __ns1__Logout);
}
extern "C" {
    pub fn soap_out___ns1__Logout(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const __ns1__Logout,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in___ns1__Logout(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __ns1__Logout,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut __ns1__Logout;
}
extern "C" {
    pub fn soap_put___ns1__Logout(
        arg1: *mut soap,
        arg2: *const __ns1__Logout,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get___ns1__Logout(
        arg1: *mut soap,
        arg2: *mut __ns1__Logout,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut __ns1__Logout;
}
extern "C" {
    pub fn soap_default___ns1__LogoutResponse(arg1: *mut soap, arg2: *mut __ns1__LogoutResponse);
}
extern "C" {
    pub fn soap_serialize___ns1__LogoutResponse(
        arg1: *mut soap,
        arg2: *const __ns1__LogoutResponse,
    );
}
extern "C" {
    pub fn soap_out___ns1__LogoutResponse(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const __ns1__LogoutResponse,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in___ns1__LogoutResponse(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __ns1__LogoutResponse,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut __ns1__LogoutResponse;
}
extern "C" {
    pub fn soap_put___ns1__LogoutResponse(
        arg1: *mut soap,
        arg2: *const __ns1__LogoutResponse,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get___ns1__LogoutResponse(
        arg1: *mut soap,
        arg2: *mut __ns1__LogoutResponse,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut __ns1__LogoutResponse;
}
extern "C" {
    pub fn soap_default___ns1__LoginImpersonate(
        arg1: *mut soap,
        arg2: *mut __ns1__LoginImpersonate,
    );
}
extern "C" {
    pub fn soap_serialize___ns1__LoginImpersonate(
        arg1: *mut soap,
        arg2: *const __ns1__LoginImpersonate,
    );
}
extern "C" {
    pub fn soap_out___ns1__LoginImpersonate(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const __ns1__LoginImpersonate,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in___ns1__LoginImpersonate(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __ns1__LoginImpersonate,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut __ns1__LoginImpersonate;
}
extern "C" {
    pub fn soap_put___ns1__LoginImpersonate(
        arg1: *mut soap,
        arg2: *const __ns1__LoginImpersonate,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get___ns1__LoginImpersonate(
        arg1: *mut soap,
        arg2: *mut __ns1__LoginImpersonate,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut __ns1__LoginImpersonate;
}
extern "C" {
    pub fn soap_default___ns1__LoginSAML(arg1: *mut soap, arg2: *mut __ns1__LoginSAML);
}
extern "C" {
    pub fn soap_serialize___ns1__LoginSAML(arg1: *mut soap, arg2: *const __ns1__LoginSAML);
}
extern "C" {
    pub fn soap_out___ns1__LoginSAML(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const __ns1__LoginSAML,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in___ns1__LoginSAML(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __ns1__LoginSAML,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut __ns1__LoginSAML;
}
extern "C" {
    pub fn soap_put___ns1__LoginSAML(
        arg1: *mut soap,
        arg2: *const __ns1__LoginSAML,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get___ns1__LoginSAML(
        arg1: *mut soap,
        arg2: *mut __ns1__LoginSAML,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut __ns1__LoginSAML;
}
extern "C" {
    pub fn soap_default___ns1__LoginNoAuth(arg1: *mut soap, arg2: *mut __ns1__LoginNoAuth);
}
extern "C" {
    pub fn soap_serialize___ns1__LoginNoAuth(arg1: *mut soap, arg2: *const __ns1__LoginNoAuth);
}
extern "C" {
    pub fn soap_out___ns1__LoginNoAuth(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const __ns1__LoginNoAuth,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in___ns1__LoginNoAuth(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __ns1__LoginNoAuth,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut __ns1__LoginNoAuth;
}
extern "C" {
    pub fn soap_put___ns1__LoginNoAuth(
        arg1: *mut soap,
        arg2: *const __ns1__LoginNoAuth,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get___ns1__LoginNoAuth(
        arg1: *mut soap,
        arg2: *mut __ns1__LoginNoAuth,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut __ns1__LoginNoAuth;
}
extern "C" {
    pub fn soap_default___ns1__Login(arg1: *mut soap, arg2: *mut __ns1__Login);
}
extern "C" {
    pub fn soap_serialize___ns1__Login(arg1: *mut soap, arg2: *const __ns1__Login);
}
extern "C" {
    pub fn soap_out___ns1__Login(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const __ns1__Login,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in___ns1__Login(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __ns1__Login,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut __ns1__Login;
}
extern "C" {
    pub fn soap_put___ns1__Login(
        arg1: *mut soap,
        arg2: *const __ns1__Login,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get___ns1__Login(
        arg1: *mut soap,
        arg2: *mut __ns1__Login,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut __ns1__Login;
}
extern "C" {
    pub fn soap_default_SOAP_ENV__Detail(arg1: *mut soap, arg2: *mut SOAP_ENV__Detail);
}
extern "C" {
    pub fn soap_serialize_SOAP_ENV__Detail(arg1: *mut soap, arg2: *const SOAP_ENV__Detail);
}
extern "C" {
    pub fn soap_out_SOAP_ENV__Detail(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const SOAP_ENV__Detail,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_SOAP_ENV__Detail(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut SOAP_ENV__Detail,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut SOAP_ENV__Detail;
}
extern "C" {
    pub fn soap_put_SOAP_ENV__Detail(
        arg1: *mut soap,
        arg2: *const SOAP_ENV__Detail,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_SOAP_ENV__Detail(
        arg1: *mut soap,
        arg2: *mut SOAP_ENV__Detail,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut SOAP_ENV__Detail;
}
extern "C" {
    pub fn soap_default__ns2__InvalidConcurrentLicenseException(
        arg1: *mut soap,
        arg2: *mut _ns2__InvalidConcurrentLicenseException,
    );
}
extern "C" {
    pub fn soap_serialize__ns2__InvalidConcurrentLicenseException(
        arg1: *mut soap,
        arg2: *const _ns2__InvalidConcurrentLicenseException,
    );
}
extern "C" {
    pub fn soap_out__ns2__InvalidConcurrentLicenseException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns2__InvalidConcurrentLicenseException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns2__InvalidConcurrentLicenseException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns2__InvalidConcurrentLicenseException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__InvalidConcurrentLicenseException;
}
extern "C" {
    pub fn soap_put__ns2__InvalidConcurrentLicenseException(
        arg1: *mut soap,
        arg2: *const _ns2__InvalidConcurrentLicenseException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns2__InvalidConcurrentLicenseException(
        arg1: *mut soap,
        arg2: *mut _ns2__InvalidConcurrentLicenseException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__InvalidConcurrentLicenseException;
}
extern "C" {
    pub fn soap_default__ns2__InvalidNamedLicenseException(
        arg1: *mut soap,
        arg2: *mut _ns2__InvalidNamedLicenseException,
    );
}
extern "C" {
    pub fn soap_serialize__ns2__InvalidNamedLicenseException(
        arg1: *mut soap,
        arg2: *const _ns2__InvalidNamedLicenseException,
    );
}
extern "C" {
    pub fn soap_out__ns2__InvalidNamedLicenseException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns2__InvalidNamedLicenseException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns2__InvalidNamedLicenseException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns2__InvalidNamedLicenseException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__InvalidNamedLicenseException;
}
extern "C" {
    pub fn soap_put__ns2__InvalidNamedLicenseException(
        arg1: *mut soap,
        arg2: *const _ns2__InvalidNamedLicenseException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns2__InvalidNamedLicenseException(
        arg1: *mut soap,
        arg2: *mut _ns2__InvalidNamedLicenseException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__InvalidNamedLicenseException;
}
extern "C" {
    pub fn soap_default__ns2__InvalidNrOfImpersonationsException(
        arg1: *mut soap,
        arg2: *mut _ns2__InvalidNrOfImpersonationsException,
    );
}
extern "C" {
    pub fn soap_serialize__ns2__InvalidNrOfImpersonationsException(
        arg1: *mut soap,
        arg2: *const _ns2__InvalidNrOfImpersonationsException,
    );
}
extern "C" {
    pub fn soap_out__ns2__InvalidNrOfImpersonationsException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns2__InvalidNrOfImpersonationsException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns2__InvalidNrOfImpersonationsException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns2__InvalidNrOfImpersonationsException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__InvalidNrOfImpersonationsException;
}
extern "C" {
    pub fn soap_put__ns2__InvalidNrOfImpersonationsException(
        arg1: *mut soap,
        arg2: *const _ns2__InvalidNrOfImpersonationsException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns2__InvalidNrOfImpersonationsException(
        arg1: *mut soap,
        arg2: *mut _ns2__InvalidNrOfImpersonationsException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__InvalidNrOfImpersonationsException;
}
extern "C" {
    pub fn soap_default__ns2__ImpersonatedUserNotFoundException(
        arg1: *mut soap,
        arg2: *mut _ns2__ImpersonatedUserNotFoundException,
    );
}
extern "C" {
    pub fn soap_serialize__ns2__ImpersonatedUserNotFoundException(
        arg1: *mut soap,
        arg2: *const _ns2__ImpersonatedUserNotFoundException,
    );
}
extern "C" {
    pub fn soap_out__ns2__ImpersonatedUserNotFoundException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns2__ImpersonatedUserNotFoundException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns2__ImpersonatedUserNotFoundException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns2__ImpersonatedUserNotFoundException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__ImpersonatedUserNotFoundException;
}
extern "C" {
    pub fn soap_put__ns2__ImpersonatedUserNotFoundException(
        arg1: *mut soap,
        arg2: *const _ns2__ImpersonatedUserNotFoundException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns2__ImpersonatedUserNotFoundException(
        arg1: *mut soap,
        arg2: *mut _ns2__ImpersonatedUserNotFoundException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__ImpersonatedUserNotFoundException;
}
extern "C" {
    pub fn soap_default__ns2__ServerMaintenanceException(
        arg1: *mut soap,
        arg2: *mut _ns2__ServerMaintenanceException,
    );
}
extern "C" {
    pub fn soap_serialize__ns2__ServerMaintenanceException(
        arg1: *mut soap,
        arg2: *const _ns2__ServerMaintenanceException,
    );
}
extern "C" {
    pub fn soap_out__ns2__ServerMaintenanceException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns2__ServerMaintenanceException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns2__ServerMaintenanceException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns2__ServerMaintenanceException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__ServerMaintenanceException;
}
extern "C" {
    pub fn soap_put__ns2__ServerMaintenanceException(
        arg1: *mut soap,
        arg2: *const _ns2__ServerMaintenanceException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns2__ServerMaintenanceException(
        arg1: *mut soap,
        arg2: *mut _ns2__ServerMaintenanceException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__ServerMaintenanceException;
}
extern "C" {
    pub fn soap_default__ns2__InvalidDatesException(
        arg1: *mut soap,
        arg2: *mut _ns2__InvalidDatesException,
    );
}
extern "C" {
    pub fn soap_serialize__ns2__InvalidDatesException(
        arg1: *mut soap,
        arg2: *const _ns2__InvalidDatesException,
    );
}
extern "C" {
    pub fn soap_out__ns2__InvalidDatesException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns2__InvalidDatesException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns2__InvalidDatesException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns2__InvalidDatesException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__InvalidDatesException;
}
extern "C" {
    pub fn soap_put__ns2__InvalidDatesException(
        arg1: *mut soap,
        arg2: *const _ns2__InvalidDatesException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns2__InvalidDatesException(
        arg1: *mut soap,
        arg2: *mut _ns2__InvalidDatesException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__InvalidDatesException;
}
extern "C" {
    pub fn soap_default__ns2__InvalidUsernameException(
        arg1: *mut soap,
        arg2: *mut _ns2__InvalidUsernameException,
    );
}
extern "C" {
    pub fn soap_serialize__ns2__InvalidUsernameException(
        arg1: *mut soap,
        arg2: *const _ns2__InvalidUsernameException,
    );
}
extern "C" {
    pub fn soap_out__ns2__InvalidUsernameException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns2__InvalidUsernameException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns2__InvalidUsernameException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns2__InvalidUsernameException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__InvalidUsernameException;
}
extern "C" {
    pub fn soap_put__ns2__InvalidUsernameException(
        arg1: *mut soap,
        arg2: *const _ns2__InvalidUsernameException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns2__InvalidUsernameException(
        arg1: *mut soap,
        arg2: *mut _ns2__InvalidUsernameException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__InvalidUsernameException;
}
extern "C" {
    pub fn soap_default__ns2__InvalidUsernamePasswordCombinationException(
        arg1: *mut soap,
        arg2: *mut _ns2__InvalidUsernamePasswordCombinationException,
    );
}
extern "C" {
    pub fn soap_serialize__ns2__InvalidUsernamePasswordCombinationException(
        arg1: *mut soap,
        arg2: *const _ns2__InvalidUsernamePasswordCombinationException,
    );
}
extern "C" {
    pub fn soap_out__ns2__InvalidUsernamePasswordCombinationException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns2__InvalidUsernamePasswordCombinationException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns2__InvalidUsernamePasswordCombinationException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns2__InvalidUsernamePasswordCombinationException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__InvalidUsernamePasswordCombinationException;
}
extern "C" {
    pub fn soap_put__ns2__InvalidUsernamePasswordCombinationException(
        arg1: *mut soap,
        arg2: *const _ns2__InvalidUsernamePasswordCombinationException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns2__InvalidUsernamePasswordCombinationException(
        arg1: *mut soap,
        arg2: *mut _ns2__InvalidUsernamePasswordCombinationException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__InvalidUsernamePasswordCombinationException;
}
extern "C" {
    pub fn soap_default__ns2__PermissionDeniedException(
        arg1: *mut soap,
        arg2: *mut _ns2__PermissionDeniedException,
    );
}
extern "C" {
    pub fn soap_serialize__ns2__PermissionDeniedException(
        arg1: *mut soap,
        arg2: *const _ns2__PermissionDeniedException,
    );
}
extern "C" {
    pub fn soap_out__ns2__PermissionDeniedException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns2__PermissionDeniedException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns2__PermissionDeniedException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns2__PermissionDeniedException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__PermissionDeniedException;
}
extern "C" {
    pub fn soap_put__ns2__PermissionDeniedException(
        arg1: *mut soap,
        arg2: *const _ns2__PermissionDeniedException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns2__PermissionDeniedException(
        arg1: *mut soap,
        arg2: *mut _ns2__PermissionDeniedException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__PermissionDeniedException;
}
extern "C" {
    pub fn soap_default__ns2__InvalidClientException(
        arg1: *mut soap,
        arg2: *mut _ns2__InvalidClientException,
    );
}
extern "C" {
    pub fn soap_serialize__ns2__InvalidClientException(
        arg1: *mut soap,
        arg2: *const _ns2__InvalidClientException,
    );
}
extern "C" {
    pub fn soap_out__ns2__InvalidClientException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns2__InvalidClientException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns2__InvalidClientException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns2__InvalidClientException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__InvalidClientException;
}
extern "C" {
    pub fn soap_put__ns2__InvalidClientException(
        arg1: *mut soap,
        arg2: *const _ns2__InvalidClientException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns2__InvalidClientException(
        arg1: *mut soap,
        arg2: *mut _ns2__InvalidClientException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__InvalidClientException;
}
extern "C" {
    pub fn soap_default__ns2__InvalidSessionException(
        arg1: *mut soap,
        arg2: *mut _ns2__InvalidSessionException,
    );
}
extern "C" {
    pub fn soap_serialize__ns2__InvalidSessionException(
        arg1: *mut soap,
        arg2: *const _ns2__InvalidSessionException,
    );
}
extern "C" {
    pub fn soap_out__ns2__InvalidSessionException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns2__InvalidSessionException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns2__InvalidSessionException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns2__InvalidSessionException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__InvalidSessionException;
}
extern "C" {
    pub fn soap_put__ns2__InvalidSessionException(
        arg1: *mut soap,
        arg2: *const _ns2__InvalidSessionException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns2__InvalidSessionException(
        arg1: *mut soap,
        arg2: *mut _ns2__InvalidSessionException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__InvalidSessionException;
}
extern "C" {
    pub fn soap_default_ns2__InvalidLicenseException(
        arg1: *mut soap,
        arg2: *mut ns2__InvalidLicenseException,
    );
}
extern "C" {
    pub fn soap_serialize_ns2__InvalidLicenseException(
        arg1: *mut soap,
        arg2: *const ns2__InvalidLicenseException,
    );
}
extern "C" {
    pub fn soap_out_ns2__InvalidLicenseException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ns2__InvalidLicenseException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_ns2__InvalidLicenseException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ns2__InvalidLicenseException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ns2__InvalidLicenseException;
}
extern "C" {
    pub fn soap_put_ns2__InvalidLicenseException(
        arg1: *mut soap,
        arg2: *const ns2__InvalidLicenseException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_ns2__InvalidLicenseException(
        arg1: *mut soap,
        arg2: *mut ns2__InvalidLicenseException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ns2__InvalidLicenseException;
}
extern "C" {
    pub fn soap_default__ns2__GeneralWebserviceException(
        arg1: *mut soap,
        arg2: *mut _ns2__GeneralWebserviceException,
    );
}
extern "C" {
    pub fn soap_serialize__ns2__GeneralWebserviceException(
        arg1: *mut soap,
        arg2: *const _ns2__GeneralWebserviceException,
    );
}
extern "C" {
    pub fn soap_out__ns2__GeneralWebserviceException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns2__GeneralWebserviceException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns2__GeneralWebserviceException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns2__GeneralWebserviceException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__GeneralWebserviceException;
}
extern "C" {
    pub fn soap_put__ns2__GeneralWebserviceException(
        arg1: *mut soap,
        arg2: *const _ns2__GeneralWebserviceException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns2__GeneralWebserviceException(
        arg1: *mut soap,
        arg2: *mut _ns2__GeneralWebserviceException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__GeneralWebserviceException;
}
extern "C" {
    pub fn soap_default__ns2__AssertionException(
        arg1: *mut soap,
        arg2: *mut _ns2__AssertionException,
    );
}
extern "C" {
    pub fn soap_serialize__ns2__AssertionException(
        arg1: *mut soap,
        arg2: *const _ns2__AssertionException,
    );
}
extern "C" {
    pub fn soap_out__ns2__AssertionException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns2__AssertionException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns2__AssertionException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns2__AssertionException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__AssertionException;
}
extern "C" {
    pub fn soap_put__ns2__AssertionException(
        arg1: *mut soap,
        arg2: *const _ns2__AssertionException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns2__AssertionException(
        arg1: *mut soap,
        arg2: *mut _ns2__AssertionException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__AssertionException;
}
extern "C" {
    pub fn soap_default__ns2__InvalidParameterException(
        arg1: *mut soap,
        arg2: *mut _ns2__InvalidParameterException,
    );
}
extern "C" {
    pub fn soap_serialize__ns2__InvalidParameterException(
        arg1: *mut soap,
        arg2: *const _ns2__InvalidParameterException,
    );
}
extern "C" {
    pub fn soap_out__ns2__InvalidParameterException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns2__InvalidParameterException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns2__InvalidParameterException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns2__InvalidParameterException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__InvalidParameterException;
}
extern "C" {
    pub fn soap_put__ns2__InvalidParameterException(
        arg1: *mut soap,
        arg2: *const _ns2__InvalidParameterException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns2__InvalidParameterException(
        arg1: *mut soap,
        arg2: *mut _ns2__InvalidParameterException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__InvalidParameterException;
}
extern "C" {
    pub fn soap_default__ns2__WeekFinishedException(
        arg1: *mut soap,
        arg2: *mut _ns2__WeekFinishedException,
    );
}
extern "C" {
    pub fn soap_serialize__ns2__WeekFinishedException(
        arg1: *mut soap,
        arg2: *const _ns2__WeekFinishedException,
    );
}
extern "C" {
    pub fn soap_out__ns2__WeekFinishedException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns2__WeekFinishedException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns2__WeekFinishedException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns2__WeekFinishedException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__WeekFinishedException;
}
extern "C" {
    pub fn soap_put__ns2__WeekFinishedException(
        arg1: *mut soap,
        arg2: *const _ns2__WeekFinishedException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns2__WeekFinishedException(
        arg1: *mut soap,
        arg2: *mut _ns2__WeekFinishedException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns2__WeekFinishedException;
}
extern "C" {
    pub fn soap_default_ns2__UserManagementException(
        arg1: *mut soap,
        arg2: *mut ns2__UserManagementException,
    );
}
extern "C" {
    pub fn soap_serialize_ns2__UserManagementException(
        arg1: *mut soap,
        arg2: *const ns2__UserManagementException,
    );
}
extern "C" {
    pub fn soap_out_ns2__UserManagementException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ns2__UserManagementException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_ns2__UserManagementException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ns2__UserManagementException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ns2__UserManagementException;
}
extern "C" {
    pub fn soap_put_ns2__UserManagementException(
        arg1: *mut soap,
        arg2: *const ns2__UserManagementException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_ns2__UserManagementException(
        arg1: *mut soap,
        arg2: *mut ns2__UserManagementException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ns2__UserManagementException;
}
extern "C" {
    pub fn soap_default__ns3__UserList(arg1: *mut soap, arg2: *mut _ns3__UserList);
}
extern "C" {
    pub fn soap_serialize__ns3__UserList(arg1: *mut soap, arg2: *const _ns3__UserList);
}
extern "C" {
    pub fn soap_out__ns3__UserList(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns3__UserList,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns3__UserList(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns3__UserList,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns3__UserList;
}
extern "C" {
    pub fn soap_put__ns3__UserList(
        arg1: *mut soap,
        arg2: *const _ns3__UserList,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns3__UserList(
        arg1: *mut soap,
        arg2: *mut _ns3__UserList,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns3__UserList;
}
extern "C" {
    pub fn soap_default__ns3__deleteUserRequestParameter(
        arg1: *mut soap,
        arg2: *mut _ns3__deleteUserRequestParameter,
    );
}
extern "C" {
    pub fn soap_serialize__ns3__deleteUserRequestParameter(
        arg1: *mut soap,
        arg2: *const _ns3__deleteUserRequestParameter,
    );
}
extern "C" {
    pub fn soap_out__ns3__deleteUserRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns3__deleteUserRequestParameter,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns3__deleteUserRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns3__deleteUserRequestParameter,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns3__deleteUserRequestParameter;
}
extern "C" {
    pub fn soap_put__ns3__deleteUserRequestParameter(
        arg1: *mut soap,
        arg2: *const _ns3__deleteUserRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns3__deleteUserRequestParameter(
        arg1: *mut soap,
        arg2: *mut _ns3__deleteUserRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns3__deleteUserRequestParameter;
}
extern "C" {
    pub fn soap_default__ns3__searchUserRequestParameter(
        arg1: *mut soap,
        arg2: *mut _ns3__searchUserRequestParameter,
    );
}
extern "C" {
    pub fn soap_serialize__ns3__searchUserRequestParameter(
        arg1: *mut soap,
        arg2: *const _ns3__searchUserRequestParameter,
    );
}
extern "C" {
    pub fn soap_out__ns3__searchUserRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns3__searchUserRequestParameter,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns3__searchUserRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns3__searchUserRequestParameter,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns3__searchUserRequestParameter;
}
extern "C" {
    pub fn soap_put__ns3__searchUserRequestParameter(
        arg1: *mut soap,
        arg2: *const _ns3__searchUserRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns3__searchUserRequestParameter(
        arg1: *mut soap,
        arg2: *mut _ns3__searchUserRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns3__searchUserRequestParameter;
}
extern "C" {
    pub fn soap_default__ns3__createUserRequestParameter(
        arg1: *mut soap,
        arg2: *mut _ns3__createUserRequestParameter,
    );
}
extern "C" {
    pub fn soap_serialize__ns3__createUserRequestParameter(
        arg1: *mut soap,
        arg2: *const _ns3__createUserRequestParameter,
    );
}
extern "C" {
    pub fn soap_out__ns3__createUserRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns3__createUserRequestParameter,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns3__createUserRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns3__createUserRequestParameter,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns3__createUserRequestParameter;
}
extern "C" {
    pub fn soap_put__ns3__createUserRequestParameter(
        arg1: *mut soap,
        arg2: *const _ns3__createUserRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns3__createUserRequestParameter(
        arg1: *mut soap,
        arg2: *mut _ns3__createUserRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns3__createUserRequestParameter;
}
extern "C" {
    pub fn soap_default__ns3__LogoutRequestParameter(
        arg1: *mut soap,
        arg2: *mut _ns3__LogoutRequestParameter,
    );
}
extern "C" {
    pub fn soap_serialize__ns3__LogoutRequestParameter(
        arg1: *mut soap,
        arg2: *const _ns3__LogoutRequestParameter,
    );
}
extern "C" {
    pub fn soap_out__ns3__LogoutRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns3__LogoutRequestParameter,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns3__LogoutRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns3__LogoutRequestParameter,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns3__LogoutRequestParameter;
}
extern "C" {
    pub fn soap_put__ns3__LogoutRequestParameter(
        arg1: *mut soap,
        arg2: *const _ns3__LogoutRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns3__LogoutRequestParameter(
        arg1: *mut soap,
        arg2: *mut _ns3__LogoutRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns3__LogoutRequestParameter;
}
extern "C" {
    pub fn soap_default__ns3__LoginImpersonateRequestParameter(
        arg1: *mut soap,
        arg2: *mut _ns3__LoginImpersonateRequestParameter,
    );
}
extern "C" {
    pub fn soap_serialize__ns3__LoginImpersonateRequestParameter(
        arg1: *mut soap,
        arg2: *const _ns3__LoginImpersonateRequestParameter,
    );
}
extern "C" {
    pub fn soap_out__ns3__LoginImpersonateRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns3__LoginImpersonateRequestParameter,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns3__LoginImpersonateRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns3__LoginImpersonateRequestParameter,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns3__LoginImpersonateRequestParameter;
}
extern "C" {
    pub fn soap_put__ns3__LoginImpersonateRequestParameter(
        arg1: *mut soap,
        arg2: *const _ns3__LoginImpersonateRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns3__LoginImpersonateRequestParameter(
        arg1: *mut soap,
        arg2: *mut _ns3__LoginImpersonateRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns3__LoginImpersonateRequestParameter;
}
extern "C" {
    pub fn soap_default__ns3__LoginSAMLRequestParameter(
        arg1: *mut soap,
        arg2: *mut _ns3__LoginSAMLRequestParameter,
    );
}
extern "C" {
    pub fn soap_serialize__ns3__LoginSAMLRequestParameter(
        arg1: *mut soap,
        arg2: *const _ns3__LoginSAMLRequestParameter,
    );
}
extern "C" {
    pub fn soap_out__ns3__LoginSAMLRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns3__LoginSAMLRequestParameter,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns3__LoginSAMLRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns3__LoginSAMLRequestParameter,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns3__LoginSAMLRequestParameter;
}
extern "C" {
    pub fn soap_put__ns3__LoginSAMLRequestParameter(
        arg1: *mut soap,
        arg2: *const _ns3__LoginSAMLRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns3__LoginSAMLRequestParameter(
        arg1: *mut soap,
        arg2: *mut _ns3__LoginSAMLRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns3__LoginSAMLRequestParameter;
}
extern "C" {
    pub fn soap_default__ns3__LoginNoAuthRequestParameter(
        arg1: *mut soap,
        arg2: *mut _ns3__LoginNoAuthRequestParameter,
    );
}
extern "C" {
    pub fn soap_serialize__ns3__LoginNoAuthRequestParameter(
        arg1: *mut soap,
        arg2: *const _ns3__LoginNoAuthRequestParameter,
    );
}
extern "C" {
    pub fn soap_out__ns3__LoginNoAuthRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns3__LoginNoAuthRequestParameter,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns3__LoginNoAuthRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns3__LoginNoAuthRequestParameter,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns3__LoginNoAuthRequestParameter;
}
extern "C" {
    pub fn soap_put__ns3__LoginNoAuthRequestParameter(
        arg1: *mut soap,
        arg2: *const _ns3__LoginNoAuthRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns3__LoginNoAuthRequestParameter(
        arg1: *mut soap,
        arg2: *mut _ns3__LoginNoAuthRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns3__LoginNoAuthRequestParameter;
}
extern "C" {
    pub fn soap_default__ns3__LoginRequestParameter(
        arg1: *mut soap,
        arg2: *mut _ns3__LoginRequestParameter,
    );
}
extern "C" {
    pub fn soap_serialize__ns3__LoginRequestParameter(
        arg1: *mut soap,
        arg2: *const _ns3__LoginRequestParameter,
    );
}
extern "C" {
    pub fn soap_out__ns3__LoginRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns3__LoginRequestParameter,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns3__LoginRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns3__LoginRequestParameter,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns3__LoginRequestParameter;
}
extern "C" {
    pub fn soap_put__ns3__LoginRequestParameter(
        arg1: *mut soap,
        arg2: *const _ns3__LoginRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns3__LoginRequestParameter(
        arg1: *mut soap,
        arg2: *mut _ns3__LoginRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns3__LoginRequestParameter;
}
extern "C" {
    pub fn soap_default__ns3__session(arg1: *mut soap, arg2: *mut _ns3__session);
}
extern "C" {
    pub fn soap_serialize__ns3__session(arg1: *mut soap, arg2: *const _ns3__session);
}
extern "C" {
    pub fn soap_out__ns3__session(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const _ns3__session,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns3__session(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut _ns3__session,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns3__session;
}
extern "C" {
    pub fn soap_put__ns3__session(
        arg1: *mut soap,
        arg2: *const _ns3__session,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__ns3__session(
        arg1: *mut soap,
        arg2: *mut _ns3__session,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut _ns3__session;
}
extern "C" {
    pub fn soap_default_ns3__T_USCOREIdList(arg1: *mut soap, arg2: *mut ns3__T_USCOREIdList);
}
extern "C" {
    pub fn soap_serialize_ns3__T_USCOREIdList(arg1: *mut soap, arg2: *const ns3__T_USCOREIdList);
}
extern "C" {
    pub fn soap_out_ns3__T_USCOREIdList(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ns3__T_USCOREIdList,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_ns3__T_USCOREIdList(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ns3__T_USCOREIdList,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ns3__T_USCOREIdList;
}
extern "C" {
    pub fn soap_put_ns3__T_USCOREIdList(
        arg1: *mut soap,
        arg2: *const ns3__T_USCOREIdList,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_ns3__T_USCOREIdList(
        arg1: *mut soap,
        arg2: *mut ns3__T_USCOREIdList,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ns3__T_USCOREIdList;
}
extern "C" {
    pub fn soap_default_ns3__T_USCOREUser(arg1: *mut soap, arg2: *mut ns3__T_USCOREUser);
}
extern "C" {
    pub fn soap_serialize_ns3__T_USCOREUser(arg1: *mut soap, arg2: *const ns3__T_USCOREUser);
}
extern "C" {
    pub fn soap_out_ns3__T_USCOREUser(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ns3__T_USCOREUser,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_ns3__T_USCOREUser(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ns3__T_USCOREUser,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ns3__T_USCOREUser;
}
extern "C" {
    pub fn soap_put_ns3__T_USCOREUser(
        arg1: *mut soap,
        arg2: *const ns3__T_USCOREUser,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_ns3__T_USCOREUser(
        arg1: *mut soap,
        arg2: *mut ns3__T_USCOREUser,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ns3__T_USCOREUser;
}
extern "C" {
    pub fn soap_default_ns3__UserIDInfo(arg1: *mut soap, arg2: *mut ns3__UserIDInfo);
}
extern "C" {
    pub fn soap_serialize_ns3__UserIDInfo(arg1: *mut soap, arg2: *const ns3__UserIDInfo);
}
extern "C" {
    pub fn soap_out_ns3__UserIDInfo(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ns3__UserIDInfo,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_ns3__UserIDInfo(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ns3__UserIDInfo,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ns3__UserIDInfo;
}
extern "C" {
    pub fn soap_put_ns3__UserIDInfo(
        arg1: *mut soap,
        arg2: *const ns3__UserIDInfo,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_ns3__UserIDInfo(
        arg1: *mut soap,
        arg2: *mut ns3__UserIDInfo,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ns3__UserIDInfo;
}
extern "C" {
    pub fn soap_default_ns3__T_USCOREForeignKeyList(
        arg1: *mut soap,
        arg2: *mut ns3__T_USCOREForeignKeyList,
    );
}
extern "C" {
    pub fn soap_serialize_ns3__T_USCOREForeignKeyList(
        arg1: *mut soap,
        arg2: *const ns3__T_USCOREForeignKeyList,
    );
}
extern "C" {
    pub fn soap_out_ns3__T_USCOREForeignKeyList(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ns3__T_USCOREForeignKeyList,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_ns3__T_USCOREForeignKeyList(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ns3__T_USCOREForeignKeyList,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ns3__T_USCOREForeignKeyList;
}
extern "C" {
    pub fn soap_put_ns3__T_USCOREForeignKeyList(
        arg1: *mut soap,
        arg2: *const ns3__T_USCOREForeignKeyList,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_ns3__T_USCOREForeignKeyList(
        arg1: *mut soap,
        arg2: *mut ns3__T_USCOREForeignKeyList,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ns3__T_USCOREForeignKeyList;
}
extern "C" {
    pub fn soap_default_ns3__T_USCOREForeignKey(
        arg1: *mut soap,
        arg2: *mut ns3__T_USCOREForeignKey,
    );
}
extern "C" {
    pub fn soap_serialize_ns3__T_USCOREForeignKey(
        arg1: *mut soap,
        arg2: *const ns3__T_USCOREForeignKey,
    );
}
extern "C" {
    pub fn soap_out_ns3__T_USCOREForeignKey(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ns3__T_USCOREForeignKey,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_ns3__T_USCOREForeignKey(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ns3__T_USCOREForeignKey,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ns3__T_USCOREForeignKey;
}
extern "C" {
    pub fn soap_put_ns3__T_USCOREForeignKey(
        arg1: *mut soap,
        arg2: *const ns3__T_USCOREForeignKey,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_ns3__T_USCOREForeignKey(
        arg1: *mut soap,
        arg2: *mut ns3__T_USCOREForeignKey,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ns3__T_USCOREForeignKey;
}
extern "C" {
    pub fn soap_default_ns2__GeneralWebserviceException(
        arg1: *mut soap,
        arg2: *mut ns2__GeneralWebserviceException,
    );
}
extern "C" {
    pub fn soap_serialize_ns2__GeneralWebserviceException(
        arg1: *mut soap,
        arg2: *const ns2__GeneralWebserviceException,
    );
}
extern "C" {
    pub fn soap_out_ns2__GeneralWebserviceException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ns2__GeneralWebserviceException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_ns2__GeneralWebserviceException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ns2__GeneralWebserviceException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ns2__GeneralWebserviceException;
}
extern "C" {
    pub fn soap_put_ns2__GeneralWebserviceException(
        arg1: *mut soap,
        arg2: *const ns2__GeneralWebserviceException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_ns2__GeneralWebserviceException(
        arg1: *mut soap,
        arg2: *mut ns2__GeneralWebserviceException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ns2__GeneralWebserviceException;
}
extern "C" {
    pub fn soap_serialize__ns3__union_LoginImpersonateRequestParameter(
        arg1: *mut soap,
        arg2: ::std::os::raw::c_int,
        arg3: *const _ns3__union_LoginImpersonateRequestParameter,
    );
}
extern "C" {
    pub fn soap_out__ns3__union_LoginImpersonateRequestParameter(
        arg1: *mut soap,
        arg2: ::std::os::raw::c_int,
        arg3: *const _ns3__union_LoginImpersonateRequestParameter,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns3__union_LoginImpersonateRequestParameter(
        arg1: *mut soap,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut _ns3__union_LoginImpersonateRequestParameter,
    ) -> *mut _ns3__union_LoginImpersonateRequestParameter;
}
extern "C" {
    pub fn soap_serialize__ns3__union_UserIDInfo(
        arg1: *mut soap,
        arg2: ::std::os::raw::c_int,
        arg3: *const _ns3__union_UserIDInfo,
    );
}
extern "C" {
    pub fn soap_out__ns3__union_UserIDInfo(
        arg1: *mut soap,
        arg2: ::std::os::raw::c_int,
        arg3: *const _ns3__union_UserIDInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__ns3__union_UserIDInfo(
        arg1: *mut soap,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut _ns3__union_UserIDInfo,
    ) -> *mut _ns3__union_UserIDInfo;
}
extern "C" {
    pub fn soap_serialize_PointerToSOAP_ENV__Reason(
        arg1: *mut soap,
        arg2: *const *const SOAP_ENV__Reason,
    );
}
extern "C" {
    pub fn soap_out_PointerToSOAP_ENV__Reason(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const SOAP_ENV__Reason,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerToSOAP_ENV__Reason(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut SOAP_ENV__Reason,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut SOAP_ENV__Reason;
}
extern "C" {
    pub fn soap_put_PointerToSOAP_ENV__Reason(
        arg1: *mut soap,
        arg2: *const *const SOAP_ENV__Reason,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerToSOAP_ENV__Reason(
        arg1: *mut soap,
        arg2: *mut *mut SOAP_ENV__Reason,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut SOAP_ENV__Reason;
}
extern "C" {
    pub fn soap_serialize_PointerToSOAP_ENV__Detail(
        arg1: *mut soap,
        arg2: *const *const SOAP_ENV__Detail,
    );
}
extern "C" {
    pub fn soap_out_PointerToSOAP_ENV__Detail(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const SOAP_ENV__Detail,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerToSOAP_ENV__Detail(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut SOAP_ENV__Detail,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut SOAP_ENV__Detail;
}
extern "C" {
    pub fn soap_put_PointerToSOAP_ENV__Detail(
        arg1: *mut soap,
        arg2: *const *const SOAP_ENV__Detail,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerToSOAP_ENV__Detail(
        arg1: *mut soap,
        arg2: *mut *mut SOAP_ENV__Detail,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut SOAP_ENV__Detail;
}
extern "C" {
    pub fn soap_serialize_PointerToSOAP_ENV__Code(
        arg1: *mut soap,
        arg2: *const *const SOAP_ENV__Code,
    );
}
extern "C" {
    pub fn soap_out_PointerToSOAP_ENV__Code(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const SOAP_ENV__Code,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerToSOAP_ENV__Code(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut SOAP_ENV__Code,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut SOAP_ENV__Code;
}
extern "C" {
    pub fn soap_put_PointerToSOAP_ENV__Code(
        arg1: *mut soap,
        arg2: *const *const SOAP_ENV__Code,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerToSOAP_ENV__Code(
        arg1: *mut soap,
        arg2: *mut *mut SOAP_ENV__Code,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut SOAP_ENV__Code;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns3__UserList(
        arg1: *mut soap,
        arg2: *const *const _ns3__UserList,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns3__UserList(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns3__UserList,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns3__UserList(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns3__UserList,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns3__UserList;
}
extern "C" {
    pub fn soap_put_PointerTo_ns3__UserList(
        arg1: *mut soap,
        arg2: *const *const _ns3__UserList,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns3__UserList(
        arg1: *mut soap,
        arg2: *mut *mut _ns3__UserList,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns3__UserList;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns3__searchUserRequestParameter(
        arg1: *mut soap,
        arg2: *const *const _ns3__searchUserRequestParameter,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns3__searchUserRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns3__searchUserRequestParameter,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns3__searchUserRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns3__searchUserRequestParameter,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns3__searchUserRequestParameter;
}
extern "C" {
    pub fn soap_put_PointerTo_ns3__searchUserRequestParameter(
        arg1: *mut soap,
        arg2: *const *const _ns3__searchUserRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns3__searchUserRequestParameter(
        arg1: *mut soap,
        arg2: *mut *mut _ns3__searchUserRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns3__searchUserRequestParameter;
}
extern "C" {
    pub fn soap_serialize_PointerTo__ns1__deleteUserResponse(
        arg1: *mut soap,
        arg2: *const *const __ns1__deleteUserResponse,
    );
}
extern "C" {
    pub fn soap_out_PointerTo__ns1__deleteUserResponse(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const __ns1__deleteUserResponse,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo__ns1__deleteUserResponse(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut __ns1__deleteUserResponse,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut __ns1__deleteUserResponse;
}
extern "C" {
    pub fn soap_put_PointerTo__ns1__deleteUserResponse(
        arg1: *mut soap,
        arg2: *const *const __ns1__deleteUserResponse,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo__ns1__deleteUserResponse(
        arg1: *mut soap,
        arg2: *mut *mut __ns1__deleteUserResponse,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut __ns1__deleteUserResponse;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns3__deleteUserRequestParameter(
        arg1: *mut soap,
        arg2: *const *const _ns3__deleteUserRequestParameter,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns3__deleteUserRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns3__deleteUserRequestParameter,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns3__deleteUserRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns3__deleteUserRequestParameter,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns3__deleteUserRequestParameter;
}
extern "C" {
    pub fn soap_put_PointerTo_ns3__deleteUserRequestParameter(
        arg1: *mut soap,
        arg2: *const *const _ns3__deleteUserRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns3__deleteUserRequestParameter(
        arg1: *mut soap,
        arg2: *mut *mut _ns3__deleteUserRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns3__deleteUserRequestParameter;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns3__createUserRequestParameter(
        arg1: *mut soap,
        arg2: *const *const _ns3__createUserRequestParameter,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns3__createUserRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns3__createUserRequestParameter,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns3__createUserRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns3__createUserRequestParameter,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns3__createUserRequestParameter;
}
extern "C" {
    pub fn soap_put_PointerTo_ns3__createUserRequestParameter(
        arg1: *mut soap,
        arg2: *const *const _ns3__createUserRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns3__createUserRequestParameter(
        arg1: *mut soap,
        arg2: *mut *mut _ns3__createUserRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns3__createUserRequestParameter;
}
extern "C" {
    pub fn soap_serialize_PointerTo__ns1__LogoutResponse(
        arg1: *mut soap,
        arg2: *const *const __ns1__LogoutResponse,
    );
}
extern "C" {
    pub fn soap_out_PointerTo__ns1__LogoutResponse(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const __ns1__LogoutResponse,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo__ns1__LogoutResponse(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut __ns1__LogoutResponse,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut __ns1__LogoutResponse;
}
extern "C" {
    pub fn soap_put_PointerTo__ns1__LogoutResponse(
        arg1: *mut soap,
        arg2: *const *const __ns1__LogoutResponse,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo__ns1__LogoutResponse(
        arg1: *mut soap,
        arg2: *mut *mut __ns1__LogoutResponse,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut __ns1__LogoutResponse;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns3__LogoutRequestParameter(
        arg1: *mut soap,
        arg2: *const *const _ns3__LogoutRequestParameter,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns3__LogoutRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns3__LogoutRequestParameter,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns3__LogoutRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns3__LogoutRequestParameter,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns3__LogoutRequestParameter;
}
extern "C" {
    pub fn soap_put_PointerTo_ns3__LogoutRequestParameter(
        arg1: *mut soap,
        arg2: *const *const _ns3__LogoutRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns3__LogoutRequestParameter(
        arg1: *mut soap,
        arg2: *mut *mut _ns3__LogoutRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns3__LogoutRequestParameter;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns3__LoginImpersonateRequestParameter(
        arg1: *mut soap,
        arg2: *const *const _ns3__LoginImpersonateRequestParameter,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns3__LoginImpersonateRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns3__LoginImpersonateRequestParameter,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns3__LoginImpersonateRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns3__LoginImpersonateRequestParameter,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns3__LoginImpersonateRequestParameter;
}
extern "C" {
    pub fn soap_put_PointerTo_ns3__LoginImpersonateRequestParameter(
        arg1: *mut soap,
        arg2: *const *const _ns3__LoginImpersonateRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns3__LoginImpersonateRequestParameter(
        arg1: *mut soap,
        arg2: *mut *mut _ns3__LoginImpersonateRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns3__LoginImpersonateRequestParameter;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns3__LoginSAMLRequestParameter(
        arg1: *mut soap,
        arg2: *const *const _ns3__LoginSAMLRequestParameter,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns3__LoginSAMLRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns3__LoginSAMLRequestParameter,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns3__LoginSAMLRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns3__LoginSAMLRequestParameter,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns3__LoginSAMLRequestParameter;
}
extern "C" {
    pub fn soap_put_PointerTo_ns3__LoginSAMLRequestParameter(
        arg1: *mut soap,
        arg2: *const *const _ns3__LoginSAMLRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns3__LoginSAMLRequestParameter(
        arg1: *mut soap,
        arg2: *mut *mut _ns3__LoginSAMLRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns3__LoginSAMLRequestParameter;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns3__LoginNoAuthRequestParameter(
        arg1: *mut soap,
        arg2: *const *const _ns3__LoginNoAuthRequestParameter,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns3__LoginNoAuthRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns3__LoginNoAuthRequestParameter,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns3__LoginNoAuthRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns3__LoginNoAuthRequestParameter,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns3__LoginNoAuthRequestParameter;
}
extern "C" {
    pub fn soap_put_PointerTo_ns3__LoginNoAuthRequestParameter(
        arg1: *mut soap,
        arg2: *const *const _ns3__LoginNoAuthRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns3__LoginNoAuthRequestParameter(
        arg1: *mut soap,
        arg2: *mut *mut _ns3__LoginNoAuthRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns3__LoginNoAuthRequestParameter;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns3__session(
        arg1: *mut soap,
        arg2: *const *const _ns3__session,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns3__session(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns3__session,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns3__session(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns3__session,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns3__session;
}
extern "C" {
    pub fn soap_put_PointerTo_ns3__session(
        arg1: *mut soap,
        arg2: *const *const _ns3__session,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns3__session(
        arg1: *mut soap,
        arg2: *mut *mut _ns3__session,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns3__session;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns3__LoginRequestParameter(
        arg1: *mut soap,
        arg2: *const *const _ns3__LoginRequestParameter,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns3__LoginRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns3__LoginRequestParameter,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns3__LoginRequestParameter(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns3__LoginRequestParameter,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns3__LoginRequestParameter;
}
extern "C" {
    pub fn soap_put_PointerTo_ns3__LoginRequestParameter(
        arg1: *mut soap,
        arg2: *const *const _ns3__LoginRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns3__LoginRequestParameter(
        arg1: *mut soap,
        arg2: *mut *mut _ns3__LoginRequestParameter,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns3__LoginRequestParameter;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns2__ServerMaintenanceException(
        arg1: *mut soap,
        arg2: *const *const _ns2__ServerMaintenanceException,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns2__ServerMaintenanceException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns2__ServerMaintenanceException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns2__ServerMaintenanceException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns2__ServerMaintenanceException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__ServerMaintenanceException;
}
extern "C" {
    pub fn soap_put_PointerTo_ns2__ServerMaintenanceException(
        arg1: *mut soap,
        arg2: *const *const _ns2__ServerMaintenanceException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns2__ServerMaintenanceException(
        arg1: *mut soap,
        arg2: *mut *mut _ns2__ServerMaintenanceException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__ServerMaintenanceException;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns2__PermissionDeniedException(
        arg1: *mut soap,
        arg2: *const *const _ns2__PermissionDeniedException,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns2__PermissionDeniedException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns2__PermissionDeniedException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns2__PermissionDeniedException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns2__PermissionDeniedException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__PermissionDeniedException;
}
extern "C" {
    pub fn soap_put_PointerTo_ns2__PermissionDeniedException(
        arg1: *mut soap,
        arg2: *const *const _ns2__PermissionDeniedException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns2__PermissionDeniedException(
        arg1: *mut soap,
        arg2: *mut *mut _ns2__PermissionDeniedException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__PermissionDeniedException;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns2__InvalidUsernamePasswordCombinationException(
        arg1: *mut soap,
        arg2: *const *const _ns2__InvalidUsernamePasswordCombinationException,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns2__InvalidUsernamePasswordCombinationException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns2__InvalidUsernamePasswordCombinationException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns2__InvalidUsernamePasswordCombinationException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns2__InvalidUsernamePasswordCombinationException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__InvalidUsernamePasswordCombinationException;
}
extern "C" {
    pub fn soap_put_PointerTo_ns2__InvalidUsernamePasswordCombinationException(
        arg1: *mut soap,
        arg2: *const *const _ns2__InvalidUsernamePasswordCombinationException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns2__InvalidUsernamePasswordCombinationException(
        arg1: *mut soap,
        arg2: *mut *mut _ns2__InvalidUsernamePasswordCombinationException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__InvalidUsernamePasswordCombinationException;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns2__InvalidUsernameException(
        arg1: *mut soap,
        arg2: *const *const _ns2__InvalidUsernameException,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns2__InvalidUsernameException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns2__InvalidUsernameException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns2__InvalidUsernameException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns2__InvalidUsernameException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__InvalidUsernameException;
}
extern "C" {
    pub fn soap_put_PointerTo_ns2__InvalidUsernameException(
        arg1: *mut soap,
        arg2: *const *const _ns2__InvalidUsernameException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns2__InvalidUsernameException(
        arg1: *mut soap,
        arg2: *mut *mut _ns2__InvalidUsernameException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__InvalidUsernameException;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns2__InvalidSessionException(
        arg1: *mut soap,
        arg2: *const *const _ns2__InvalidSessionException,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns2__InvalidSessionException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns2__InvalidSessionException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns2__InvalidSessionException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns2__InvalidSessionException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__InvalidSessionException;
}
extern "C" {
    pub fn soap_put_PointerTo_ns2__InvalidSessionException(
        arg1: *mut soap,
        arg2: *const *const _ns2__InvalidSessionException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns2__InvalidSessionException(
        arg1: *mut soap,
        arg2: *mut *mut _ns2__InvalidSessionException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__InvalidSessionException;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns2__InvalidParameterException(
        arg1: *mut soap,
        arg2: *const *const _ns2__InvalidParameterException,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns2__InvalidParameterException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns2__InvalidParameterException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns2__InvalidParameterException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns2__InvalidParameterException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__InvalidParameterException;
}
extern "C" {
    pub fn soap_put_PointerTo_ns2__InvalidParameterException(
        arg1: *mut soap,
        arg2: *const *const _ns2__InvalidParameterException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns2__InvalidParameterException(
        arg1: *mut soap,
        arg2: *mut *mut _ns2__InvalidParameterException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__InvalidParameterException;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns2__InvalidNrOfImpersonationsException(
        arg1: *mut soap,
        arg2: *const *const _ns2__InvalidNrOfImpersonationsException,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns2__InvalidNrOfImpersonationsException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns2__InvalidNrOfImpersonationsException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns2__InvalidNrOfImpersonationsException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns2__InvalidNrOfImpersonationsException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__InvalidNrOfImpersonationsException;
}
extern "C" {
    pub fn soap_put_PointerTo_ns2__InvalidNrOfImpersonationsException(
        arg1: *mut soap,
        arg2: *const *const _ns2__InvalidNrOfImpersonationsException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns2__InvalidNrOfImpersonationsException(
        arg1: *mut soap,
        arg2: *mut *mut _ns2__InvalidNrOfImpersonationsException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__InvalidNrOfImpersonationsException;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns2__InvalidNamedLicenseException(
        arg1: *mut soap,
        arg2: *const *const _ns2__InvalidNamedLicenseException,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns2__InvalidNamedLicenseException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns2__InvalidNamedLicenseException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns2__InvalidNamedLicenseException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns2__InvalidNamedLicenseException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__InvalidNamedLicenseException;
}
extern "C" {
    pub fn soap_put_PointerTo_ns2__InvalidNamedLicenseException(
        arg1: *mut soap,
        arg2: *const *const _ns2__InvalidNamedLicenseException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns2__InvalidNamedLicenseException(
        arg1: *mut soap,
        arg2: *mut *mut _ns2__InvalidNamedLicenseException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__InvalidNamedLicenseException;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns2__InvalidDatesException(
        arg1: *mut soap,
        arg2: *const *const _ns2__InvalidDatesException,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns2__InvalidDatesException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns2__InvalidDatesException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns2__InvalidDatesException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns2__InvalidDatesException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__InvalidDatesException;
}
extern "C" {
    pub fn soap_put_PointerTo_ns2__InvalidDatesException(
        arg1: *mut soap,
        arg2: *const *const _ns2__InvalidDatesException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns2__InvalidDatesException(
        arg1: *mut soap,
        arg2: *mut *mut _ns2__InvalidDatesException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__InvalidDatesException;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns2__InvalidConcurrentLicenseException(
        arg1: *mut soap,
        arg2: *const *const _ns2__InvalidConcurrentLicenseException,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns2__InvalidConcurrentLicenseException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns2__InvalidConcurrentLicenseException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns2__InvalidConcurrentLicenseException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns2__InvalidConcurrentLicenseException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__InvalidConcurrentLicenseException;
}
extern "C" {
    pub fn soap_put_PointerTo_ns2__InvalidConcurrentLicenseException(
        arg1: *mut soap,
        arg2: *const *const _ns2__InvalidConcurrentLicenseException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns2__InvalidConcurrentLicenseException(
        arg1: *mut soap,
        arg2: *mut *mut _ns2__InvalidConcurrentLicenseException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__InvalidConcurrentLicenseException;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns2__InvalidClientException(
        arg1: *mut soap,
        arg2: *const *const _ns2__InvalidClientException,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns2__InvalidClientException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns2__InvalidClientException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns2__InvalidClientException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns2__InvalidClientException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__InvalidClientException;
}
extern "C" {
    pub fn soap_put_PointerTo_ns2__InvalidClientException(
        arg1: *mut soap,
        arg2: *const *const _ns2__InvalidClientException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns2__InvalidClientException(
        arg1: *mut soap,
        arg2: *mut *mut _ns2__InvalidClientException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__InvalidClientException;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns2__ImpersonatedUserNotFoundException(
        arg1: *mut soap,
        arg2: *const *const _ns2__ImpersonatedUserNotFoundException,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns2__ImpersonatedUserNotFoundException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns2__ImpersonatedUserNotFoundException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns2__ImpersonatedUserNotFoundException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns2__ImpersonatedUserNotFoundException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__ImpersonatedUserNotFoundException;
}
extern "C" {
    pub fn soap_put_PointerTo_ns2__ImpersonatedUserNotFoundException(
        arg1: *mut soap,
        arg2: *const *const _ns2__ImpersonatedUserNotFoundException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns2__ImpersonatedUserNotFoundException(
        arg1: *mut soap,
        arg2: *mut *mut _ns2__ImpersonatedUserNotFoundException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__ImpersonatedUserNotFoundException;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns2__GeneralWebserviceException(
        arg1: *mut soap,
        arg2: *const *const _ns2__GeneralWebserviceException,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns2__GeneralWebserviceException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns2__GeneralWebserviceException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns2__GeneralWebserviceException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns2__GeneralWebserviceException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__GeneralWebserviceException;
}
extern "C" {
    pub fn soap_put_PointerTo_ns2__GeneralWebserviceException(
        arg1: *mut soap,
        arg2: *const *const _ns2__GeneralWebserviceException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns2__GeneralWebserviceException(
        arg1: *mut soap,
        arg2: *mut *mut _ns2__GeneralWebserviceException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__GeneralWebserviceException;
}
extern "C" {
    pub fn soap_serialize_PointerTo_ns2__AssertionException(
        arg1: *mut soap,
        arg2: *const *const _ns2__AssertionException,
    );
}
extern "C" {
    pub fn soap_out_PointerTo_ns2__AssertionException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const _ns2__AssertionException,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTo_ns2__AssertionException(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut _ns2__AssertionException,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__AssertionException;
}
extern "C" {
    pub fn soap_put_PointerTo_ns2__AssertionException(
        arg1: *mut soap,
        arg2: *const *const _ns2__AssertionException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTo_ns2__AssertionException(
        arg1: *mut soap,
        arg2: *mut *mut _ns2__AssertionException,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut _ns2__AssertionException;
}
extern "C" {
    pub fn soap_serialize_PointerTons3__T_USCOREUser(
        arg1: *mut soap,
        arg2: *const *const ns3__T_USCOREUser,
    );
}
extern "C" {
    pub fn soap_out_PointerTons3__T_USCOREUser(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const ns3__T_USCOREUser,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTons3__T_USCOREUser(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ns3__T_USCOREUser,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut ns3__T_USCOREUser;
}
extern "C" {
    pub fn soap_put_PointerTons3__T_USCOREUser(
        arg1: *mut soap,
        arg2: *const *const ns3__T_USCOREUser,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTons3__T_USCOREUser(
        arg1: *mut soap,
        arg2: *mut *mut ns3__T_USCOREUser,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut ns3__T_USCOREUser;
}
extern "C" {
    pub fn soap_serialize_PointerTons3__UserIDInfo(
        arg1: *mut soap,
        arg2: *const *const ns3__UserIDInfo,
    );
}
extern "C" {
    pub fn soap_out_PointerTons3__UserIDInfo(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const ns3__UserIDInfo,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTons3__UserIDInfo(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ns3__UserIDInfo,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut ns3__UserIDInfo;
}
extern "C" {
    pub fn soap_put_PointerTons3__UserIDInfo(
        arg1: *mut soap,
        arg2: *const *const ns3__UserIDInfo,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTons3__UserIDInfo(
        arg1: *mut soap,
        arg2: *mut *mut ns3__UserIDInfo,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut ns3__UserIDInfo;
}
extern "C" {
    pub fn soap_serialize_PointerTons3__T_USCOREUserState(
        arg1: *mut soap,
        arg2: *const *const ns3__T_USCOREUserState,
    );
}
extern "C" {
    pub fn soap_out_PointerTons3__T_USCOREUserState(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const ns3__T_USCOREUserState,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTons3__T_USCOREUserState(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ns3__T_USCOREUserState,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut ns3__T_USCOREUserState;
}
extern "C" {
    pub fn soap_put_PointerTons3__T_USCOREUserState(
        arg1: *mut soap,
        arg2: *const *const ns3__T_USCOREUserState,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTons3__T_USCOREUserState(
        arg1: *mut soap,
        arg2: *mut *mut ns3__T_USCOREUserState,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut ns3__T_USCOREUserState;
}
extern "C" {
    pub fn soap_serialize_PointerTons3__T_USCORELicenseType(
        arg1: *mut soap,
        arg2: *const *const ns3__T_USCORELicenseType,
    );
}
extern "C" {
    pub fn soap_out_PointerTons3__T_USCORELicenseType(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const ns3__T_USCORELicenseType,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTons3__T_USCORELicenseType(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ns3__T_USCORELicenseType,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut ns3__T_USCORELicenseType;
}
extern "C" {
    pub fn soap_put_PointerTons3__T_USCORELicenseType(
        arg1: *mut soap,
        arg2: *const *const ns3__T_USCORELicenseType,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTons3__T_USCORELicenseType(
        arg1: *mut soap,
        arg2: *mut *mut ns3__T_USCORELicenseType,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut ns3__T_USCORELicenseType;
}
extern "C" {
    pub fn soap_serialize_PointerTons3__id(arg1: *mut soap, arg2: *const *const i64);
}
extern "C" {
    pub fn soap_out_PointerTons3__id(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const i64,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTons3__id(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut i64,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut i64;
}
extern "C" {
    pub fn soap_put_PointerTons3__id(
        arg1: *mut soap,
        arg2: *const *const i64,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTons3__id(
        arg1: *mut soap,
        arg2: *mut *mut i64,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut i64;
}
extern "C" {
    pub fn soap_serialize_PointerTons3__T_USCOREForeignKeyList(
        arg1: *mut soap,
        arg2: *const *const ns3__T_USCOREForeignKeyList,
    );
}
extern "C" {
    pub fn soap_out_PointerTons3__T_USCOREForeignKeyList(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const ns3__T_USCOREForeignKeyList,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTons3__T_USCOREForeignKeyList(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ns3__T_USCOREForeignKeyList,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut ns3__T_USCOREForeignKeyList;
}
extern "C" {
    pub fn soap_put_PointerTons3__T_USCOREForeignKeyList(
        arg1: *mut soap,
        arg2: *const *const ns3__T_USCOREForeignKeyList,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTons3__T_USCOREForeignKeyList(
        arg1: *mut soap,
        arg2: *mut *mut ns3__T_USCOREForeignKeyList,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut ns3__T_USCOREForeignKeyList;
}
extern "C" {
    pub fn soap_serialize_PointerTons3__T_USCOREIdList(
        arg1: *mut soap,
        arg2: *const *const ns3__T_USCOREIdList,
    );
}
extern "C" {
    pub fn soap_out_PointerTons3__T_USCOREIdList(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const ns3__T_USCOREIdList,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTons3__T_USCOREIdList(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ns3__T_USCOREIdList,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut ns3__T_USCOREIdList;
}
extern "C" {
    pub fn soap_put_PointerTons3__T_USCOREIdList(
        arg1: *mut soap,
        arg2: *const *const ns3__T_USCOREIdList,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTons3__T_USCOREIdList(
        arg1: *mut soap,
        arg2: *mut *mut ns3__T_USCOREIdList,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut ns3__T_USCOREIdList;
}
extern "C" {
    pub fn soap_serialize_PointerTons3__T_USCOREForeignKey(
        arg1: *mut soap,
        arg2: *const *const ns3__T_USCOREForeignKey,
    );
}
extern "C" {
    pub fn soap_out_PointerTons3__T_USCOREForeignKey(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const ns3__T_USCOREForeignKey,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_PointerTons3__T_USCOREForeignKey(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ns3__T_USCOREForeignKey,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut ns3__T_USCOREForeignKey;
}
extern "C" {
    pub fn soap_put_PointerTons3__T_USCOREForeignKey(
        arg1: *mut soap,
        arg2: *const *const ns3__T_USCOREForeignKey,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_PointerTons3__T_USCOREForeignKey(
        arg1: *mut soap,
        arg2: *mut *mut ns3__T_USCOREForeignKey,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut ns3__T_USCOREForeignKey;
}
extern "C" {
    pub fn soap_serialize_xsd__date(arg1: *mut soap, arg2: *const *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn soap_out_xsd__date(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_xsd__date(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_put_xsd__date(
        arg1: *mut soap,
        arg2: *const *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_xsd__date(
        arg1: *mut soap,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_serialize__QName(arg1: *mut soap, arg2: *const *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn soap_out__QName(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in__QName(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_put__QName(
        arg1: *mut soap,
        arg2: *const *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get__QName(
        arg1: *mut soap,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_default_string(arg1: *mut soap, arg2: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn soap_serialize_string(arg1: *mut soap, arg2: *const *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn soap_out_string(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_in_string(
        arg1: *mut soap,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn soap_put_string(
        arg1: *mut soap,
        arg2: *const *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn soap_get_string(
        arg1: *mut soap,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct soap_mlist {
    pub _address: u8,
}
